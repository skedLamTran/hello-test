import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
var _excluded = ["color", "icon", "role"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { omitStyledProps, variant } from '@looker/design-tokens';
import { PersonOutline } from '@styled-icons/material/PersonOutline';
import { StyledIconBase } from '@styled-icons/styled-icon';
import styled from 'styled-components';
import { avatarCSS } from './Avatar';
var size = variant({
  prop: 'size',
  variants: {
    xxsmall: {
      height: '16px',
      width: '16px'
    },
    xsmall: {
      height: '20px',
      width: '20px'
    },
    small: {
      height: '20px',
      width: '20px'
    },
    medium: {
      height: '30px',
      width: '30px'
    },
    large: {
      height: '36px',
      width: '36px'
    }
  }
});

var AvatarLayout = function AvatarLayout(_ref) {
  var color = _ref.color,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? React.createElement(PersonOutline, null) : _ref$icon,
      role = _ref.role,
      props = _objectWithoutProperties(_ref, _excluded);

  var BaseElement = role === 'button' ? 'button' : 'div';
  return React.createElement(BaseElement, omitStyledProps(props), icon);
};

export var AvatarIcon = styled(AvatarLayout).attrs(function (_ref2) {
  var _ref2$bg = _ref2.bg,
      bg = _ref2$bg === void 0 ? 'background' : _ref2$bg,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? 'keyFocus' : _ref2$color,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? 'small' : _ref2$size;
  return {
    bg: bg,
    color: color,
    size: size
  };
}).withConfig({
  displayName: "AvatarIcon",
  componentId: "sc-18uvd0-0"
})(["", " ", " border:solid 1px currentColor;", "{", "}"], avatarCSS, function (_ref3) {
  var role = _ref3.role;
  return role === 'button' && 'cursor: pointer;';
}, StyledIconBase, size);
//# sourceMappingURL=AvatarIcon.js.map
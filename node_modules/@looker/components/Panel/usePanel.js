import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["canClose", "content", "defaultOpen", "direction", "isOpen", "onAfterClose", "onAfterOpen", "onClose", "setOpen", "disableAnimation"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useRef, useState } from 'react';
import styled from 'styled-components';
import { VisuallyHidden } from '../VisuallyHidden';
import { useAnimationState, useControlWarn, useTrapStack } from '../utils';
import { PanelHeader } from './PanelHeader';
import { PanelsContext } from './Panels';
import { PanelSurface } from './PanelSurface';
import { PanelWindow } from './PanelWindow';
export var usePanel = function usePanel(_ref) {
  var canClose = _ref.canClose,
      content = _ref.content,
      _ref$defaultOpen = _ref.defaultOpen,
      defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? 'left' : _ref$direction,
      controlledIsOpen = _ref.isOpen,
      onAfterClose = _ref.onAfterClose,
      onAfterOpen = _ref.onAfterOpen,
      onClose = _ref.onClose,
      controlledSetOpen = _ref.setOpen,
      disableAnimation = _ref.disableAnimation,
      headerProps = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(defaultOpen),
      _useState2 = _slicedToArray(_useState, 2),
      uncontrolledIsOpen = _useState2[0],
      setUncontrolledIsOpen = _useState2[1];

  var isControlled = useControlWarn({
    controllingProps: ['setOpen'],
    isControlledCheck: function isControlledCheck() {
      return controlledSetOpen !== undefined;
    },
    name: 'usePanel'
  });

  if (Boolean(onClose) && Boolean(controlledSetOpen)) {
    throw new Error('usePanel does not support setting both `setOpen` and `onClose`. Use just `setOpen`');
  }

  var isOpen = isControlled ? controlledIsOpen || false : uncontrolledIsOpen;
  var firstRender = useRef(true);

  var _useAnimationState = useAnimationState({
    enter: disableAnimation || isOpen && firstRender.current ? 'none' : undefined,
    exit: disableAnimation ? 'none' : undefined,
    isOpen: isOpen,
    onAfterEntered: onAfterOpen,
    onAfterExited: onAfterClose
  }),
      busy = _useAnimationState.busy,
      className = _useAnimationState.className,
      renderDOM = _useAnimationState.renderDOM;

  firstRender.current = false;
  var setOpen = isControlled && controlledSetOpen ? controlledSetOpen : setUncontrolledIsOpen;

  var handleOpen = function handleOpen() {
    return setOpen(true);
  };

  var handleClose = function handleClose() {
    if (canClose && !canClose()) return;
    setOpen(false);
    onClose && onClose();
  };

  var setInitialFocus = useCallback(function (element) {
    element === null || element === void 0 ? void 0 : element.focus({
      preventScroll: true
    });
  }, []);

  var _useTrapStack = useTrapStack({
    context: PanelsContext
  }),
      _useTrapStack2 = _slicedToArray(_useTrapStack, 2),
      ref = _useTrapStack2[1];

  var visibilityTrigger = className === 'entered' && React.createElement(VisuallyHidden, {
    ref: ref
  });
  var panel = renderDOM && React.createElement(PanelWindow, null, React.createElement(PanelSurface, {
    "aria-busy": busy ? true : undefined,
    className: className,
    direction: direction,
    "data-panel": true,
    tabIndex: -1,
    ref: setInitialFocus
  }, visibilityTrigger, React.createElement(PanelHeader, _extends({
    onClose: handleClose
  }, headerProps)), React.createElement(PanelContent, null, content)));
  return {
    domProps: {
      'aria-expanded': isOpen,
      onClick: handleOpen,
      role: 'button'
    },
    isOpen: isOpen,
    panel: panel,
    setOpen: setOpen
  };
};
var PanelContent = styled.div.withConfig({
  displayName: "usePanel__PanelContent",
  componentId: "sc-145ldfd-0"
})(["flex:1;overflow:auto;"]);
//# sourceMappingURL=usePanel.js.map
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useTranslation } from 'react-i18next';
import React from 'react';
import styled from 'styled-components';
import { ChevronLeft } from '@styled-icons/material-rounded/ChevronLeft';
import { ChevronRight } from '@styled-icons/material-rounded/ChevronRight';
import { Flex } from '../Layout';
import { IconButton } from '../Button';
import { Span } from '../Text';
import { DoubleChevronLeft } from './DoubleChevronLeft';
import { DoubleChevronRight } from './DoubleChevronRight';

var PaginationButton = function PaginationButton(props) {
  return React.createElement(IconButton, _extends({
    outline: true,
    shape: "square",
    mx: "xxsmall"
  }, props));
};

var PaginationLayout = function PaginationLayout(_ref) {
  var _ref$alwaysVisible = _ref.alwaysVisible,
      alwaysVisible = _ref$alwaysVisible === void 0 ? false : _ref$alwaysVisible,
      className = _ref.className,
      current = _ref.current,
      pages = _ref.pages,
      onChange = _ref.onChange;

  var _useTranslation = useTranslation('Pagination'),
      t = _useTranslation.t;

  if (pages <= 1 && !alwaysVisible) return null;

  var first = function first() {
    return onChange(1);
  };

  var previous = function previous() {
    return onChange(current - 1);
  };

  var next = function next() {
    return onChange(current + 1);
  };

  var last = function last() {
    return onChange(pages);
  };

  return React.createElement(Flex, {
    alignItems: "center",
    className: className
  }, React.createElement(PaginationButton, {
    label: t('First page of results'),
    icon: React.createElement(DoubleChevronLeft, null),
    onClick: first,
    disabled: current === 1
  }), React.createElement(PaginationButton, {
    label: t('Previous page of results'),
    icon: React.createElement(ChevronLeft, null),
    onClick: previous,
    disabled: current === 1
  }), React.createElement(Span, {
    fontSize: "small",
    mx: "xxsmall"
  }, React.createElement("b", null, current), " ", t('of'), " ", pages), React.createElement(PaginationButton, {
    label: t('Next page of results'),
    icon: React.createElement(ChevronRight, null),
    onClick: next,
    disabled: pages - current === 0
  }), React.createElement(PaginationButton, {
    mr: "none",
    label: t('Last page of results'),
    icon: React.createElement(DoubleChevronRight, null),
    onClick: last,
    disabled: pages - current === 0
  }));
};

export var Pagination = styled(PaginationLayout).withConfig({
  displayName: "Pagination",
  componentId: "sc-kh6un3-0"
})([""]);
//# sourceMappingURL=Pagination.js.map
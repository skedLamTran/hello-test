function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.find.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import React, { Children, useEffect, useState } from 'react';
import { Tab2 } from './Tab2';
import { TabList2 } from './TabList2';
import { TabPanels2 } from './TabPanels2';

var getTabsData = function getTabsData(children) {
  return Children.map(children, function (child) {
    return {
      children: child.props.children,
      disabled: child.props.disabled,
      id: child.props.id || child.props.label,
      label: child.props.label
    };
  });
};

var getFallbackTabId = function getFallbackTabId(enabledTabIds, intendedTabId) {
  var enabledTabIdsArr = JSON.parse(enabledTabIds);
  if (enabledTabIds.length === 0) return undefined;
  if (intendedTabId && enabledTabIdsArr.includes(intendedTabId)) return intendedTabId;
  return enabledTabIdsArr[0];
};

export var Tabs2 = function Tabs2(_ref) {
  var children = _ref.children,
      onTabChange = _ref.onTabChange,
      defaultTabId = _ref.defaultTabId,
      _ref$distributed = _ref.distributed,
      distributed = _ref$distributed === void 0 ? false : _ref$distributed,
      propsTabId = _ref.tabId;
  var initialTabs = getTabsData(children);

  var _useState = useState(initialTabs),
      _useState2 = _slicedToArray(_useState, 2),
      tabs = _useState2[0],
      setTabs = _useState2[1];

  var enabledTabIds = JSON.stringify(tabs.reduce(function (acc, tab) {
    return tab.disabled ? acc : [].concat(_toConsumableArray(acc), [tab.id]);
  }, []));

  var _useState3 = useState(getFallbackTabId(enabledTabIds, defaultTabId)),
      _useState4 = _slicedToArray(_useState3, 2),
      currentTabId = _useState4[0],
      setCurrentTabId = _useState4[1];

  var tabId = propsTabId || currentTabId;
  useEffect(function () {
    setTabs(getTabsData(children));
  }, [children]);
  useEffect(function () {
    var fallbackTabId = getFallbackTabId(enabledTabIds, currentTabId);

    if (fallbackTabId !== currentTabId) {
      setCurrentTabId(fallbackTabId);
    }
  }, [currentTabId, enabledTabIds]);

  var handleTabChange = function handleTabChange(draftId) {
    return onTabChange ? onTabChange(draftId) : setCurrentTabId(draftId);
  };

  var labels = tabs.map(function (_ref2, index) {
    var disabled = _ref2.disabled,
        label = _ref2.label,
        id = _ref2.id;
    return React.createElement(Tab2, {
      disabled: disabled,
      label: label,
      key: index,
      selected: id === tabId,
      onSelect: function onSelect() {
        return handleTabChange(id || label);
      }
    }, label);
  });
  var currentTab = tabs.find(function (tab) {
    return tab.id === tabId;
  });
  return React.createElement(React.Fragment, null, React.createElement(TabList2, {
    distribute: distributed
  }, labels), currentTab && React.createElement(TabPanels2, {
    id: currentTab.id
  }, currentTab.children));
};
//# sourceMappingURL=Tabs2.js.map
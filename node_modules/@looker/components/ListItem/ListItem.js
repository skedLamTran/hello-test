var _excluded = ["children", "className", "color", "density", "description", "detail", "disabled", "hovered", "href", "icon", "itemRole", "onBlur", "onClick", "onKeyDown", "onKeyUp", "onMouseEnter", "onMouseLeave", "rel", "role", "selected", "tabIndex", "target", "truncate"],
    _excluded2 = ["focusVisible"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import React, { forwardRef, useContext, useRef, useState } from 'react';
import { createSafeRel, getNextFocusTarget, HoverDisclosureContext, partitionAriaProps, undefinedCoalesce, useFocusVisible, useWrapEvent, useForkedRef } from '../utils';
import { IconPlaceholder } from '../Icon';
import { ListItemContext } from './ListItemContext';
import { ListItemContent } from './ListItemContent';
import { ListItemWrapper } from './ListItemWrapper';
import { createListItemPartitions, listItemLabelColor } from './utils';
var ListItemInternal = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      propsColor = props.color,
      propsDensity = props.density,
      description = props.description,
      detail = props.detail,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$hovered = props.hovered,
      propsHovered = _props$hovered === void 0 ? false : _props$hovered,
      href = props.href,
      icon = props.icon,
      itemRole = props.itemRole,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onKeyDown = props.onKeyDown,
      onKeyUp = props.onKeyUp,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      rel = props.rel,
      role = props.role,
      selected = props.selected,
      _props$tabIndex = props.tabIndex,
      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,
      target = props.target,
      truncate = props.truncate,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useContext = useContext(ListItemContext),
      contextDensity = _useContext.density,
      iconGutter = _useContext.iconGutter,
      contextColor = _useContext.color;

  var density = propsDensity || contextDensity;
  var color = undefinedCoalesce([propsColor, contextColor]);

  var _useFocusVisible = useFocusVisible({
    onBlur: onBlur,
    onKeyUp: onKeyUp
  }),
      focusVisible = _useFocusVisible.focusVisible,
      focusVisibleHandlers = _objectWithoutProperties(_useFocusVisible, _excluded2);

  var _useState = useState(propsHovered),
      _useState2 = _slicedToArray(_useState, 2),
      hovered = _useState2[0],
      setHovered = _useState2[1];

  var handleOnClick = function handleOnClick(event) {
    if (itemRole !== 'none' && onClick) {
      onClick(event);
    }
  };

  if (disabled && itemRole === 'link') {
    console.warn('itemRole="link" and disabled cannot be combined - use itemRole="button" if you need to offer a disabled ListItem');
  }

  if (itemRole === 'none' && onClick) {
    console.warn('itemRole="none" and onClick cannot be combined - if itemRole="none" is a necessity, assign click behavior directly to ListItem\'s children');
  }

  var wrapperRef = useRef(null);
  var actualRef = useForkedRef(wrapperRef, ref);

  var _partitionAriaProps = partitionAriaProps(restProps),
      _partitionAriaProps2 = _slicedToArray(_partitionAriaProps, 2),
      ariaProps = _partitionAriaProps2[0],
      wrapperProps = _partitionAriaProps2[1];

  var _createListItemPartit = createListItemPartitions(_objectSpread(_objectSpread({}, props), {}, {
    color: color,
    density: density,
    icon: icon || (iconGutter ? React.createElement(IconPlaceholder, null) : undefined)
  })),
      _createListItemPartit2 = _slicedToArray(_createListItemPartit, 2),
      insideElements = _createListItemPartit2[0],
      outsideElements = _createListItemPartit2[1];

  var statefulProps = {
    color: color,
    disabled: disabled,
    hovered: hovered,
    selected: selected
  };

  var handleWrapperFocus = function handleWrapperFocus() {
    setHovered(true);
  };

  var handleWrapperBlur = function handleWrapperBlur(event) {
    var nextFocusTarget = getNextFocusTarget(event);

    if (nextFocusTarget && !event.currentTarget.contains(nextFocusTarget)) {
      setHovered(false);
    }
  };

  var handleWrapperMouseEnter = useWrapEvent(function () {
    return setHovered(true);
  }, onMouseEnter);
  var handleWrapperMouseLeave = useWrapEvent(function () {
    return setHovered(false);
  }, onMouseLeave);
  return React.createElement(HoverDisclosureContext.Provider, {
    value: {
      visible: hovered
    }
  }, React.createElement(ListItemWrapper, _extends({
    className: className,
    color: listItemLabelColor(color, disabled),
    onBlur: handleWrapperBlur,
    onFocus: handleWrapperFocus,
    onMouseEnter: handleWrapperMouseEnter,
    onMouseLeave: handleWrapperMouseLeave,
    ref: actualRef
  }, wrapperProps), React.createElement(ListItemContent, _extends({
    itemRole: itemRole,
    "aria-selected": selected,
    cursorPointer: !!(href || onClick),
    focusVisible: focusVisible,
    href: href,
    onClick: disabled ? undefined : handleOnClick,
    onKeyDown: onKeyDown,
    density: density,
    rel: createSafeRel(rel, target),
    role: role || 'listitem',
    target: target,
    tabIndex: tabIndex
  }, ariaProps, focusVisibleHandlers, statefulProps), insideElements), outsideElements));
});
ListItemInternal.displayName = 'ListItemInternal';
export var ListItem = styled(ListItemInternal).withConfig({
  displayName: "ListItem",
  componentId: "sc-1n26s38-0"
})([""]);
//# sourceMappingURL=ListItem.js.map
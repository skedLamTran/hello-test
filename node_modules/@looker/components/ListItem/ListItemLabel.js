var _excluded = ["color", "children", "disabled", "density", "description", "truncate"];
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import styled, { ThemeContext } from 'styled-components';
import { TruncateOptionally } from '../Truncate';
import { listItemDimensions, listItemLabelColor } from './utils';
import { listItemPaddingY } from './utils/listItemPaddingY';
export var ListItemLabel = styled(function (_ref) {
  var color = _ref.color,
      children = _ref.children,
      disabled = _ref.disabled,
      density = _ref.density,
      description = _ref.description,
      truncate = _ref.truncate,
      props = _objectWithoutProperties(_ref, _excluded);

  var theme = useContext(ThemeContext);

  var _listItemDimensions = listItemDimensions(density || theme.defaults.density),
      descriptionFontSize = _listItemDimensions.descriptionFontSize,
      descriptionLineHeight = _listItemDimensions.descriptionLineHeight,
      labelFontSize = _listItemDimensions.labelFontSize,
      labelLineHeight = _listItemDimensions.labelLineHeight;

  return React.createElement("div", props, React.createElement(TruncateOptionally, {
    truncate: truncate,
    color: listItemLabelColor(color, disabled),
    fontSize: labelFontSize,
    lineHeight: labelLineHeight
  }, children), description && React.createElement(TruncateOptionally, {
    truncate: truncate,
    color: disabled ? 'text1' : 'text2',
    fontSize: descriptionFontSize,
    lineHeight: descriptionLineHeight
  }, description));
}).withConfig({
  displayName: "ListItemLabel",
  componentId: "sc-gwpd17-0"
})(["display:flex;flex-direction:column;flex-grow:1;justify-content:center;min-height:", "px;min-width:0;", ""], function (_ref2) {
  var _ref2$density = _ref2.density,
      density = _ref2$density === void 0 ? 0 : _ref2$density;
  return listItemDimensions(density).height;
}, function (_ref3) {
  var _ref3$density = _ref3.density,
      density = _ref3$density === void 0 ? 0 : _ref3$density;
  return listItemPaddingY(density);
});
//# sourceMappingURL=ListItemLabel.js.map
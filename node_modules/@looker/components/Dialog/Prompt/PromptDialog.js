import "core-js/modules/es.string.trim.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useTranslation } from 'react-i18next';
import React, { useState, useCallback, useEffect } from 'react';
import { Button, ButtonTransparent } from '../../Button';
import { Label, InputText } from '../../Form';
import { VisuallyHidden } from '../../VisuallyHidden';
import { Dialog, DialogLayout } from '..';
export var PromptDialog = function PromptDialog(props) {
  var _useTranslation = useTranslation('PromptDialog'),
      t = _useTranslation.t;

  var cancelLabelText = t('Cancel');
  var saveLabelText = t('Save');
  var _props$cancelColor = props.cancelColor,
      cancelColor = _props$cancelColor === void 0 ? 'neutral' : _props$cancelColor,
      _props$cancelLabel = props.cancelLabel,
      cancelLabel = _props$cancelLabel === void 0 ? cancelLabelText : _props$cancelLabel,
      clearOnCancel = props.clearOnCancel,
      close = props.close,
      _props$defaultValue = props.defaultValue,
      defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,
      isOpen = props.isOpen,
      inputLabel = props.inputLabel,
      onSave = props.onSave,
      onCancel = props.onCancel,
      _props$saveLabel = props.saveLabel,
      saveLabel = _props$saveLabel === void 0 ? saveLabelText : _props$saveLabel,
      secondary = props.secondary,
      title = props.title;

  var _useState = useState(defaultValue),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var hasValue = !!value.trim();
  useEffect(function () {
    setValue(defaultValue);
  }, [defaultValue]);
  var handleClose = useCallback(function () {
    close();
  }, [close]);

  var onChange = function onChange(event) {
    setValue(event.currentTarget.value);
  };

  var onSubmit = useCallback(function () {
    onSave(value, handleClose);
  }, [handleClose, onSave, value]);
  var cancel = useCallback(function () {
    if (onCancel) {
      onCancel(handleClose);
    } else {
      handleClose();
    }

    clearOnCancel && setValue('');
  }, [clearOnCancel, handleClose, onCancel]);

  var onKeyDown = function onKeyDown(event) {
    if (event.key === 'Enter' && hasValue) {
      onSubmit();
    } else if (event.key === 'Escape') {
      cancel();
    }
  };

  var footer = React.createElement(React.Fragment, null, React.createElement(Button, {
    disabled: !hasValue,
    type: "submit",
    onClick: onSubmit,
    color: "key"
  }, saveLabel), React.createElement(ButtonTransparent, {
    type: "reset",
    color: cancelColor,
    onClick: cancel
  }, cancelLabel));
  return React.createElement(Dialog, {
    width: "30rem",
    isOpen: isOpen,
    onClose: cancel
  }, React.createElement(DialogLayout, {
    header: title,
    footer: footer,
    footerSecondary: secondary
  }, React.createElement(VisuallyHidden, null, React.createElement(Label, {
    htmlFor: "promptInput"
  }, inputLabel)), React.createElement(InputText, {
    autoFocus: true,
    onKeyDown: onKeyDown,
    id: "promptInput",
    placeholder: inputLabel,
    onChange: onChange,
    width: "100%",
    value: value
  })));
};
//# sourceMappingURL=PromptDialog.js.map
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["cancelLabel", "close", "confirmLabel", "buttonColor", "cancelColor", "isOpen", "message", "onCancel", "onConfirm", "title"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useTranslation } from 'react-i18next';
import React, { useCallback } from 'react';
import { Button, ButtonTransparent } from '../../Button';
import { Dialog } from '../Dialog';
import { ConfirmLayout } from './ConfirmLayout';
export var ConfirmationDialog = function ConfirmationDialog(props) {
  var _useTranslation = useTranslation('ConfirmationDialog'),
      t = _useTranslation.t;

  var _props$cancelLabel = props.cancelLabel,
      cancelLabel = _props$cancelLabel === void 0 ? t('Cancel') : _props$cancelLabel,
      close = props.close,
      _props$confirmLabel = props.confirmLabel,
      confirmLabel = _props$confirmLabel === void 0 ? t('Confirm') : _props$confirmLabel,
      _props$buttonColor = props.buttonColor,
      buttonColor = _props$buttonColor === void 0 ? 'key' : _props$buttonColor,
      _props$cancelColor = props.cancelColor,
      cancelColor = _props$cancelColor === void 0 ? 'neutral' : _props$cancelColor,
      _props$isOpen = props.isOpen,
      isOpen = _props$isOpen === void 0 ? false : _props$isOpen,
      message = props.message,
      onCancel = props.onCancel,
      onConfirm = props.onConfirm,
      title = props.title,
      rest = _objectWithoutProperties(props, _excluded);

  var confirm = useCallback(function () {
    onConfirm(close);
  }, [close, onConfirm]);
  var cancel = useCallback(function () {
    if (onCancel) {
      onCancel(close);
    } else {
      close();
    }
  }, [close, onCancel]);
  return React.createElement(Dialog, _extends({
    isOpen: isOpen,
    onClose: cancel
  }, rest), React.createElement(ConfirmLayout, {
    title: title,
    message: message,
    primaryButton: React.createElement(Button, {
      onClick: confirm,
      color: buttonColor
    }, confirmLabel),
    secondaryButton: React.createElement(ButtonTransparent, {
      color: cancelColor,
      onClick: cancel
    }, cancelLabel)
  }));
};
//# sourceMappingURL=ConfirmationDialog.js.map
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useMemo } from 'react';
import { getWindowedListBoundaries } from './getWindowedListBoundaries';
import { useCallbackRef } from './useCallbackRef';
import { useMeasuredElement } from './useMeasuredElement';
import { useScrollPosition } from './useScrollPosition';
export var useWindow = function useWindow(_ref) {
  var itemCount = _ref.itemCount,
      enabled = _ref.enabled,
      itemHeight = _ref.itemHeight,
      ref = _ref.ref,
      _ref$spacerTag = _ref.spacerTag,
      spacerTag = _ref$spacerTag === void 0 ? 'div' : _ref$spacerTag;

  var _useCallbackRef = useCallbackRef(ref),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      containerElement = _useCallbackRef2[0],
      callbackRef = _useCallbackRef2[1];

  var _useMeasuredElement = useMeasuredElement(enabled ? containerElement : null),
      _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
      height = _useMeasuredElement2[0].height;

  var scrollPosition = useScrollPosition(enabled ? containerElement : null);

  var _useMemo = useMemo(function () {
    return getWindowedListBoundaries({
      enabled: enabled,
      height: height,
      itemCount: itemCount,
      itemHeight: itemHeight,
      scrollPosition: scrollPosition
    });
  }, [enabled, itemCount, height, itemHeight, scrollPosition]),
      start = _useMemo.start,
      end = _useMemo.end,
      beforeHeight = _useMemo.beforeHeight,
      afterHeight = _useMemo.afterHeight;

  var Spacer = spacerTag;
  var before = beforeHeight > 0 ? React.createElement(Spacer, {
    style: {
      height: "".concat(beforeHeight, "px")
    },
    "data-testid": "before"
  }) : null;
  var after = afterHeight > 0 ? React.createElement(Spacer, {
    style: {
      height: "".concat(afterHeight, "px")
    },
    "data-testid": "after"
  }) : null;
  return {
    after: after,
    before: before,
    containerElement: containerElement,
    end: end,
    ref: callbackRef,
    start: start
  };
};
//# sourceMappingURL=useWindow.js.map
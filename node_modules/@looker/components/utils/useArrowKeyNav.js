import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useCallback, useEffect, useRef, useState } from 'react';
import { checkElementRemoved } from './checkElementRemoved';
import { getNextFocus as getNextFocusDefault } from './getNextFocus';
import { useForkedRef } from './useForkedRef';
import { useWrapEvent } from './useWrapEvent';
export var useArrowKeyNav = function useArrowKeyNav(_ref) {
  var _ref$axis = _ref.axis,
      axis = _ref$axis === void 0 ? 'vertical' : _ref$axis,
      disabled = _ref.disabled,
      _ref$getNextFocus = _ref.getNextFocus,
      getNextFocus = _ref$getNextFocus === void 0 ? getNextFocusDefault : _ref$getNextFocus,
      ref = _ref.ref,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      onKeyDown = _ref.onKeyDown;
  var internalRef = useRef(null);
  var focusedItemRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      focusInside = _useState2[0],
      setFocusInside = _useState2[1];

  var handleArrowKey = function handleArrowKey(e, direction, vertical) {
    if (internalRef.current) {
      var newFocusedItem = getNextFocus(direction, internalRef.current, vertical);

      if (newFocusedItem) {
        e.preventDefault();
        newFocusedItem.focus();
      }
    }
  };

  var handleKeyDown = function handleKeyDown(e) {
    switch (e.key) {
      case 'ArrowUp':
        axis !== 'horizontal' && handleArrowKey(e, -1, true);
        break;

      case 'ArrowDown':
        axis !== 'horizontal' && handleArrowKey(e, 1, true);
        break;

      case 'ArrowLeft':
        axis !== 'vertical' && handleArrowKey(e, -1, false);
        break;

      case 'ArrowRight':
        axis !== 'vertical' && handleArrowKey(e, 1, false);
        break;
    }
  };

  var placeInitialFocus = useCallback(function () {
    if (internalRef.current) {
      var toFocus = getNextFocus(1, internalRef.current);

      if (toFocus) {
        toFocus.focus({
          preventScroll: true
        });
      }
    }
  }, [getNextFocus]);

  var handleFocus = function handleFocus(e) {
    setFocusInside(true);

    if (e.target === internalRef.current) {
      if (focusedItemRef.current && internalRef.current.contains(focusedItemRef.current)) {
        focusedItemRef.current.focus();
      } else {
        placeInitialFocus();
      }
    } else {
      focusedItemRef.current = e.target;
    }
  };

  var handleBlur = function handleBlur() {
    setFocusInside(false);
  };

  useEffect(function () {
    var element = internalRef.current;
    var observer = new MutationObserver(function (mutationsList) {
      if (checkElementRemoved(mutationsList, focusedItemRef.current)) {
        placeInitialFocus();
      }
    });

    if (focusInside && element) {
      observer.observe(element, {
        childList: true,
        subtree: true
      });
    }

    return function () {
      observer.disconnect();
    };
  }, [focusInside, placeInitialFocus]);
  var navProps = {
    onBlur: useWrapEvent(handleBlur, onBlur),
    onFocus: useWrapEvent(handleFocus, onFocus),
    onKeyDown: useWrapEvent(handleKeyDown, onKeyDown),
    ref: useForkedRef(internalRef, ref),
    tabIndex: focusInside ? undefined : 0
  };
  return disabled ? {} : navProps;
};
//# sourceMappingURL=useArrowKeyNav.js.map
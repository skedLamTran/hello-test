import "core-js/modules/web.timers.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { transitions } from '@looker/design-tokens';
import { useEffect, useRef, useState } from 'react';
var busyStates = ['entering', 'exiting'];
export var useAnimationState = function useAnimationState(_ref) {
  var _ref$enter = _ref.enter,
      enter = _ref$enter === void 0 ? 'moderate' : _ref$enter,
      _ref$exit = _ref.exit,
      exit = _ref$exit === void 0 ? 'moderate' : _ref$exit,
      isOpen = _ref.isOpen,
      onAfterEntered = _ref.onAfterEntered,
      onAfterExited = _ref.onAfterExited;

  var _useState = useState('exited'),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var timingEnter = transitions[enter];
  var timingExit = transitions[exit];
  useEffect(function () {
    if (!isOpen && state === 'exited') return;
    if (isOpen && state === 'entered') return;
    var t;

    if (isOpen) {
      if (!timingEnter) {
        setState('entered');
      } else {
        setState('entering');
        t = setTimeout(function () {
          return setState('entered');
        }, timingEnter);
      }
    } else {
      if (!timingExit) {
        setState('exited');
      } else {
        setState('exiting');
        t = setTimeout(function () {
          return setState('exited');
        }, timingExit);
      }
    }

    return function () {
      t && clearTimeout(t);
    };
  }, [isOpen, timingEnter, timingExit, state]);
  var previousStateRef = useRef(state);
  useEffect(function () {
    if (state === 'entered' && previousStateRef.current !== 'entered') {
      onAfterEntered === null || onAfterEntered === void 0 ? void 0 : onAfterEntered();
    }

    if (state === 'exited' && previousStateRef.current !== 'exited') {
      onAfterExited === null || onAfterExited === void 0 ? void 0 : onAfterExited();
    }

    previousStateRef.current = state;
  }, [state, onAfterExited, onAfterEntered]);
  return {
    busy: busyStates.includes(state),
    className: state,
    renderDOM: state !== 'exited'
  };
};
//# sourceMappingURL=useAnimationState.js.map
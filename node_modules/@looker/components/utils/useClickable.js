import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
var _excluded = ["onClick", "disabled", "role"],
    _excluded2 = ["onKeyUp"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useMemo } from 'react';
import { useFocusVisible } from './useFocusVisible';
export function useClickable(_ref) {
  var _onClick = _ref.onClick,
      disabled = _ref.disabled,
      role = _ref.role,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useFocusVisible = useFocusVisible(rest),
      _onKeyUp = _useFocusVisible.onKeyUp,
      focusVisibleProps = _objectWithoutProperties(_useFocusVisible, _excluded2);

  return useMemo(function () {
    return _objectSpread(_objectSpread({
      disabled: disabled
    }, focusVisibleProps), {}, {
      onClick: function onClick(e) {
        if (!disabled) {
          _onClick === null || _onClick === void 0 ? void 0 : _onClick(e);
        }
      },
      onKeyUp: function onKeyUp(e) {
        var shouldHandle = !disabled && e.currentTarget === e.target;

        if (shouldHandle) {
          switch (e.key) {
            case 'Enter':
            case ' ':
              _onClick === null || _onClick === void 0 ? void 0 : _onClick(e);
              break;
          }
        }

        _onKeyUp(e);
      },
      role: role || (_onClick ? 'button' : undefined),
      tabIndex: disabled ? undefined : 0
    });
  }, [disabled, role, _onClick, _onKeyUp, focusVisibleProps]);
}
//# sourceMappingURL=useClickable.js.map
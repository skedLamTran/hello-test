import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.array.find-index.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.set.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { useHotkeys } from 'react-hotkeys-hook';
import get from 'lodash/get';
import filter from 'lodash/filter';
import debounce from 'lodash/debounce';
var keyCommandCollection = {};

var doRectsIntersect = function doRectsIntersect(r1, r2) {
  return !(r2.left > r1.right || r2.right < r1.left || r2.top > r1.bottom || r2.bottom < r1.top);
};

var calculateIntersectionPoint = function calculateIntersectionPoint(r1, r2) {
  var y = Math.max(r2.top, r1.top);
  var x = Math.max(r1.left, r2.left);
  return {
    x: x,
    y: y
  };
};

var organizeKeyCommands = function organizeKeyCommands(shortcut) {
  var commandGroup = _toConsumableArray(get(keyCommandCollection, shortcut, []));

  commandGroup.sort(function (ev1, ev2) {
    var rect1 = ev1.target.getBoundingClientRect();
    var rect2 = ev2.target.getBoundingClientRect();

    if (!doRectsIntersect(rect1, rect2)) {
      return 0;
    } else {
      var _calculateIntersectio = calculateIntersectionPoint(rect1, rect2),
          x = _calculateIntersectio.x,
          y = _calculateIntersectio.y;

      var stackedElements = document.elementsFromPoint(x, y);
      var idx1 = stackedElements.findIndex(function (el) {
        return el === ev1.target;
      });
      var idx2 = stackedElements.findIndex(function (el) {
        return el === ev2.target;
      });
      return idx1 > idx2 ? 1 : -1;
    }
  });
  return commandGroup;
};

var executeFirstKeyCommand = debounce(function (e, cbStack) {
  cbStack[0] && cbStack[0].cb(e);
}, 50);

var discardStaleCommands = function discardStaleCommands(keyCommand) {
  var commandSet = keyCommandCollection[keyCommand];
  keyCommandCollection[keyCommand] = new Set(filter(_toConsumableArray(commandSet), function (event) {
    return document.body.contains(event.target);
  }));
};

export var useGlobalHotkeys = function useGlobalHotkeys(keyCommand, cb, containerRef) {
  if (containerRef.current) {
    var newCommand = {
      cb: cb,
      target: containerRef.current
    };
    var commandSet = get(keyCommandCollection, keyCommand, new Set());
    commandSet.add(newCommand);
    keyCommandCollection[keyCommand] = commandSet;
  }

  var wrappedCb = function wrappedCb(e, handler) {
    discardStaleCommands(handler.shortcut);
    var orderedEventListeners = organizeKeyCommands(handler.shortcut);
    executeFirstKeyCommand(e, orderedEventListeners);
  };

  useHotkeys(keyCommand, wrappedCb, {
    filter: function filter() {
      return true;
    }
  });
};
//# sourceMappingURL=useGlobalHotkeys.js.map
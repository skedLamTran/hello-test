function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.string.anchor.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import cloneDeep from 'lodash/cloneDeep';
import concat from 'lodash/concat';
import merge from 'lodash/merge';
import { useEffect, useMemo, useRef, useState } from 'react';
import { createPopper } from '@popperjs/core';
import { getCurrentNode } from './getCurrentNode';
import { useCallbackRef } from './useCallbackRef';
export function usePopper(_ref) {
  var anchor = _ref.anchor,
      target = _ref.target,
      options = _ref.options;

  var _useState = useState({
    popper: {
      left: '0',
      margin: '0',
      position: 'fixed',
      top: '-9999px'
    }
  }),
      _useState2 = _slicedToArray(_useState, 2),
      styles = _useState2[0],
      setStyles = _useState2[1];

  var _useState3 = useState(options.placement),
      _useState4 = _slicedToArray(_useState3, 2),
      truePlacement = _useState4[0],
      setTruePlacement = _useState4[1];

  var popperInstanceRef = useRef();

  var _useCallbackRef = useCallbackRef(),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      targetElement = _useCallbackRef2[0],
      targetRef = _useCallbackRef2[1];

  var mergedOptions = useMemo(function () {
    return merge(options, {
      modifiers: concat(options && options.modifiers, [{
        enabled: false,
        name: 'applyStyles'
      }, {
        enabled: true,
        fn: function fn(_ref2) {
          var placement = _ref2.state.placement;
          return setTruePlacement(placement);
        },
        name: 'update-placement',
        phase: 'afterWrite'
      }, {
        enabled: true,
        fn: function fn(_ref3) {
          var styles = _ref3.state.styles;
          return setStyles(cloneDeep(styles));
        },
        name: 'update-styles',
        phase: 'afterWrite'
      }, {
        enabled: true,
        name: 'preventOverflow',
        options: {
          boundary: 'viewport',
          padding: 8
        }
      }]),
      strategy: 'fixed'
    });
  }, [options]);
  useEffect(function () {
    var anchorNode = getCurrentNode(anchor);
    var targetNode = target ? getCurrentNode(target) : targetElement;

    if (anchorNode && targetNode) {
      popperInstanceRef.current = createPopper(anchorNode, targetNode, mergedOptions);
    }

    return function () {
      popperInstanceRef.current && popperInstanceRef.current.destroy();
    };
  }, [anchor, target, targetElement, mergedOptions]);
  return {
    placement: truePlacement,
    popperInstanceRef: popperInstanceRef,
    style: styles.popper,
    targetRef: targetRef
  };
}
//# sourceMappingURL=usePopper.js.map
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialResult = {
  afterHeight: 0,
  beforeHeight: 0,
  end: 0,
  start: 0
};
export function getWindowedListBoundaries(_ref) {
  var _ref$buffer = _ref.buffer,
      buffer = _ref$buffer === void 0 ? 5 : _ref$buffer,
      height = _ref.height,
      scrollPosition = _ref.scrollPosition,
      _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? true : _ref$enabled,
      itemCount = _ref.itemCount,
      itemHeight = _ref.itemHeight;
  if (!enabled) return _objectSpread(_objectSpread({}, initialResult), {}, {
    end: itemCount - 1
  });
  if (scrollPosition === undefined || height === undefined) return initialResult;
  var top = Math.floor(scrollPosition / itemHeight);
  var bottom = Math.ceil((height + scrollPosition) / itemHeight);
  var start = top - buffer < 0 ? 0 : top - buffer;
  var end = bottom + buffer > itemCount - 1 ? itemCount - 1 : bottom + buffer;
  var afterLength = itemCount - 1 - end;
  return {
    afterHeight: afterLength * itemHeight,
    beforeHeight: start * itemHeight,
    end: end,
    start: start
  };
}
//# sourceMappingURL=getWindowedListBoundaries.js.map
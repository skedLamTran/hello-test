import "core-js/modules/web.timers.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useCallback, useEffect, useReducer } from 'react';
import { undefinedCoalesce } from './undefinedCoalesce';

var reducer = function reducer(state, _ref) {
  var type = _ref.type,
      _ref$payload = _ref.payload,
      payload = _ref$payload === void 0 ? {} : _ref$payload;

  switch (type) {
    case 'CHANGE':
      return {
        delay: false,
        futureValue: undefined,
        value: undefinedCoalesce([payload.value, state.futureValue])
      };

    case 'WAIT_CHANGE':
      return {
        delay: state.delay,
        futureValue: state.delay ? payload.value : undefined,
        value: state.delay ? state.value : payload.value || state.value
      };

    case 'DELAY_CHANGE':
      return _objectSpread(_objectSpread({}, state), {}, {
        delay: state.value === payload.value ? false : payload.delay || 0,
        futureValue: payload.value,
        value: state.value
      });
  }
};

export function useDelayedState(initialValue) {
  var _useReducer = useReducer(reducer, {
    delay: false,
    value: initialValue
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      delay = _useReducer2$.delay,
      value = _useReducer2$.value,
      dispatch = _useReducer2[1];

  var change = useCallback(function (newValue) {
    return dispatch({
      payload: {
        value: newValue
      },
      type: 'CHANGE'
    });
  }, []);
  var delayChange = useCallback(function (newValue, delay) {
    return dispatch({
      payload: {
        delay: delay,
        value: newValue
      },
      type: 'DELAY_CHANGE'
    });
  }, []);
  var waitChange = useCallback(function (newValue) {
    return dispatch({
      payload: {
        value: newValue
      },
      type: 'WAIT_CHANGE'
    });
  }, []);
  useEffect(function () {
    var t;

    if (delay !== false) {
      t = setTimeout(function () {
        dispatch({
          type: 'CHANGE'
        });
      }, delay);
    }

    return function () {
      clearTimeout(t);
    };
  }, [delay]);
  return {
    change: change,
    delayChange: delayChange,
    value: value,
    waitChange: waitChange
  };
}
//# sourceMappingURL=useDelayedState.js.map
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["className", "title", "intent"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { CheckCircle } from '@styled-icons/material/CheckCircle';
import { Error } from '@styled-icons/material/Error';
import { Info } from '@styled-icons/material/Info';
import { Warning } from '@styled-icons/material/Warning';
import { color, size } from '@looker/design-tokens';
import omit from 'lodash/omit';
import React, { forwardRef } from 'react';
import { useTranslation } from 'react-i18next';
import styled from 'styled-components';

var getIntentIcon = function getIntentIcon(intent) {
  switch (intent) {
    case 'critical':
      return Error;

    case 'positive':
      return CheckCircle;

    case 'warn':
      return Warning;

    case 'neutral':
    case 'inform':
    default:
      return Info;
  }
};

export var getIntentLabel = function getIntentLabel(t, intent) {
  switch (intent) {
    case 'critical':
      return t('Error', {
        ns: 'GetIntentLabel'
      });

    case 'inform':
      return t('Inform', {
        ns: 'GetIntentLabel'
      });

    case 'positive':
      return t('Success', {
        ns: 'GetIntentLabel'
      });

    case 'warn':
      return t('Warning', {
        ns: 'GetIntentLabel'
      });

    case 'neutral':
    default:
      return undefined;
  }
};
var defaultIntent = 'neutral';
var StatusLayout = forwardRef(function (_ref, ref) {
  var className = _ref.className,
      title = _ref.title,
      _ref$intent = _ref.intent,
      intent = _ref$intent === void 0 ? defaultIntent : _ref$intent,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useTranslation = useTranslation('Status'),
      t = _useTranslation.t;

  var Component = getIntentIcon(intent);
  return React.createElement(Component, _extends({}, omit(props, 'size', 'crossOrigin'), {
    className: className,
    ref: ref,
    title: !props['aria-describedby'] ? title || getIntentLabel(t, intent) : undefined
  }));
});
StatusLayout.displayName = 'StatusLayout';
export var Status = styled(StatusLayout).attrs(function (_ref2) {
  var _ref2$intent = _ref2.intent,
      intent = _ref2$intent === void 0 ? defaultIntent : _ref2$intent,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? 'medium' : _ref2$size;
  return {
    color: intent,
    size: size
  };
}).withConfig({
  displayName: "Status",
  componentId: "sc-hjs0z2-0"
})(["", " ", " flex-shrink:0;"], color, size);
//# sourceMappingURL=Status.js.map
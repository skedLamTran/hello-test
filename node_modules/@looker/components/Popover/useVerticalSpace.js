import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useEffect, useState } from 'react';
var topPlacements = ['top', 'top-start', 'top-end', 'right-end', 'left-end'];
var bottomPlacements = ['bottom', 'bottom-start', 'bottom-end', 'right-start', 'left-start'];
var sidePlacements = ['left-start', 'left-end', 'left', 'right-start', 'right-end', 'right'];
export var useVerticalSpace = function useVerticalSpace(element, pin, placement, isOpen, popperStyle) {
  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      spaceTop = _useState2[0],
      setSpaceTop = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      spaceBottom = _useState4[0],
      setSpaceBottom = _useState4[1];

  var placementIsBottom = placement && bottomPlacements.includes(placement);
  var placementIsTop = placement && topPlacements.includes(placement);
  var placementIsSide = placement && sidePlacements.includes(placement);
  useEffect(function () {
    var getVerticalSpace = function getVerticalSpace() {
      if (element) {
        if (placementIsBottom || placementIsTop) {
          var _element$getBoundingC = element.getBoundingClientRect(),
              top = _element$getBoundingC.top,
              bottom = _element$getBoundingC.bottom;

          if (!pin || placementIsTop) {
            var _spaceTop = placementIsSide ? bottom : top;

            setSpaceTop(_spaceTop);
          } else if (pin) {
            setSpaceTop(0);
          }

          if (!pin || placementIsBottom) {
            var sideToUse = placementIsSide ? top : bottom;
            setSpaceBottom(window.innerHeight - sideToUse);
          } else if (pin) {
            setSpaceBottom(0);
          }
        } else {
          setSpaceTop(window.innerHeight);
        }
      }
    };

    if (isOpen) {
      window.addEventListener('resize', getVerticalSpace);
      getVerticalSpace();
    }

    return function () {
      window.removeEventListener('resize', getVerticalSpace);
    };
  }, [element, pin, placementIsBottom, placementIsTop, placementIsSide, isOpen, popperStyle.transform]);
  var max = Math.max(spaceTop, spaceBottom);
  var windowHeight = typeof window !== "undefined" ? window.innerHeight : 50;
  return max > 50 ? max : windowHeight;
};
//# sourceMappingURL=useVerticalSpace.js.map
import type { WidthProps } from '@looker/design-tokens';
import type { Placement } from '@popperjs/core';
import type { AriaAttributes, ReactNode, Ref, SyntheticEvent } from 'react';
import React from 'react';
import { OverlaySurface } from '../Overlay/OverlaySurface';
import type { UsePopoverToggleProps } from './usePopoverToggle';
declare type AriaHaspopupProps = Pick<AriaAttributes, 'aria-haspopup'>;
export interface UsePopoverProps extends AriaHaspopupProps, WidthProps, UsePopoverToggleProps {
    content: ReactNode;
    onClose?: () => void;
    placement?: Placement;
    portalElement?: HTMLDivElement | null;
    pin?: boolean;
    disableScrollLock?: boolean;
    triggerElement?: HTMLElement | null;
    focusTrap?: boolean;
    scrollLock?: boolean;
    surface?: typeof OverlaySurface;
    id?: string;
}
export interface UsePopoverResponseDom extends AriaHaspopupProps {
    onClick: (event: SyntheticEvent) => void;
    ref: Ref<any>;
    'aria-expanded': boolean;
}
export declare const usePopover: ({ "aria-haspopup": ariaHaspopup, canClose, content, disabled, pin, isOpen: controlledIsOpen, onClose, placement: propsPlacement, setOpen: controlledSetOpen, triggerElement, triggerToggle, focusTrap, scrollLock, cancelClickOutside, surface, width, id, }: UsePopoverProps) => {
    contentContainer: HTMLElement | null;
    domProps: {
        'aria-expanded': boolean;
        'aria-haspopup': boolean | "grid" | "dialog" | "menu" | "listbox" | "false" | "true" | "tree" | undefined;
        onClick: (event: SyntheticEvent) => void;
        ref: (node: HTMLElement | null) => void;
    };
    isOpen: boolean;
    open: (event: SyntheticEvent) => void;
    popover: false | "" | 0 | JSX.Element | null | undefined;
    popperInstanceRef: React.MutableRefObject<import("@popperjs/core").Instance | undefined>;
    ref: (node: HTMLElement | null) => void;
};
export {};

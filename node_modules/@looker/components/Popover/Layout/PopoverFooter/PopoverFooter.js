import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "closeButton"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useTranslation } from 'react-i18next';
import React, { useContext } from 'react';
import styled from 'styled-components';
import { DialogContext } from '../../../Dialog/DialogContext';
import { ModalFooter } from '../../../Modal/ModalFooter/ModalFooter';
import { ButtonTransparent } from '../../../Button';

var PopoverFooterLayout = function PopoverFooterLayout(_ref) {
  var children = _ref.children,
      closeButton = _ref.closeButton,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useContext = useContext(DialogContext),
      closeModal = _useContext.closeModal;

  var _useTranslation = useTranslation('PopoverFooter'),
      t = _useTranslation.t;

  closeButton = closeButton || t('Done');
  return React.createElement(ModalFooter, _extends({
    pl: "large",
    pr: "medium",
    py: "xsmall"
  }, props), typeof closeButton === 'string' ? React.createElement(ButtonTransparent, {
    size: "small",
    onClick: closeModal
  }, closeButton) : closeButton, children);
};

export var PopoverFooter = styled(PopoverFooterLayout).withConfig({
  displayName: "PopoverFooter",
  componentId: "sc-185a4pp-0"
})([""]);
//# sourceMappingURL=PopoverFooter.js.map
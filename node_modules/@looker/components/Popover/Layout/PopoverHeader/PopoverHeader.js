import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "hideClose", "detail", "hidden"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import styled from 'styled-components';
import { DialogContext } from '../../../Dialog/DialogContext';
import { VisuallyHidden } from '../../../VisuallyHidden';
import { ModalHeaderCloseButton, ModalHeader } from '../../../Modal';

var PopoverHeaderLayout = function PopoverHeaderLayout(_ref) {
  var children = _ref.children,
      _ref$hideClose = _ref.hideClose,
      hideClose = _ref$hideClose === void 0 ? false : _ref$hideClose,
      detail = _ref.detail,
      _ref$hidden = _ref.hidden,
      hidden = _ref$hidden === void 0 ? false : _ref$hidden,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useContext = useContext(DialogContext),
      id = _useContext.id;

  var headingId = id ? "".concat(id, "-heading") : undefined;
  return hidden ? React.createElement(VisuallyHidden, {
    id: headingId
  }, children) : React.createElement(ModalHeader, _extends({
    detail: detail || !hideClose && React.createElement(ModalHeaderCloseButton, {
      size: "small"
    }),
    fontSize: "small",
    fontWeight: "medium",
    id: headingId,
    pl: "large",
    pr: "medium",
    py: "small"
  }, props), children);
};

export var PopoverHeader = styled(PopoverHeaderLayout).withConfig({
  displayName: "PopoverHeader",
  componentId: "sc-1pomwz8-0"
})([""]);
//# sourceMappingURL=PopoverHeader.js.map
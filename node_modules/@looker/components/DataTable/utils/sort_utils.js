import "core-js/modules/es.array.find.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export var stringComparator = function stringComparator(stringA, stringB) {
  var upperCasedStringA = stringA.toUpperCase();
  var upperCasedStringB = stringB.toUpperCase();
  if (upperCasedStringA < upperCasedStringB) return -1;
  if (upperCasedStringA > upperCasedStringB) return 1;
  return 0;
};
export var dateComparator = function dateComparator(dateA, dateB) {
  if (dateA < dateB) return -1;
  if (dateA > dateB) return 1;
  return 0;
};
export var doDataTableSort = function doDataTableSort(data, columns, id, sortDirection) {
  var sortedData = _toConsumableArray(data);

  var updatedColumns = _toConsumableArray(columns);

  var targetColumn = updatedColumns.find(function (column) {
    return column.id === id;
  });
  columns.forEach(function (column) {
    return delete column.sortDirection;
  });

  if (targetColumn) {
    if (targetColumn.type === 'number') {
      if (sortDirection === 'desc') {
        sortedData.sort(function (a, b) {
          return b[id] - a[id];
        });
      } else {
        sortedData.sort(function (a, b) {
          return a[id] - b[id];
        });
      }
    } else if (targetColumn.type === 'date') {
      if (sortDirection === 'desc') {
        sortedData.sort(function (a, b) {
          return dateComparator(b[id], a[id]);
        });
      } else {
        sortedData.sort(function (a, b) {
          return dateComparator(a[id], b[id]);
        });
      }
    } else {
      if (sortDirection === 'desc') {
        sortedData.sort(function (a, b) {
          return stringComparator(b[id], a[id]);
        });
      } else {
        sortedData.sort(function (a, b) {
          return stringComparator(a[id], b[id]);
        });
      }
    }

    targetColumn.sortDirection = sortDirection;
  }

  return {
    columns: updatedColumns,
    data: sortedData
  };
};
//# sourceMappingURL=sort_utils.js.map
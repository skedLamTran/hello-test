import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import { DataTable } from '../DataTable';
import { DataTableItem } from '../Item';
import { DataTableCell } from '../Column';
import { doDataTableSort } from './sort_utils';
export var useDataTableSortManager = function useDataTableSortManager(caption, defaultData, defaultColumns, generateActions, onClickItem) {
  var _useState = useState(defaultData),
      _useState2 = _slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  var _useState3 = useState(defaultColumns),
      _useState4 = _slicedToArray(_useState3, 2),
      columns = _useState4[0],
      setColumns = _useState4[1];

  var onSort = function onSort(id, sortDirection) {
    var _doDataTableSort = doDataTableSort(data, columns, id, sortDirection),
        sortedColumns = _doDataTableSort.columns,
        sortedData = _doDataTableSort.data;

    setData(sortedData);
    setColumns(sortedColumns);
  };

  var items = data.map(function (dataObj) {
    var defaultOrderColumn = columns[0].id;
    var id = dataObj[defaultOrderColumn];
    return React.createElement(DataTableItem, {
      id: id,
      key: id,
      onClick: onClickItem,
      actions: generateActions(dataObj)
    }, columns.map(function (column) {
      return React.createElement(DataTableCell, {
        key: column.id
      }, dataObj[column.id]);
    }));
  });
  return React.createElement(DataTable, {
    caption: caption,
    columns: columns,
    onSort: onSort
  }, items);
};
//# sourceMappingURL=useDataTableSortManager.js.map
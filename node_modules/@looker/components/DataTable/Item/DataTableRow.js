import "core-js/modules/es.array.map.js";
import pick from 'lodash/pick';
import React, { Children, cloneElement, forwardRef, isValidElement, useContext } from 'react';
import styled from 'styled-components';
import { DataTableContext } from '../DataTableContext';
import { DataTableCheckbox, checkListProps } from './DataTableCheckbox';
var DataTableRowLayout = forwardRef(function (props, ref) {
  var className = props.className,
      hasCheckbox = props.hasCheckbox,
      children = props.children,
      id = props.id,
      isHeaderRow = props.isHeaderRow,
      onClick = props.onClick,
      onKeyDown = props.onKeyDown,
      secondary = props.secondary;
  var ColumnType = isHeaderRow ? 'th' : 'td';

  var _useContext = useContext(DataTableContext),
      columns = _useContext.columns,
      columnsDisplayState = _useContext.columnsDisplayState;

  var getColumnSize = function getColumnSize(index) {
    return columns && columns[index].size;
  };

  var sizedChildren = Children.map(children, function (child, index) {
    if (columnsDisplayState && !columnsDisplayState[index]) {
      return null;
    }

    var size = getColumnSize(index);
    var cellProps = index === 0 ? {
      id: "rowheader-".concat(id),
      role: 'rowheader',
      size: size
    } : {
      size: size
    };
    return isValidElement(child) && cloneElement(child, cellProps);
  });

  var handleOnClick = function handleOnClick(event) {
    return event.target instanceof HTMLAnchorElement ? undefined : onClick && onClick(event);
  };

  var suppressClickPropagation = function suppressClickPropagation(event) {
    event.stopPropagation();
  };

  return React.createElement("tr", {
    ref: ref,
    className: className,
    onKeyDown: onKeyDown,
    onClick: handleOnClick
  }, hasCheckbox ? React.createElement(ColumnType, {
    onClick: suppressClickPropagation
  }, React.createElement(DataTableCheckbox, pick(props, checkListProps))) : React.createElement(ColumnType, {
    "aria-hidden": "true"
  }), sizedChildren, React.createElement(ColumnType, {
    onClick: suppressClickPropagation
  }, secondary));
});
DataTableRowLayout.displayName = 'DataTableRowLayout';

var getRowHoverColor = function getRowHoverColor(theme, hasOnClick, isHeader, isSelected) {
  if (!isHeader && hasOnClick) {
    return isSelected ? theme.colors.keyAccent : theme.colors.ui1;
  }

  return undefined;
};

export var DataTableRow = styled(DataTableRowLayout).withConfig({
  displayName: "DataTableRow",
  componentId: "sc-gwwepv-0"
})(["td,th{background:", ";border-bottom:solid 1px ", ";&:first-of-type > div{border-left:1px solid transparent;border-right:1px solid transparent;height:100%;}}&:hover{cursor:", ";outline:none;td,th{background:", ";}}&:focus{outline:none;td:first-of-type > div{border-left-color:", ";}}"], function (_ref) {
  var checked = _ref.checked,
      isHeaderRow = _ref.isHeaderRow,
      colors = _ref.theme.colors;
  return checked && !isHeaderRow ? colors.keySubtle : colors.background;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.ui2;
}, function (_ref3) {
  var onClick = _ref3.onClick;
  return onClick && 'pointer';
}, function (_ref4) {
  var checked = _ref4.checked,
      isHeaderRow = _ref4.isHeaderRow,
      onClick = _ref4.onClick,
      theme = _ref4.theme;
  return getRowHoverColor(theme, Boolean(onClick), Boolean(isHeaderRow), Boolean(checked));
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.key;
});
//# sourceMappingURL=DataTableRow.js.map
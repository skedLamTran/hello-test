var _excluded = ["children", "description", "indicator", "onBlur", "onKeyUp", "size"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { Space, SpaceVertical } from '../../Layout';
import { Paragraph } from '../../Text';
import { Truncate } from '../../Truncate';
import { useFocusVisible, useForkedRef } from '../../utils';
import { columnSize } from './columnSize';
import { FocusableCell } from './FocusableCell';
var DataTableCellLayout = forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      description = _ref.description,
      indicator = _ref.indicator,
      onBlur = _ref.onBlur,
      onKeyUp = _ref.onKeyUp,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, _excluded);

  var focusVisibleProps = useFocusVisible({
    onBlur: onBlur,
    onKeyUp: onKeyUp
  });
  var content = size && size !== 'nowrap' ? React.createElement(Truncate, null, children) : children;
  var ref = useRef(null);
  var forkedRef = useForkedRef(ref, forwardedRef);
  useEffect(function () {
    var _ref$current;

    var element = ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll('a, button, input');

    if (element) {
      element.forEach(function (activeElement) {
        return activeElement.setAttribute('tabIndex', '-1');
      });
    }
  });

  if (description) {
    content = React.createElement(SpaceVertical, {
      gap: "u05",
      align: "stretch"
    }, React.createElement("span", null, content), description && React.createElement(Paragraph, {
      fontSize: "xsmall",
      color: "text1",
      truncate: true
    }, React.createElement(Truncate, null, description)));

    if (indicator) {
      content = React.createElement(Space, {
        gap: "u4"
      }, indicator, content);
    }
  } else if (indicator) {
    content = React.createElement(Space, {
      gap: "u4"
    }, indicator, React.createElement("span", null, content));
  }

  return React.createElement(FocusableCell, _extends({
    ref: forkedRef
  }, focusVisibleProps, props), content);
});
DataTableCellLayout.displayName = 'DataTableCellLayout';
export var DataTableCell = styled(DataTableCellLayout).withConfig({
  displayName: "DataTableCell",
  componentId: "sc-1sdic09-0"
})(["", ""], columnSize);
//# sourceMappingURL=DataTableCell.js.map
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useTranslation } from 'react-i18next';
import React, { useState } from 'react';
import { ViewColumn } from '@styled-icons/material/ViewColumn';
import { usePopover, PopoverContent } from '../../Popover';
import { IconButton } from '../../Button/IconButton';
import { CheckboxGroup } from '../../Form/Inputs/OptionsGroup';
import { ButtonTransparent } from '../../Button/ButtonTransparent';
import { Space, SpaceVertical } from '../../Layout';
export var ColumnSelector = function ColumnSelector(_ref) {
  var columns = _ref.columns,
      defaultColumnsVisible = _ref.columnsVisible,
      onColumnVisibilityChange = _ref.onColumnVisibilityChange;

  var _useTranslation = useTranslation('ColumnSelector'),
      t = _useTranslation.t;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var selectableColumns = columns.filter(function (c) {
    return c.hide !== undefined;
  });

  var _useState3 = useState(defaultColumnsVisible),
      _useState4 = _slicedToArray(_useState3, 2),
      columnsVisible = _useState4[0],
      setColumnsVisible = _useState4[1];

  var options = selectableColumns.map(function (column) {
    return {
      label: column.title,
      value: column.id
    };
  });

  var apply = function apply() {
    onColumnVisibilityChange(columnsVisible);
    setOpen(false);
  };

  var cancel = function cancel() {
    return setOpen(false);
  };

  var all = function all() {
    var resetColumn = columns.map(function (column) {
      return column.id;
    });
    setColumnsVisible(resetColumn);
  };

  var none = function none() {
    return setColumnsVisible([]);
  };

  var content = React.createElement(PopoverContent, {
    width: "12rem",
    overflow: "hidden"
  }, React.createElement(SpaceVertical, null, React.createElement(Space, {
    gap: "u1"
  }, React.createElement(ButtonTransparent, {
    size: "xsmall",
    onClick: all
  }, t('Select All')), React.createElement(ButtonTransparent, {
    size: "xsmall",
    onClick: none
  }, t('Select None'))), React.createElement(CheckboxGroup, {
    value: columnsVisible,
    onChange: setColumnsVisible,
    options: options
  }), React.createElement(Space, {
    reverse: true
  }, React.createElement(ButtonTransparent, {
    onClick: apply
  }, t('Apply')), React.createElement(ButtonTransparent, {
    onClick: cancel,
    color: "neutral"
  }, t('Cancel')))));

  var _usePopover = usePopover({
    content: content,
    isOpen: isOpen,
    setOpen: setOpen
  }),
      popover = _usePopover.popover,
      domProps = _usePopover.domProps;

  return React.createElement(React.Fragment, null, popover, React.createElement(IconButton, _extends({
    icon: React.createElement(ViewColumn, null),
    label: t('Select columns to display')
  }, domProps)));
};
//# sourceMappingURL=ColumnSelector.js.map
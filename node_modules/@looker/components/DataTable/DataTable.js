function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";
import styled from 'styled-components';
import React, { useState } from 'react';
import { BulkActions } from './BulkActions';
import { DataTableContext } from './DataTableContext';
import { DataTableFilters } from './Filters/DataTableFilters';
import { Table } from './Table';
import { allItemsSelected } from './utils/allItemsSelected';
export var DataTableLayout = function DataTableLayout(props) {
  var bulk = props.bulk,
      className = props.className,
      caption = props.caption,
      columns = props.columns,
      filterInput = props.filters,
      explicitFirstColumnStuck = props.firstColumnStuck,
      onSort = props.onSort,
      select = props.select;
  var columnsVisibleDefault = columns.filter(function (c) {
    return c.hide === false;
  }).map(function (c) {
    return c.id;
  });

  var _useState = useState(columnsVisibleDefault),
      _useState2 = _slicedToArray(_useState, 2),
      columnsVisible = _useState2[0],
      setColumnsVisible = _useState2[1];

  var columnsDisplayState = columns.map(function (c) {
    return c.hide === undefined || columnsVisible.includes(c.id);
  });
  var firstColumnStuck = Boolean(select);

  if (columnsDisplayState[0] === false) {
    firstColumnStuck = false;
  } else if (explicitFirstColumnStuck !== undefined) {
    firstColumnStuck = explicitFirstColumnStuck;
  }

  var context = {
    allSelected: allItemsSelected(select),
    columns: columns,
    columnsDisplayState: columnsDisplayState,
    onSort: onSort,
    select: select
  };
  var filters = filterInput && React.createElement(DataTableFilters, {
    columns: columns,
    columnsVisible: columnsVisible,
    onColumnVisibilityChange: setColumnsVisible
  }, filterInput);
  return React.createElement(DataTableContext.Provider, {
    value: context
  }, React.createElement("div", {
    className: className
  }, filters, bulk && select && select.selectedItems.length > 0 && React.createElement(BulkActions, bulk), React.createElement(Table, _extends({}, props, {
    caption: caption,
    columns: columns,
    columnsVisible: columnsVisible,
    firstColumnStuck: firstColumnStuck
  }))));
};
export var DataTable = styled(DataTableLayout).withConfig({
  displayName: "DataTable",
  componentId: "sc-mgms8t-0"
})(["width:100%;"]);
//# sourceMappingURL=DataTable.js.map
var _excluded = ["children", "contentDomProps", "disclosureProps", "isOpen"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Children, isValidElement } from 'react';
import { mergeClassNames } from '../utils';
import { AccordionContent } from './AccordionContent';
import { AccordionDisclosure } from './AccordionDisclosure';
export var isLegacyComposition = function isLegacyComposition(children) {
  return Children.count(children) === 2;
};
export var AccordionLegacy = function AccordionLegacy(_ref) {
  var children = _ref.children,
      contentDomProps = _ref.contentDomProps,
      disclosureProps = _ref.disclosureProps,
      isOpen = _ref.isOpen,
      props = _objectWithoutProperties(_ref, _excluded);

  var accordionChildren = [];
  Children.forEach(children, function (child) {
    if (isValidElement(child)) {
      var isAccordionDisclosure = child.type === AccordionDisclosure;
      var isAccordionContent = child.type === AccordionContent;

      if (isAccordionDisclosure) {
        accordionChildren.push(React.cloneElement(child, _objectSpread(_objectSpread({}, disclosureProps), {}, {
          className: mergeClassNames([disclosureProps.className, child.props.className]),
          key: 'accordion-disclosure'
        })));
      } else if (isAccordionContent && isOpen) {
        accordionChildren.push(React.cloneElement(child, _objectSpread(_objectSpread({}, contentDomProps), {}, {
          className: mergeClassNames([child.props.className, contentDomProps.className]),
          key: 'accordion-content'
        })));
      }
    }
  });
  return React.createElement("div", props, accordionChildren);
};
//# sourceMappingURL=AccordionLegacy.js.map
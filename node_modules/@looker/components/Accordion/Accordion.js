import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["content", "children", "isOpen", "toggleOpen"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import omit from 'lodash/omit';
import { textColor, typography } from '@looker/design-tokens';
import { simpleLayoutCSS } from '../Layout/utils/simple';
import { useAccordion2 } from '../Accordion2/useAccordion2';
import { accordionDimensions } from '../Accordion2/accordionDimensions';
import { AccordionLegacy, isLegacyComposition } from './AccordionLegacy';
import { AccordionDisclosure } from './AccordionDisclosure';
import { AccordionContent } from './AccordionContent';

var AccordionInternal = function AccordionInternal(_ref) {
  var children = _ref.content,
      label = _ref.children,
      propsIsOpen = _ref.isOpen,
      propsToggleOpen = _ref.toggleOpen,
      props = _objectWithoutProperties(_ref, _excluded);

  if (propsIsOpen && propsToggleOpen === undefined || propsIsOpen === undefined && propsToggleOpen) {
    console.warn('Please provide both an isOpen prop and a toggleOpen prop if you wish to control a Accordion state. If you would like an uncontrolled Accordion, avoid passing in either prop into your Accordion element.');
  }

  if (!label) {
    console.warn("<Accordion>'s child is falsy (i.e. undefined, null, false, etc). Please give <Accordion> a valid ReactNode child.");
  }

  var controlledProps = propsIsOpen && propsToggleOpen ? {
    isOpen: propsIsOpen,
    toggleOpen: propsToggleOpen
  } : {};

  var _useAccordion = useAccordion2(_objectSpread(_objectSpread({
    children: children,
    label: label
  }, controlledProps), props)),
      contentDomProps = _useAccordion.contentDomProps,
      domProps = _useAccordion.domProps,
      disclosureProps = _useAccordion.disclosureProps,
      isOpen = _useAccordion.isOpen;

  if (isLegacyComposition(label)) {
    return React.createElement(AccordionLegacy, _extends({}, domProps, {
      contentDomProps: omit(contentDomProps, 'children'),
      disclosureProps: omit(disclosureProps, 'children'),
      isOpen: isOpen
    }), label);
  } else {
    return React.createElement("div", domProps, React.createElement(AccordionDisclosure, disclosureProps), isOpen && React.createElement(AccordionContent, contentDomProps));
  }
};

export var Accordion = styled(AccordionInternal).withConfig({
  displayName: "Accordion",
  componentId: "sc-egrkwf-0"
})(["font-size:", ";width:100%;", ",", "{", " ", " ", "}"], function (_ref2) {
  var theme = _ref2.theme,
      density = _ref2.density;
  return theme.fontSizes[accordionDimensions(density || theme.defaults.density).fontSize];
}, AccordionDisclosure, AccordionContent, textColor, simpleLayoutCSS, typography);
//# sourceMappingURL=Accordion.js.map
import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { transitions } from '@looker/design-tokens';
import omit from 'lodash/omit';
import React, { useContext, useEffect, useRef } from 'react';
import { DialogContext } from '../Dialog';
import { usePopover } from '../Popover';
import { useWrapEvent } from '../utils';
import { ListItemContext } from '../ListItem';
import { NestedMenuContext } from './NestedMenuProvider';
import { NestedMenuSurface } from './NestedMenuSurface';
import { MenuList } from './';

var movingTowardPlacement = function movingTowardPlacement(newPos, prevPos, placement) {
  if (!prevPos || !placement) return false;

  switch (placement) {
    case 'right-start':
      return newPos.x > prevPos.x && newPos.y > prevPos.y;

    case 'right-end':
      return newPos.x > prevPos.x && newPos.y < prevPos.y;

    case 'left-start':
      return newPos.x < prevPos.x && newPos.y > prevPos.y;

    case 'left-end':
      return newPos.x < prevPos.x && newPos.y < prevPos.y;

    default:
      return newPos.x > prevPos.x && newPos.y > prevPos.y;
  }
};

var noop = function noop() {
  return undefined;
};

export var useNestedMenu = function useNestedMenu(_ref) {
  var id = _ref.id,
      onClick = _ref.onClick,
      onKeyDown = _ref.onKeyDown,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      nestedMenu = _ref.nestedMenu;
  var mousePosition = useRef();
  var focusRef = useRef(null);

  var _useContext = useContext(NestedMenuContext),
      value = _useContext.value,
      change = _useContext.change,
      delayChange = _useContext.delayChange,
      waitChange = _useContext.waitChange;

  var _useContext2 = useContext(DialogContext),
      closeModal = _useContext2.closeModal;

  var _useContext3 = useContext(ListItemContext),
      density = _useContext3.density;

  var isOpen = value === id;

  var openNestedMenu = function openNestedMenu() {
    return change(id);
  };

  var closeNestedMenu = function closeNestedMenu() {
    return change('');
  };

  var itemHandlers = {
    onClick: useWrapEvent(function (e) {
      if (nestedMenu && !onClick) {
        openNestedMenu();
        e.preventDefault();
      }
    }, onClick),
    onKeyDown: useWrapEvent(nestedMenu ? function (e) {
      if (e.key === 'ArrowRight') {
        openNestedMenu();
        e.preventDefault();
      }
    } : noop, onKeyDown),
    onMouseEnter: useWrapEvent(nestedMenu ? function (e) {
      if (value === '') {
        delayChange(id, 100);
      } else {
        waitChange(id);
      }

      focusRef.current = e.currentTarget;
    } : noop, onMouseEnter),
    onMouseLeave: useWrapEvent(nestedMenu ? function (e) {
      if (isOpen) {
        var _popperInstanceRef$cu;

        if (movingTowardPlacement({
          x: e.screenX,
          y: e.screenY
        }, mousePosition.current, (_popperInstanceRef$cu = popperInstanceRef.current) === null || _popperInstanceRef$cu === void 0 ? void 0 : _popperInstanceRef$cu.state.placement)) {
          delayChange('', transitions.complex);
        } else {
          change('');
        }

        mousePosition.current = undefined;
      } else {
        change('');
      }
    } : noop, onMouseLeave),
    onMouseMove: function onMouseMove(e) {
      mousePosition.current = {
        x: e.screenX,
        y: e.screenY
      };
    }
  };
  var listHandlers = nestedMenu ? {
    onKeyDown: function onKeyDown(e) {
      switch (e.key) {
        case 'ArrowLeft':
          closeNestedMenu();
          e.preventDefault();
          break;

        case 'Escape':
          closeModal();
          break;
      }
    },
    onMouseEnter: openNestedMenu
  } : {};

  var _usePopover = usePopover({
    content: React.createElement(MenuList, _extends({
      "data-autofocus": "true",
      density: density
    }, listHandlers, {
      closeParentMenu: closeModal
    }), nestedMenu),
    disabled: nestedMenu === undefined,
    isOpen: isOpen,
    placement: 'right-start',
    scrollLock: false,
    setOpen: closeNestedMenu,
    surface: NestedMenuSurface,
    triggerToggle: false
  }),
      popover = _usePopover.popover,
      popperInstanceRef = _usePopover.popperInstanceRef,
      domProps = _usePopover.domProps;

  useEffect(function () {
    if (isOpen && focusRef.current) {
      var button = focusRef.current.querySelector('a,button');
      button === null || button === void 0 ? void 0 : button.focus();
    }
  }, [isOpen]);

  var combinedDomProps = _objectSpread(_objectSpread({}, itemHandlers), nestedMenu ? omit(domProps, 'onClick') : {});

  return {
    domProps: combinedDomProps,
    popover: popover
  };
};
//# sourceMappingURL=useNestedMenu.js.map
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["className", "children", "detail", "onClick", "onKeyDown", "onMouseEnter", "onMouseLeave", "nestedMenu", "style"],
    _excluded2 = ["onClick", "ref"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import pick from 'lodash/pick';
import styled, { ThemeContext } from 'styled-components';
import React, { forwardRef, useContext } from 'react';
import { shouldForwardProp, size } from '@looker/design-tokens';
import { ArrowRight } from '@styled-icons/material/ArrowRight';
import { DialogContext } from '../Dialog';
import { ListItem, ListItemContext, listItemDimensions } from '../ListItem';
import { useForkedRef, useID, mergeClassNames, useCallbackRef, useMeasuredElement } from '../utils';
import { rippleHandlerKeys, rippleStyle, useRipple, useRippleHandlers } from '../Ripple';
import { NestedMenuContext } from './NestedMenuProvider';
import { useNestedMenu } from './useNestedMenu';
export var MenuItem = styled(forwardRef(function (_ref, forwardedRef) {
  var className = _ref.className,
      children = _ref.children,
      detail = _ref.detail,
      onClick = _ref.onClick,
      onKeyDown = _ref.onKeyDown,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      nestedMenu = _ref.nestedMenu,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, _excluded);

  var id = useID(props.id);

  var _useNestedMenu = useNestedMenu({
    id: id,
    nestedMenu: nestedMenu,
    onClick: onClick,
    onKeyDown: onKeyDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }),
      popover = _useNestedMenu.popover,
      _useNestedMenu$domPro = _useNestedMenu.domProps,
      nestedMenuOnClick = _useNestedMenu$domPro.onClick,
      nestedMenuRef = _useNestedMenu$domPro.ref,
      nestedMenuProps = _objectWithoutProperties(_useNestedMenu$domPro, _excluded2);

  var _useCallbackRef = useCallbackRef(forwardedRef),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      element = _useCallbackRef2[0],
      internalRef = _useCallbackRef2[1];

  var _useMeasuredElement = useMeasuredElement(element),
      _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
      _useMeasuredElement2$ = _useMeasuredElement2[0],
      height = _useMeasuredElement2$.height,
      width = _useMeasuredElement2$.width;

  var _useRipple = useRipple({
    bounded: true,
    color: 'neutral',
    height: height,
    width: width
  }),
      callbacks = _useRipple.callbacks,
      rippleClassName = _useRipple.className,
      rippleStyle = _useRipple.style;

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(_objectSpread(_objectSpread({}, props), nestedMenuProps), rippleHandlerKeys)), props.disabled);
  var ref = useForkedRef(nestedMenuRef, internalRef);
  var theme = useContext(ThemeContext);

  var _useContext = useContext(ListItemContext),
      density = _useContext.density;

  var _listItemDimensions = listItemDimensions(density || theme.defaults.density),
      iconSize = _listItemDimensions.iconSize;

  if (detail && nestedMenu) {
    console.warn('The detail prop is not supported when nestedMenu is used.');
  }

  detail = nestedMenu ? React.createElement(NestedMenuIndicator, {
    size: iconSize
  }) : detail;

  var _useContext2 = useContext(DialogContext),
      closeModal = _useContext2.closeModal;

  var _useContext3 = useContext(NestedMenuContext),
      closeParentMenu = _useContext3.closeParentMenu;

  var handleOnClick = function handleOnClick(event) {
    nestedMenuOnClick(event);

    if (!event.defaultPrevented) {
      closeModal === null || closeModal === void 0 ? void 0 : closeModal();
      closeParentMenu === null || closeParentMenu === void 0 ? void 0 : closeParentMenu();
    }
  };

  return React.createElement(React.Fragment, null, React.createElement(ListItem, _extends({
    className: mergeClassNames([className, rippleClassName]),
    detail: detail,
    onClick: handleOnClick,
    ref: ref,
    role: "menuitem",
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }, nestedMenuProps, props, rippleHandlers), children), popover);
})).withConfig({
  displayName: "MenuItem",
  componentId: "sc-13x060p-0"
})(["", " [aria-expanded='true']{background:", ";}"], rippleStyle, function (_ref2) {
  var colors = _ref2.theme.colors;
  return colors.ui1;
});
var NestedMenuIndicator = styled(ArrowRight).withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "MenuItem__NestedMenuIndicator",
  componentId: "sc-13x060p-1"
})(["color:", ";", ""], function (_ref3) {
  var theme = _ref3.theme;
  return theme.colors.text1;
}, size);
//# sourceMappingURL=MenuItem.js.map
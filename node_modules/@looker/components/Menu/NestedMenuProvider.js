import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { createContext, useCallback, useContext } from 'react';
import { useDelayedState } from '../utils';
var nestedMenuContext = {
  change: function change() {
    return undefined;
  },
  delayChange: function delayChange() {
    return undefined;
  },
  value: '',
  waitChange: function waitChange() {
    return undefined;
  }
};
export var NestedMenuContext = createContext(nestedMenuContext);
export var NestedMenuProvider = function NestedMenuProvider(_ref) {
  var children = _ref.children,
      closeParentMenu = _ref.closeParentMenu;
  var delayedStateProps = useDelayedState('');

  var _useContext = useContext(NestedMenuContext),
      closeGrandparentMenu = _useContext.closeParentMenu;

  var wrappedCloseParentMenu = useCallback(function () {
    closeGrandparentMenu === null || closeGrandparentMenu === void 0 ? void 0 : closeGrandparentMenu();
    closeParentMenu === null || closeParentMenu === void 0 ? void 0 : closeParentMenu();
  }, [closeGrandparentMenu, closeParentMenu]);
  return React.createElement(NestedMenuContext.Provider, {
    value: _objectSpread(_objectSpread({}, delayedStateProps), {}, {
      closeParentMenu: wrappedCloseParentMenu
    })
  }, children);
};
//# sourceMappingURL=NestedMenuProvider.js.map
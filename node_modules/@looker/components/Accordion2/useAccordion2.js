import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
var _excluded = ["children", "className", "density", "disabled", "label", "id", "indicatorPosition", "indicatorIcons", "defaultOpen", "isOpen", "onBlur", "onClick", "onClose", "onOpen", "onKeyUp", "role", "tabIndex", "toggleOpen"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState } from 'react';
import { useClickable, useWrapEvent } from '../utils';
import { Accordion2Content } from './Accordion2Content';
import { accordionDefaults, accordionLeftDefaults } from './accordionDefaults';
import { AccordionIndicator } from './AccordionIndicator';
import { useAriaLabelObjectRelationship } from './useAriaLabelObjectRelationship';
export var useAccordion2 = function useAccordion2(_ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$density = _ref.density,
      density = _ref$density === void 0 ? accordionDefaults.density : _ref$density,
      disabled = _ref.disabled,
      label = _ref.label,
      id = _ref.id,
      indicatorPosition = _ref.indicatorPosition,
      _ref$indicatorIcons = _ref.indicatorIcons,
      indicatorIcons = _ref$indicatorIcons === void 0 ? indicatorPosition === 'left' ? accordionLeftDefaults.indicatorIcons : accordionDefaults.indicatorIcons : _ref$indicatorIcons,
      _ref$defaultOpen = _ref.defaultOpen,
      defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen,
      propsIsOpen = _ref.isOpen,
      onBlur = _ref.onBlur,
      propsOnClick = _ref.onClick,
      onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      onKeyUp = _ref.onKeyUp,
      role = _ref.role,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
      propsToggleOpen = _ref.toggleOpen,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(defaultOpen),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var toggle = function toggle() {
    return setValue(!value);
  };

  var isOpen = propsIsOpen !== undefined ? propsIsOpen : value;
  var onClick = useWrapEvent(function () {
    isOpen ? onClose && onClose() : onOpen && onOpen();
    propsToggleOpen !== undefined ? propsToggleOpen(!isOpen) : toggle();
  }, propsOnClick);
  var clickableProps = useClickable({
    disabled: disabled,
    onBlur: onBlur,
    onClick: onClick,
    onKeyUp: onKeyUp,
    role: role
  });

  var _useAriaLabelObjectRe = useAriaLabelObjectRelationship(id),
      _useAriaLabelObjectRe2 = _slicedToArray(_useAriaLabelObjectRe, 2),
      labelProps = _useAriaLabelObjectRe2[0],
      objectProps = _useAriaLabelObjectRe2[1];

  var domProps = _objectSpread(_objectSpread({}, props), {}, {
    className: className,
    id: id
  });

  var indicator = React.createElement(AccordionIndicator, {
    density: density,
    indicatorPosition: indicatorPosition
  }, isOpen ? indicatorIcons.open : indicatorIcons.close);

  var disclosureProps = _objectSpread(_objectSpread({}, labelProps), {}, {
    'aria-expanded': isOpen,
    children: label,
    className: clickableProps.focusVisible ? 'focusVisible ' : undefined,
    density: density,
    indicator: indicator,
    indicatorPosition: indicatorPosition,
    tabIndex: tabIndex
  }, clickableProps);

  var contentDomProps = _objectSpread(_objectSpread({}, objectProps), {}, {
    children: children,
    role: 'region'
  });

  var content = isOpen && React.createElement(Accordion2Content, contentDomProps);
  return {
    content: content,
    contentDomProps: contentDomProps,
    disclosureProps: disclosureProps,
    domProps: domProps,
    isOpen: isOpen
  };
};
//# sourceMappingURL=useAccordion2.js.map
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useCallback, useMemo, useState } from 'react';
import { useAnimationState, useCallbackRef, useID, usePopper, useForkedRef } from '../utils';
import { Portal } from '../Portal';
import { TooltipContent } from './TooltipContent';
import { TooltipSurface } from './TooltipSurface';

var noop = function noop() {};

export var useTooltip = function useTooltip(_ref) {
  var canClose = _ref.canClose,
      content = _ref.content,
      _ref$isOpen = _ref.isOpen,
      initializeOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      width = _ref.width,
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? '30rem' : _ref$maxWidth,
      textAlign = _ref.textAlign,
      disabled = _ref.disabled,
      id = _ref.id,
      invert = _ref.invert,
      triggerElement = _ref.triggerElement,
      _ref$placement = _ref.placement,
      propsPlacement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 'intricate' : _ref$delay;

  var _useState = useState(initializeOpen),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useAnimationState = useAnimationState({
    enter: delay,
    exit: 'none',
    isOpen: isOpen
  }),
      busy = _useAnimationState.busy,
      className = _useAnimationState.className,
      renderDOM = _useAnimationState.renderDOM;

  var _useCallbackRef = useCallbackRef(),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      surfaceElement = _useCallbackRef2[0],
      surfaceCallbackRef = _useCallbackRef2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      newTriggerElement = _useState4[0],
      setTriggerElement = _useState4[1];

  var element = triggerElement !== null && triggerElement !== void 0 ? triggerElement : newTriggerElement;
  var handleClose = useCallback(function () {
    if (canClose && !canClose()) return;
    setIsOpen(false);
  }, [canClose]);
  var handleMouseOut = useCallback(function (event) {
    if (!isOpen) return;
    var related = event.relatedTarget;

    if (element && (element === related || element.contains(related))) {
      return;
    }

    if (surfaceElement && (surfaceElement === related || surfaceElement.contains(related))) {
      return;
    }

    window.requestAnimationFrame(function () {
      handleClose();
    });
  }, [element, surfaceElement, isOpen, handleClose]);
  var usePopperProps = useMemo(function () {
    return {
      anchor: element,
      options: {
        modifiers: [{
          enabled: true,
          name: 'flip',
          options: {
            flipVariations: true
          }
        }],
        placement: propsPlacement
      }
    };
  }, [element, propsPlacement]);

  var _usePopper = usePopper(usePopperProps),
      placement = _usePopper.placement,
      popperInstanceRef = _usePopper.popperInstanceRef,
      style = _usePopper.style,
      targetRef = _usePopper.targetRef;

  var ref = useForkedRef(targetRef, surfaceCallbackRef);
  var guaranteedId = useID(id);
  return useMemo(function () {
    var popper = renderDOM && content && !disabled ? React.createElement(Portal, null, React.createElement(TooltipSurface, {
      "aria-busy": busy ? true : undefined,
      className: className,
      eventHandlers: {
        onMouseOut: handleMouseOut
      },
      placement: placement,
      ref: ref,
      style: style,
      maxWidth: maxWidth,
      invert: invert
    }, React.createElement(TooltipContent, {
      role: "tooltip",
      id: guaranteedId,
      width: width,
      textAlign: textAlign
    }, content))) : null;

    var handleOpen = function handleOpen(e) {
      setTriggerElement(e.currentTarget);
      var currentElement = triggerElement !== null && triggerElement !== void 0 ? triggerElement : e.currentTarget;

      if (!disabled && (!currentElement || !currentElement.dataset.notooltip)) {
        setIsOpen(true);
      }
    };

    var enabledDomProps = disabled ? {} : {
      'aria-describedby': guaranteedId,
      className: renderDOM ? 'hover' : undefined
    };
    return {
      domProps: _objectSpread(_objectSpread({}, enabledDomProps), {}, {
        onBlur: handleClose,
        onFocus: handleOpen,
        onMouseOut: handleMouseOut,
        onMouseOver: handleOpen,
        ref: noop
      }),
      popperInstanceRef: popperInstanceRef,
      tooltip: popper
    };
  }, [busy, className, content, disabled, guaranteedId, handleClose, handleMouseOut, invert, maxWidth, placement, popperInstanceRef, ref, renderDOM, style, textAlign, triggerElement, width]);
};
//# sourceMappingURL=useTooltip.js.map
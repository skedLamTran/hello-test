"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMatchingOption = getMatchingOption;
exports.getOption = getOption;
exports.getOptions = getOptions;
exports.compareOption = compareOption;
exports.getFirstOption = getFirstOption;
exports.notInOptions = notInOptions;
exports.optionsHaveIcons = void 0;

require("core-js/modules/es.array.map.js");

var _Combobox = require("../../Combobox");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getMatchingOption(value, options) {
  return options === null || options === void 0 ? void 0 : options.find(option => option.value === value);
}

function getOption(value, options) {
  const matchingOption = getMatchingOption(value, options);
  const label = matchingOption === null || matchingOption === void 0 ? void 0 : matchingOption.label;
  const labelProps = label ? {
    label
  } : {};
  return value !== undefined ? _objectSpread(_objectSpread({}, labelProps), {}, {
    value
  }) : undefined;
}

function getOptions(values, options) {
  if (!values) return undefined;
  return values.map(value => ({
    label: (0, _Combobox.getComboboxText)(value, options),
    value
  }));
}

function compareOption(option, value) {
  return (0, _Combobox.getComboboxText)(option).toLowerCase() === value.toLowerCase();
}

function getFirstOption(options) {
  const optionAsGroup = options[0];
  if (optionAsGroup && optionAsGroup.options) return optionAsGroup.options[0];
  return options[0];
}

function notInOptions(currentOptions, options, inputValue) {
  if (!inputValue) return false;

  if (currentOptions.find(option => compareOption(option, inputValue))) {
    return false;
  }

  if (!options) return true;
  return options.find(option => compareOption(option, inputValue)) === undefined;
}

const checkForIcon = option => option.icon !== undefined;

const optionsHaveIcons = options => {
  if (!options || options.length === 0) return false;
  return options.some(option => checkForIcon(option));
};

exports.optionsHaveIcons = optionsHaveIcons;
//# sourceMappingURL=options.js.map
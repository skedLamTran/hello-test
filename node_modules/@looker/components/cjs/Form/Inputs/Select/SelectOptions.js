"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectOptions = exports.SelectOptionWithDescription = exports.SelectOptionsContext = void 0;

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.map.js");

var _reactI18next = require("react-i18next");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Icon = require("../../../Icon");

var _Spinner = require("../../../Spinner");

var _ListDivider = require("../../../List/ListDivider");

var _ListItemPreface = require("../../../ListItem/ListItemPreface");

var _Text = require("../../../Text");

var _utils = require("../../../utils");

var _Combobox = require("../Combobox");

var _options = require("./utils/options");

var _useWindowedOptions2 = require("./utils/useWindowedOptions");

var _SelectOptionDetail = require("./SelectOptionDetail");

const _excluded = ["description", "detail", "preface"],
      _excluded2 = ["option"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const SelectOptionsContext = (0, _react.createContext)({
  hasIcons: false
});
exports.SelectOptionsContext = SelectOptionsContext;

const OptionLayoutBase = ({
  isMulti,
  option,
  scrollIntoView
}) => {
  const description = option.description,
        detail = option.detail,
        preface = option.preface,
        rest = _objectWithoutProperties(option, _excluded);

  const Component = isMulti ? _Combobox.ComboboxMultiOption : _Combobox.ComboboxOption;

  if (description || detail || preface) {
    return _react.default.createElement(Component, _extends({}, rest, {
      py: preface || description ? 'xsmall' : 'xxsmall',
      scrollIntoView: scrollIntoView
    }), _react.default.createElement(SelectOptionWithDescription, _extends({
      description: description,
      preface: preface
    }, rest)), detail && _react.default.createElement(_SelectOptionDetail.SelectOptionDetail, null, detail));
  }

  return _react.default.createElement(Component, rest);
};

const OptionIcon = ({
  preface,
  icon
}) => icon ? _react.default.createElement(_Icon.Icon, {
  size: "small",
  mt: preface ? 'medium' : 'none',
  color: "text1",
  icon: icon,
  "data-testid": "option-icon"
}) : null;

const OptionLayout = _ref => {
  let option = _ref.option,
      rest = _objectWithoutProperties(_ref, _excluded2);

  const _useContext = (0, _react.useContext)(SelectOptionsContext),
        hasIcons = _useContext.hasIcons;

  const _useContext2 = (0, _react.useContext)(_Combobox.ComboboxContext),
        indicatorPropRef = _useContext2.indicatorPropRef;

  const iconPlaceholder = hasIcons ? _react.default.createElement(_Icon.IconPlaceholder, {
    mr: "xsmall",
    size: "small",
    "data-testid": "option-icon-placeholder"
  }) : undefined;
  const indicator = option.icon ? _react.default.createElement(OptionIcon, option) : option.indicator || (indicatorPropRef === null || indicatorPropRef === void 0 ? void 0 : indicatorPropRef.current) || iconPlaceholder;
  (0, _react.useEffect)(() => {
    if (option.icon && option.indicator) {
      console.warn('Use icon or indicator but not both at the same time.');
    }
  }, [option.icon, option.indicator]);
  return _react.default.createElement(OptionLayoutBase, _extends({}, rest, {
    option: _objectSpread(_objectSpread({}, option), {}, {
      indicator
    })
  }));
};

const MultiOptionLayout = props => _react.default.createElement(OptionLayoutBase, _extends({}, props, {
  isMulti: true
}));

const SelectOptionWithDescription = ({
  description,
  preface
}) => {
  return description || preface ? _react.default.createElement("div", null, preface && _react.default.createElement(_ListItemPreface.ListItemPreface, null, preface), _react.default.createElement(_Text.Paragraph, {
    fontSize: "small",
    lineHeight: "small"
  }, _react.default.createElement(_Combobox.ComboboxOptionText, null)), description && _react.default.createElement(_Text.Paragraph, {
    color: "text2",
    fontSize: "xsmall",
    lineHeight: "xsmall"
  }, description)) : _react.default.createElement(_Combobox.ComboboxOptionText, null);
};

exports.SelectOptionWithDescription = SelectOptionWithDescription;
const SelectOptionGroupTitle = (0, _styledComponents.default)(_Text.Heading).attrs(() => ({
  color: 'text1',
  fontFamily: 'body',
  fontSize: 'xxsmall',
  fontWeight: 'semiBold',
  px: 'u2',
  py: 'u1'
})).withConfig({
  displayName: "SelectOptions__SelectOptionGroupTitle",
  componentId: "sc-8zhrcr-0"
})(["display:flex;padding-top:", ";"], ({
  theme
}) => theme.space.u1);

const SelectOptions = props => {
  const _useTranslation = (0, _reactI18next.useTranslation)('SelectOptions'),
        t = _useTranslation.t;

  const noOptionsLabelText = t('No options');
  const flatOptions = props.flatOptions,
        navigationOptions = props.navigationOptions,
        isFilterable = props.isFilterable,
        showCreate = props.showCreate,
        formatCreateLabel = props.formatCreateLabel,
        isMulti = props.isMulti,
        _props$noOptionsLabel = props.noOptionsLabel,
        noOptionsLabel = _props$noOptionsLabel === void 0 ? noOptionsLabelText : _props$noOptionsLabel,
        windowing = props.windowing,
        isLoading = props.isLoading;

  const _useWindowedOptions = (0, _useWindowedOptions2.useWindowedOptions)(windowing, flatOptions, navigationOptions, isMulti),
        start = _useWindowedOptions.start,
        end = _useWindowedOptions.end,
        before = _useWindowedOptions.before,
        after = _useWindowedOptions.after,
        scrollToFirst = _useWindowedOptions.scrollToFirst,
        scrollToLast = _useWindowedOptions.scrollToLast;

  const keyPrefix = (0, _utils.useID)(flatOptions === null || flatOptions === void 0 ? void 0 : flatOptions.length.toString());
  const hasIcons = (0, _react.useMemo)(() => (0, _options.optionsHaveIcons)(navigationOptions), [navigationOptions]);

  if (isLoading) {
    return _react.default.createElement(EmptyListItem, null, _react.default.createElement(_Spinner.Spinner, {
      size: 30,
      "aria-label": t('Loading')
    }));
  }

  const optionsToRender = flatOptions ? flatOptions.slice(start, end + 1) : [];
  const OptionLayoutToUse = isMulti ? MultiOptionLayout : OptionLayout;

  const noOptions = _react.default.createElement(EmptyListItem, null, _react.default.createElement(_Text.Text, {
    color: "text1"
  }, noOptionsLabel));

  const createOption = isFilterable && showCreate && _react.default.createElement(SelectCreateOption, {
    options: navigationOptions,
    formatLabel: formatCreateLabel,
    noOptions: noOptions,
    isMulti: isMulti,
    key: "create"
  });

  return _react.default.createElement(SelectOptionsContext.Provider, {
    value: {
      hasIcons
    }
  }, navigationOptions && scrollToFirst ? _react.default.createElement(OptionLayoutToUse, {
    option: navigationOptions[0],
    key: `${keyPrefix}-0`,
    scrollIntoView: true
  }) : null, before, optionsToRender && optionsToRender.length > 0 ? [...optionsToRender.map((option, index) => {
    const key = `${keyPrefix}-${start + index}`;

    if (option.value !== undefined) {
      const OptionLayoutToUse = isMulti ? MultiOptionLayout : OptionLayout;
      return _react.default.createElement(OptionLayoutToUse, {
        option: option,
        key: key
      });
    } else if (option.label !== undefined) {
      return _react.default.createElement(SelectOptionGroupTitle, {
        isMulti: isMulti,
        key: key
      }, _react.default.createElement(_Combobox.ComboboxOptionIndicator, {
        indicator: isMulti && ' '
      }), option.label);
    }

    return _react.default.createElement(_ListDivider.ListDivider, {
      key: key
    });
  }), createOption] : createOption || noOptions, after, navigationOptions && scrollToLast ? _react.default.createElement(OptionLayoutToUse, {
    option: navigationOptions[navigationOptions.length - 1],
    key: `${keyPrefix}-${navigationOptions.length - 1}`,
    scrollIntoView: true
  }) : null);
};

exports.SelectOptions = SelectOptions;

const SelectCreateOption = ({
  options,
  noOptions,
  formatLabel,
  isMulti
}) => {
  const _useContext3 = (0, _react.useContext)(_Combobox.ComboboxContext),
        data = _useContext3.data;

  const _useContext4 = (0, _react.useContext)(_Combobox.ComboboxMultiContext),
        dataMulti = _useContext4.data;

  const inputValue = isMulti ? dataMulti.inputValue : data.inputValue;
  const shouldShow = (0, _react.useMemo)(() => {
    let currentOptions = [];

    if (isMulti) {
      currentOptions = dataMulti.options;
    } else if (data.option) {
      currentOptions = [data.option];
    }

    return (0, _options.notInOptions)(currentOptions, options, inputValue);
  }, [isMulti, data.option, dataMulti.options, options, inputValue]);

  if (!shouldShow || !inputValue) {
    if (!options || options.length === 0) return _react.default.createElement(_react.default.Fragment, null, noOptions);
    return null;
  }

  const OptionComponent = isMulti ? _Combobox.ComboboxMultiOption : _Combobox.ComboboxOption;
  return _react.default.createElement(OptionComponent, {
    value: inputValue,
    highlightText: false,
    indicator: false
  }, formatLabel ? formatLabel(inputValue) : `Create "${inputValue}"`);
};

const EmptyListItem = _styledComponents.default.li.withConfig({
  displayName: "SelectOptions__EmptyListItem",
  componentId: "sc-8zhrcr-1"
})(["display:flex;justify-content:center;padding:", ";"], ({
  theme
}) => `${theme.space.u8} ${theme.space.u4}`);
//# sourceMappingURL=SelectOptions.js.map
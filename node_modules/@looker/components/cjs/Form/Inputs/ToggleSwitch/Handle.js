"use strict";

require("core-js/modules/es.array.index-of.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Handle = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Ripple = require("../../../Ripple");

const _excluded = ["theme"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const getColor = ({
  on,
  validationType
}) => {
  if (on) {
    if (validationType === 'error') return 'critical';
    return 'key';
  }

  return 'field';
};

const Handle = (0, _styledComponents.default)(({
  className,
  style
}) => _react.default.createElement("div", {
  className: className,
  style: style,
  "data-testid": "handle"
}, _react.default.createElement("div", null))).withConfig({
  displayName: "Handle",
  componentId: "sc-1qvjj89-0"
})(["", " height:", ";left:0;padding:", ";position:absolute;top:0;transform:", ";transition:", "ms;width:", ";div{background:", ";border-radius:50%;box-shadow:", ";height:100%;position:relative;width:100%;}"], _Ripple.rippleStyle, ({
  theme
}) => theme.space.u6, ({
  theme
}) => theme.space.u05, ({
  on,
  theme
}) => on ? `translateX(${theme.space.u4})` : undefined, ({
  theme
}) => theme.transitions.rapid, ({
  theme
}) => theme.space.u6, _ref => {
  let theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  return theme.colors[getColor(props)];
}, ({
  theme
}) => theme.elevations.plus1);
exports.Handle = Handle;
//# sourceMappingURL=Handle.js.map
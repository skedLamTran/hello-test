"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputFilters = void 0;

require("core-js/modules/es.array.sort.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.object.values.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

var _reactI18next = require("react-i18next");

var _omit = _interopRequireDefault(require("lodash/omit"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _react = _interopRequireWildcard(require("react"));

var _Close = require("@styled-icons/material/Close");

var _FilterList = require("@styled-icons/material/FilterList");

var _Select = require("../Select");

var _InputText = require("../InputText");

var _Icon = require("../../../Icon");

var _Button = require("../../../Button");

var _Chip = require("../../../Chip");

var _Text = require("../../../Text");

var _Popover = require("../../../Popover");

var _InputFiltersChip = require("./InputFiltersChip");

var _inputFilterEditor = require("./inputFilterEditor");

const _excluded = ["className", "filters", "hideFilterIcon", "onChange"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const InputFiltersLayout = _ref => {
  let className = _ref.className,
      filters = _ref.filters,
      _ref$hideFilterIcon = _ref.hideFilterIcon,
      hideFilterIcon = _ref$hideFilterIcon === void 0 ? false : _ref$hideFilterIcon,
      onChange = _ref.onChange,
      props = _objectWithoutProperties(_ref, _excluded);

  const _useTranslation = (0, _reactI18next.useTranslation)('InputFilters'),
        t = _useTranslation.t;

  const placeholder = props.placeholder || t('Filter List');

  const _useState = (0, _react.useState)(undefined),
        _useState2 = _slicedToArray(_useState, 2),
        fieldEditing = _useState2[0],
        setFieldEditing = _useState2[1];

  const assignedFilters = filters.filter(filter => filter.value || filter.field === fieldEditing).sort((a, b) => {
    if (a.value === undefined) {
      return 1;
    } else if (b.value === undefined) {
      return -1;
    } else {
      return 0;
    }
  });
  const unassignedFilters = filters.filter(filter => !assignedFilters.map(assigned => assigned.field).includes(filter.field));

  const _useState3 = (0, _react.useState)(''),
        _useState4 = _slicedToArray(_useState3, 2),
        filterTerm = _useState4[0],
        setFilterTerm = _useState4[1];

  const options = (0, _react.useMemo)(() => unassignedFilters.reduce((acc, filter) => {
    const option = {
      label: filter.label || filter.field,
      value: filter.field
    };
    const optionMatchesFilter = Object.values(option).some(value => value.toLocaleLowerCase().indexOf(filterTerm.toLocaleLowerCase()) > -1);

    if (optionMatchesFilter) {
      acc = [...acc, option];
    }

    return acc;
  }, []), [filterTerm, unassignedFilters]);
  const inputRef = (0, _react.useRef)(null);
  const isClearable = assignedFilters.length > 0;

  const clearFilters = () => {
    onChange(filters.map(filter => (0, _omit.default)(filter, 'value')));
  };

  const focusInput = () => inputRef.current && inputRef.current.focus();

  const handleFilterLookupChange = field => {
    const filter = filters.find(option => option.field === field);

    if (filter) {
      setFieldEditing(filter.field);
    }
  };

  return _react.default.createElement("div", {
    className: className,
    onClick: focusInput
  }, !hideFilterIcon && _react.default.createElement(_Icon.Icon, {
    color: "ui4",
    mr: "xsmall",
    mt: "xxsmall",
    icon: _react.default.createElement(_FilterList.FilterList, null),
    size: 20
  }), _react.default.createElement(ChipWrapper, null, assignedFilters.map((filter, i) => {
    const editor = filter.editor,
          field = filter.field,
          value = filter.value;

    const editFilter = () => setFieldEditing(field);

    const handleDelete = () => onChange(filters.map(currentFilter => currentFilter.field !== field ? currentFilter : (0, _omit.default)(currentFilter, 'value')));

    const setFieldEditingValue = value => {
      const filterIndex = assignedFilters.findIndex(f => f.field === fieldEditing);
      const newFilters = [...assignedFilters, ...unassignedFilters];

      const updateFilter = _objectSpread(_objectSpread({}, newFilters[filterIndex]), {}, {
        value
      });

      newFilters[filterIndex] = updateFilter;
      onChange(newFilters);
    };

    const closeEditor = () => setFieldEditing(undefined);

    const filterToken = value ? _react.default.createElement(_InputFiltersChip.InputFiltersChip, {
      filter: filter,
      key: i,
      onClick: editFilter,
      onDelete: handleDelete
    }) : _react.default.createElement(_Text.Text, {
      fontSize: "small",
      lineHeight: "xlarge"
    }, (filter === null || filter === void 0 ? void 0 : filter.label) || filter.field, ":");
    return filter.field === fieldEditing ? _react.default.createElement(_Popover.Popover, {
      content: _react.default.createElement(_Popover.PopoverContent, null, editor ? editor({
        closeEditor,
        filterOptions: filter,
        onChange: setFieldEditingValue,
        value
      }) : (0, _inputFilterEditor.inputFilterEditor)({
        closeEditor,
        filterOptions: filter,
        onChange: setFieldEditingValue,
        value
      })),
      isOpen: fieldEditing !== undefined,
      key: i,
      placement: t('bottom-start'),
      setOpen: closeEditor
    }, filterToken) : filterToken;
  }), !fieldEditing && _react.default.createElement(_Select.Select, {
    autoResize: true,
    openOnFocus: true,
    indicator: false,
    onFilter: setFilterTerm,
    isFilterable: true,
    onChange: handleFilterLookupChange,
    options: options,
    placeholder: placeholder,
    ref: inputRef
  })), isClearable && _react.default.createElement(_Button.IconButton, {
    icon: _react.default.createElement(_Close.Close, null),
    label: t('Clear Filters'),
    ml: "auto",
    mt: "xxsmall",
    mr: "xsmall",
    onClick: clearFilters,
    size: "xsmall"
  }));
};

const ChipWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputFilters__ChipWrapper",
  componentId: "sc-1eligs2-0"
})(["display:inline-flex;flex:1;flex-wrap:wrap;@supports (gap:4px){gap:", ";", "{margin:0;}}"], ({
  theme
}) => theme.space.u1, _Chip.Chip);

const InputFilters = (0, _styledComponents.default)(InputFiltersLayout).withConfig({
  displayName: "InputFilters",
  componentId: "sc-1eligs2-1"
})(["", " align-items:start;display:flex;flex-wrap:wrap;padding:", " 0;padding-left:", ";width:100%;&:focus-within{", "}", "{margin-left:", ";}", " ", "{display:none;}", "{border:none;height:30px;padding:0;&:focus-within{box-shadow:none;}input{padding:0;}}"], _InputText.inputCSS, ({
  theme: {
    space
  }
}) => space.u05, ({
  theme: {
    space
  }
}) => space.u2, _InputText.inputTextFocus, _Select.Select, ({
  theme: {
    space
  }
}) => space.u1, _Select.Select, _Icon.Icon, _InputText.InputText);
exports.InputFilters = InputFilters;
//# sourceMappingURL=InputFilters.js.map
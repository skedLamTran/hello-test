"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Handle = exports.handleCSS = exports.HANDLE_SIZE = void 0;

var _designTokens = require("@looker/design-tokens");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HANDLE_SIZE = _designTokens.theme.sizes.small;
exports.HANDLE_SIZE = HANDLE_SIZE;
const handleCSS = (0, _styledComponents.css)(["border:2px solid ", ";border-radius:100%;box-shadow:", ";cursor:", ";height:", ";left:0;position:relative;width:", ";"], ({
  theme: {
    colors
  }
}) => colors.background, ({
  theme
}) => theme.elevations.plus1, ({
  isMouseDown
}) => isMouseDown ? 'grabbing' : 'pointer', HANDLE_SIZE, HANDLE_SIZE);
exports.handleCSS = handleCSS;

const Handle = _styledComponents.default.div.attrs(({
  color,
  x
}) => ({
  style: {
    background: color,
    transform: `translateX(calc(${x}px - ${HANDLE_SIZE} / 2))`
  }
})).withConfig({
  displayName: "Handle",
  componentId: "sc-1ojot3e-0"
})(["", " top:", ";"], handleCSS, ({
  theme
}) => `calc(${theme.space.u3} / 2 - ${HANDLE_SIZE} / 2)`);

exports.Handle = Handle;
//# sourceMappingURL=Handle.js.map
"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LightSaturationPreview = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../../utils");

var _utils2 = require("../utils");

var _Handle = require("../Handle");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const LightSaturationPreviewLayout = ({
  className,
  hsv,
  setHsv,
  width: previewWidth
}) => {
  var _previewRef$current, _previewRef$current2;

  const previewHeight = previewWidth * 0.75;
  const handleX = hsv.s * previewWidth;
  const handleY = previewHeight - hsv.v * previewHeight;
  const previewRef = (0, _react.useRef)(null);
  const previewLeft = ((_previewRef$current = previewRef.current) === null || _previewRef$current === void 0 ? void 0 : _previewRef$current.getBoundingClientRect().left) || 0;
  const previewTop = ((_previewRef$current2 = previewRef.current) === null || _previewRef$current2 === void 0 ? void 0 : _previewRef$current2.getBoundingClientRect().top) || 0;

  const handleMouseDown = event => {
    const clickEventX = event.clientX;
    const clickEventY = event.clientY;
    const newSaturation = (clickEventX - previewLeft) / previewWidth;
    const newValue = (previewHeight - (clickEventY - previewTop)) / previewHeight;
    setHsv(_objectSpread(_objectSpread({}, hsv), {}, {
      s: newSaturation,
      v: newValue
    }));
  };

  const _useMouseDragPosition = (0, _utils.useMouseDragPosition)(previewRef.current),
        isMouseDown = _useMouseDragPosition.isMouseDown,
        mousePos = _useMouseDragPosition.mousePos;

  const previousIsMouseDown = (0, _utils.usePreviousValue)(isMouseDown);

  const handleHandleDrag = () => {
    let newSaturation = (mousePos.x - previewLeft) / previewWidth;

    if (newSaturation > 1) {
      newSaturation = 1;
    } else if (newSaturation < 0) {
      newSaturation = 0;
    }

    let newValue = (previewHeight - (mousePos.y - previewTop)) / previewHeight;

    if (newValue > 1) {
      newValue = 1;
    } else if (newValue < 0) {
      newValue = 0;
    }

    setHsv(_objectSpread(_objectSpread({}, hsv), {}, {
      s: newSaturation,
      v: newValue
    }));
  };

  (0, _react.useEffect)(() => {
    if (isMouseDown && previousIsMouseDown) {
      handleHandleDrag();
    }
  }, [mousePos]);
  const backgroundColor = (0, _utils2.simpleHsvToHex)({
    h: hsv.h,
    s: 1,
    v: 1
  });
  const color = (0, _utils2.simpleHsvToHex)(_objectSpread({}, hsv));
  return _react.default.createElement(LightSaturationPreviewContainer, {
    backgroundColor: backgroundColor,
    className: className,
    isMouseDown: isMouseDown,
    onMouseDown: handleMouseDown,
    height: previewHeight,
    ref: previewRef,
    width: previewWidth,
    "data-testid": "light-saturation-preview"
  }, _react.default.createElement(_Handle.Handle2d, {
    color: color,
    isMouseDown: isMouseDown,
    x: handleX,
    y: handleY
  }));
};

const LightSaturationPreviewContainer = _styledComponents.default.div.attrs(({
  backgroundColor
}) => ({
  style: {
    backgroundColor: backgroundColor
  }
})).withConfig({
  displayName: "LightSaturationPreview__LightSaturationPreviewContainer",
  componentId: "sc-crmpxu-0"
})(["background-image:linear-gradient(0deg,#000,transparent),linear-gradient(90deg,#fff,hsla(0,0%,100%,0));border-radius:", ";cursor:", ";height:", "px;width:", "px;"], ({
  theme
}) => theme.radii.medium, ({
  isMouseDown
}) => isMouseDown ? 'grabbing' : 'default', ({
  height
}) => height, ({
  width
}) => width);

const LightSaturationPreview = (0, _styledComponents.default)(LightSaturationPreviewLayout).withConfig({
  displayName: "LightSaturationPreview",
  componentId: "sc-crmpxu-1"
})([""]);
exports.LightSaturationPreview = LightSaturationPreview;
//# sourceMappingURL=LightSaturationPreview.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputChips = exports.validateValues = exports.splitInputValue = void 0;

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.string.trim.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.ends-with.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _InputChipsBase = require("./InputChipsBase");

const _excluded = ["values", "onChange", "chipIconLabel", "clearIconLabel", "inputValue", "onInputChange", "parseInputValue", "validate", "formatInputValue", "onValidationFail", "onDuplicate", "onBlur", "onKeyDown", "onPaste"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const splitInputValue = inputValue => {
  const commaKey = '0UX1bJKsFBFQonIIXq9oyeV40ITHwtew';
  const tabKey = 'heF6X4qMBtIti8c8U9nMhskYOQUQiXqx';
  const removedEscapes = inputValue.replace(/\\,/g, commaKey).replace(/\\\t/g, tabKey);
  const splitRegexp = `[,\\t\\n\\r]+`;
  return removedEscapes.split(new RegExp(splitRegexp)).map(value => value.replace(new RegExp(commaKey, 'g'), ',').replace(new RegExp(tabKey, 'g'), '\t'));
};

exports.splitInputValue = splitInputValue;

const validateValues = (newValues, currentValues, validate, formatInputValue) => {
  const duplicateValues = [];
  const invalidValues = [];
  const unusedValues = [];
  const validValues = [];
  newValues.forEach(val => {
    const formattedValue = formatInputValue ? formatInputValue(val) : val;
    if (formattedValue === '') return;

    if (validate && !validate(formattedValue)) {
      unusedValues.push(formattedValue);
      return invalidValues.push(formattedValue);
    } else if (currentValues && currentValues.includes(formattedValue)) {
      unusedValues.push(formattedValue);
      return duplicateValues.push(formattedValue);
    } else {
      return validValues.push(formattedValue);
    }
  });
  return {
    duplicateValues,
    invalidValues,
    unusedValues,
    validValues
  };
};

exports.validateValues = validateValues;

const trimValue = value => value.trim();

const InputChips = (0, _styledComponents.default)((0, _react.forwardRef)((_ref, ref) => {
  let values = _ref.values,
      onChange = _ref.onChange,
      chipIconLabel = _ref.chipIconLabel,
      clearIconLabel = _ref.clearIconLabel,
      controlledInputValue = _ref.inputValue,
      onInputChange = _ref.onInputChange,
      _ref$parseInputValue = _ref.parseInputValue,
      parseInputValue = _ref$parseInputValue === void 0 ? splitInputValue : _ref$parseInputValue,
      validate = _ref.validate,
      _ref$formatInputValue = _ref.formatInputValue,
      formatInputValue = _ref$formatInputValue === void 0 ? trimValue : _ref$formatInputValue,
      onValidationFail = _ref.onValidationFail,
      onDuplicate = _ref.onDuplicate,
      onBlur = _ref.onBlur,
      onKeyDown = _ref.onKeyDown,
      onPaste = _ref.onPaste,
      props = _objectWithoutProperties(_ref, _excluded);

  const isControlled = (0, _utils.useControlWarn)({
    controllingProps: ['inputValue', 'onInputChange'],
    isControlledCheck: () => controlledInputValue !== undefined && onInputChange !== undefined,
    name: 'InputChips'
  });

  const _useState = (0, _react.useState)(''),
        _useState2 = _slicedToArray(_useState, 2),
        uncontrolledValue = _useState2[0],
        setUncontrolledValue = _useState2[1];

  const inputValue = isControlled ? controlledInputValue || '' : uncontrolledValue;

  const setInputValue = (val, event) => {
    if (!isControlled) {
      setUncontrolledValue(val);
    }

    if (val !== inputValue) {
      onInputChange && onInputChange(val, event);
    }
  };

  const updateValues = newInputValue => {
    const inputValues = parseInputValue(newInputValue || inputValue);

    const _validateValues = validateValues(inputValues, values, validate, formatInputValue),
          duplicateValues = _validateValues.duplicateValues,
          invalidValues = _validateValues.invalidValues,
          unusedValues = _validateValues.unusedValues,
          validValues = _validateValues.validValues;

    const updatedInputValue = unusedValues.join(', ');
    const updatedValues = validValues.length && [...values, ...validValues];

    if (updatedValues) {
      onChange(updatedValues);
    }

    if (invalidValues.length > 0) {
      onValidationFail && onValidationFail(invalidValues);
    }

    if (duplicateValues.length > 0) {
      onDuplicate && onDuplicate(duplicateValues);
    }

    setInputValue(updatedInputValue);
  };

  const handleBlur = () => {
    updateValues();
  };

  const handleKeyDown = e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      updateValues();
    }
  };

  const pastedValue = (0, _react.useRef)();

  const handlePaste = e => {
    pastedValue.current = e.clipboardData.getData('Text');
  };

  const handleInputChange = (value, event) => {
    if (pastedValue.current || value.endsWith(',') && !value.endsWith('\\,')) {
      updateValues(pastedValue.current || value);
      pastedValue.current = null;
    } else {
      setInputValue(value, event);
    }
  };

  const wrappedEvents = {
    onBlur: (0, _utils.useWrapEvent)(handleBlur, onBlur),
    onKeyDown: (0, _utils.useWrapEvent)(handleKeyDown, onKeyDown),
    onPaste: (0, _utils.useWrapEvent)(handlePaste, onPaste)
  };
  return _react.default.createElement(_InputChipsBase.InputChipsBase, _extends({
    ref: ref,
    values: values,
    onChange: onChange,
    chipIconLabel: chipIconLabel,
    clearIconLabel: clearIconLabel,
    inputValue: inputValue,
    onInputChange: handleInputChange
  }, wrappedEvents, props));
})).withConfig({
  displayName: "InputChips",
  componentId: "sc-6zpztz-0"
})([""]);
exports.InputChips = InputChips;
//# sourceMappingURL=InputChips.js.map
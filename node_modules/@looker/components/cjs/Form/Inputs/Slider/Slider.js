"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0;

var _react = _interopRequireWildcard(require("react"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

const _excluded = ["min", "max", "value", "step", "onChange", "name", "id", "className", "disabled"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const SliderInternal = (0, _react.forwardRef)((_ref, ref) => {
  let _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 10 : _ref$max,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? 0 : _ref$value,
      step = _ref.step,
      onChange = _ref.onChange,
      name = _ref.name,
      id = _ref.id,
      className = _ref.className,
      disabled = _ref.disabled,
      restProps = _objectWithoutProperties(_ref, _excluded);

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocused = _useState2[0],
        setIsFocused = _useState2[1];

  const _useState3 = (0, _react.useState)(value),
        _useState4 = _slicedToArray(_useState3, 2),
        internalValue = _useState4[0],
        setInternalValue = _useState4[1];

  if (min > max) {
    console.warn(`Unable to render <Slider /> because the 'min' prop was set greater than 'max' value. MIN: ${min}, MAX: ${max}`);
    return null;
  }

  const boundSliderValue = v => Math.min(Math.max(v, min), max);

  const displayValue = (0, _isFunction.default)(onChange) ? boundSliderValue(value) : boundSliderValue(internalValue);
  const fillPercent = Math.round((displayValue - min) / (max - min) * 100);

  const handleFocus = () => {
    setIsFocused(true);
  };

  const handleUnfocus = () => {
    setIsFocused(false);
  };

  const internalChangeHandler = event => {
    const evtValue = event.target.value;
    setInternalValue(parseFloat(evtValue));
  };

  const handleChange = (0, _isFunction.default)(onChange) ? onChange : internalChangeHandler;
  return _react.default.createElement("div", {
    className: className,
    "data-testid": "container"
  }, _react.default.createElement(SliderValueWrapper, null, _react.default.createElement(SliderValue, {
    disabled: disabled,
    isFocused: isFocused,
    offsetPercent: fillPercent
  }, displayValue)), _react.default.createElement(SliderTrack, null, _react.default.createElement(SliderFill, {
    offsetPercent: fillPercent,
    disabled: disabled
  }), _react.default.createElement(SliderThumb, {
    isFocused: isFocused,
    offsetPercent: fillPercent,
    disabled: disabled
  })), _react.default.createElement(SliderInput, {
    disabled: disabled,
    id: id,
    isFocused: isFocused,
    max: max,
    min: min,
    name: name,
    onChange: handleChange,
    step: step,
    offsetPercent: fillPercent,
    value: displayValue,
    "aria-labelledby": restProps['aria-labelledby'],
    "aria-describedby": restProps['aria-describedby'],
    "data-testid": "slider-input",
    ref: ref,
    onBlur: handleUnfocus,
    onFocus: handleFocus
  }));
});
const sliderThumbCss = (0, _styledComponents.css)(["height:16px;visibility:hidden;width:16px;"]);

const SliderThumb = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderThumb",
  componentId: "sc-1q2hgcp-0"
})(["border-radius:100%;left:", ";position:absolute;top:-6px;transform:translateX(-50%);transition:transform 250ms,box-shadow 250ms;", ""], ({
  offsetPercent = 0
}) => `${offsetPercent}%`, ({
  theme: {
    colors
  },
  isFocused,
  disabled
}) => (0, _styledComponents.css)(["background:", ";border:3px solid ", ";height:16px;width:16px;", " ", ""], colors.field, colors.key, isFocused && 'border-width: 5px;', disabled && `border-color: ${colors.neutral};`));

const SliderInput = _styledComponents.default.input.attrs(() => ({
  type: 'range'
})).withConfig({
  displayName: "Slider__SliderInput",
  componentId: "sc-1q2hgcp-1"
})(["background:transparent;display:block;height:22px;left:8px;margin:0;position:relative;-webkit-appearance:none;width:calc(100% - 16px);&::-webkit-slider-thumb{-webkit-appearance:none;", "}&::-moz-range-thumb{", "}&::-ms-thumb{", "}&::-ms-track{background:transparent;border-color:transparent;color:transparent;cursor:pointer;width:100%;}&::-moz-focus-outer{border:none;}&:focus{outline:none;}"], sliderThumbCss, sliderThumbCss, sliderThumbCss);

const SliderTrack = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderTrack",
  componentId: "sc-1q2hgcp-2"
})(["background:", ";border-radius:", ";height:4px;left:16px;margin-top:-2px;position:absolute;top:50%;width:calc(100% - 32px);"], ({
  theme
}) => theme.colors.ui2, ({
  theme
}) => theme.radii.small);

const SliderFill = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderFill",
  componentId: "sc-1q2hgcp-3"
})(["background:", ";border-radius:", ";height:100%;width:", "%;"], ({
  theme: {
    colors
  },
  disabled
}) => disabled ? colors.neutral : colors.key, ({
  theme
}) => theme.radii.small, ({
  offsetPercent
}) => offsetPercent);

const SliderValue = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderValue",
  componentId: "sc-1q2hgcp-4"
})(["background:", ";border-radius:1rem;color:", ";left:", "%;padding:0 0.5rem;position:absolute;text-align:center;transform:translateX(-50%) translateY(-0.9rem);user-select:none;"], ({
  theme,
  isFocused
}) => isFocused && theme.colors.keyAccent, ({
  theme: {
    colors
  },
  disabled
}) => disabled ? colors.neutral : colors.key, ({
  offsetPercent
}) => offsetPercent);

const SliderValueWrapper = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderValueWrapper",
  componentId: "sc-1q2hgcp-5"
})(["margin:0 auto;position:relative;width:calc(100% - 30px);"]);

const Slider = (0, _styledComponents.default)(SliderInternal).attrs(({
  fontSize = 'small',
  lineHeight = 'xsmall',
  mt = 'medium',
  width = '100%'
}) => ({
  fontSize,
  lineHeight,
  mt,
  width
})).withConfig({
  displayName: "Slider",
  componentId: "sc-1q2hgcp-6"
})(["", " ", " ", " ", " position:relative;"], _designTokens.reset, _designTokens.space, _designTokens.width, _designTokens.typography);
exports.Slider = Slider;
SliderInternal.displayName = 'Slider';
//# sourceMappingURL=Slider.js.map
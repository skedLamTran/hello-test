"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineInputText = exports.InlineInputTextBase = void 0;

var _react = _interopRequireWildcard(require("react"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _InputProps = require("../InputProps");

var _innerInputStyle = require("../innerInputStyle");

const _excluded = ["className", "defaultValue", "onChange", "placeholder", "type", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const InlineInputTextLayout = (0, _react.forwardRef)((_ref, ref) => {
  let className = _ref.className,
      defaultValue = _ref.defaultValue,
      onChange = _ref.onChange,
      placeholder = _ref.placeholder,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'text' : _ref$type,
      valueProp = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  const _useState = (0, _react.useState)(valueProp || defaultValue || ''),
        _useState2 = _slicedToArray(_useState, 2),
        value = _useState2[0],
        setValueChange = _useState2[1];

  const displayValue = (0, _isFunction.default)(onChange) ? valueProp : value;

  const handleValueChange = event => {
    setValueChange(event.currentTarget.value);
  };

  const handleChange = (0, _isFunction.default)(onChange) ? onChange : handleValueChange;
  return _react.default.createElement("span", {
    className: className
  }, _react.default.createElement(StyledInput, _extends({
    onChange: handleChange,
    value: displayValue,
    placeholder: placeholder,
    type: type,
    ref: ref
  }, (0, _designTokens.omitStyledProps)((0, _InputProps.pickInputProps)(props)))), _react.default.createElement(StyledText, null, displayValue || placeholder || ' '));
});
InlineInputTextLayout.displayName = 'InlineInputTextLayout';

const StyledInput = _styledComponents.default.input.withConfig({
  displayName: "InlineInputText__StyledInput",
  componentId: "sc-1nk1o3l-0"
})(["", " cursor:", ";font:inherit;left:0;padding:0;position:absolute;text-align:inherit;text-transform:inherit;top:0;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{appearance:none;}&[type='number']{appearance:textfield;}"], _innerInputStyle.innerInputStyle, ({
  readOnly,
  disabled
}) => readOnly || disabled ? 'not-allowed' : undefined);

const StyledText = _styledComponents.default.span.withConfig({
  displayName: "InlineInputText__StyledText",
  componentId: "sc-1nk1o3l-1"
})(["align-self:center;color:transparent;line-height:inherit;max-width:100%;overflow:hidden;text-align:inherit;white-space:pre;"]);

const InlineInputTextBase = (0, _styledComponents.default)(InlineInputTextLayout).withConfig({
  displayName: "InlineInputText__InlineInputTextBase",
  componentId: "sc-1nk1o3l-2"
})(["display:inline-flex;justify-content:center;min-width:2rem;position:relative;"]);
exports.InlineInputTextBase = InlineInputTextBase;
const InlineInputText = (0, _styledComponents.default)(InlineInputTextBase).withConfig({
  displayName: "InlineInputText",
  componentId: "sc-1nk1o3l-3"
})(["", " border:none;border-bottom:1px dashed;border-bottom-color:", ";color:inherit;flex-direction:column;max-width:100%;overflow:hidden;text-align:inherit;:focus,:hover{background-color:", ";border-bottom-color:", ";outline:none;}:focus{border-bottom-style:solid;}:disabled,:hover{border-bottom-color:", ";}:hover{border-bottom-color:", ";}input:disabled{color:", ";-webkit-text-fill-color:", ";}"], _designTokens.typography, ({
  theme,
  underlineOnlyOnHover,
  simple,
  readOnly
}) => underlineOnlyOnHover || simple || readOnly ? 'transparent' : theme.colors.ui3, ({
  theme
}) => theme.colors.ui1, ({
  theme
}) => theme.colors.key, ({
  theme
}) => theme.colors.text1, ({
  readOnly
}) => readOnly && 'transparent', ({
  theme
}) => theme.colors.text1, ({
  theme
}) => theme.colors.text1);
exports.InlineInputText = InlineInputText;
//# sourceMappingURL=InlineInputText.js.map
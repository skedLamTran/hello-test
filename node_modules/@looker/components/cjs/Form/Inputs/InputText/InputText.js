"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputText = exports.inputCSS = exports.inputTextValidation = exports.inputTextDisabled = exports.inputTextFocus = exports.inputTextHover = void 0;

var _omit = _interopRequireDefault(require("lodash/omit"));

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _utils = require("../../../utils");

var _constants = require("../../constants");

var _InlineInputText = require("../InlineInputText");

var _InputProps = require("../InputProps");

var _innerInputStyle = require("../innerInputStyle");

var _height = require("../height");

var _After = require("./After");

var _Before = require("./Before");

const _excluded = ["autoResize", "children", "className", "before", "iconBefore", "after", "iconAfter", "type", "noErrorIcon", "validationType", "onClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver", "onMouseUp"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const InputComponent = (0, _react.forwardRef)((_ref, forwardedRef) => {
  let autoResize = _ref.autoResize,
      children = _ref.children,
      className = _ref.className,
      before = _ref.before,
      iconBefore = _ref.iconBefore,
      after = _ref.after,
      iconAfter = _ref.iconAfter,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'text' : _ref$type,
      noErrorIcon = _ref.noErrorIcon,
      validationType = _ref.validationType,
      onClick = _ref.onClick,
      onMouseDown = _ref.onMouseDown,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      onMouseOut = _ref.onMouseOut,
      onMouseOver = _ref.onMouseOver,
      onMouseUp = _ref.onMouseUp,
      props = _objectWithoutProperties(_ref, _excluded);

  const internalRef = (0, _react.useRef)(null);
  const ref = (0, _utils.useForkedRef)(internalRef, forwardedRef);

  const handleMouseDown = e => {
    if (!(0, _utils.targetIsButton)(e) && e.target !== internalRef.current) {
      if (document.activeElement === internalRef.current) {
        e.preventDefault();
      } else {
        setTimeout(() => {
          internalRef.current && internalRef.current.focus();
        }, 0);
      }
    }
  };

  const onMouseDownWrapped = (0, _utils.useWrapEvent)(handleMouseDown, onMouseDown);

  if (before && iconBefore) {
    console.warn('Use before or iconBefore, but not both at the same time.');
    return null;
  }

  if (after && iconAfter) {
    console.warn('Use after or iconAfter, but not both at the same time.');
    return null;
  }

  const mouseHandlers = {
    onClick,
    onMouseDown: onMouseDownWrapped,
    onMouseEnter,
    onMouseLeave,
    onMouseOut,
    onMouseOver,
    onMouseUp
  };

  const inputProps = _objectSpread(_objectSpread({}, (0, _InputProps.pickInputProps)((0, _designTokens.omitStyledProps)(props))), {}, {
    'aria-invalid': validationType === 'error' ? true : undefined,
    type
  });

  let inner = _react.default.createElement(StyledInput, _extends({}, inputProps, {
    ref: ref
  }));

  if (children) {
    inner = _react.default.createElement("div", {
      className: "inner"
    }, children, _react.default.createElement(StyledInput, _extends({}, inputProps, {
      ref: ref
    })));
  } else if (autoResize) {
    inner = _react.default.createElement(_InlineInputText.InlineInputTextBase, _extends({}, inputProps, {
      ref: ref
    }));
  }

  return _react.default.createElement("div", _extends({
    className: className
  }, mouseHandlers, (0, _designTokens.omitStyledProps)((0, _omit.default)(props, _InputProps.inputPropKeys))), _react.default.createElement(_Before.Before, {
    before: before,
    iconBefore: iconBefore
  }), inner, _react.default.createElement(_After.After, {
    after: after,
    iconAfter: iconAfter,
    noErrorIcon: noErrorIcon,
    validationType: validationType
  }));
});
InputComponent.displayName = 'InputComponent';

const StyledInput = _styledComponents.default.input.withConfig({
  displayName: "InputText__StyledInput",
  componentId: "sc-6cvg1f-0"
})(["", " flex:1;font-size:", ";max-width:100%;min-width:2rem;padding:0 ", ";"], _innerInputStyle.innerInputStyle, ({
  theme
}) => theme.fontSizes.small, ({
  theme: {
    space
  }
}) => space.u2);

const inputTextHover = (0, _styledComponents.css)(["border-color:", ";"], ({
  theme
}) => theme.colors.ui4);
exports.inputTextHover = inputTextHover;
const inputTextFocus = (0, _styledComponents.css)(["border-color:", ";box-shadow:inset 0 0 0 1px ", ";outline:none;"], ({
  theme
}) => theme.colors.key, ({
  theme
}) => theme.colors.key);
exports.inputTextFocus = inputTextFocus;
const inputTextDisabled = (0, _styledComponents.css)(["cursor:default;opacity:", ";&:hover{border-color:", ";}[data-disabled='true'] &{opacity:1;}"], _constants.DISABLED_OPACITY, ({
  theme
}) => theme.colors.ui3);
exports.inputTextDisabled = inputTextDisabled;
const inputTextValidation = (0, _styledComponents.css)(["", ""], props => props.validationType === 'error' ? `
      border-color: ${props.theme.colors.critical};
      &:hover {
        border-color: ${props.theme.colors.critical};
      }
      &:focus,
      &:focus-within {
        border-color: ${props.theme.colors.critical};
        box-shadow: inset 0 0 0 1px ${props.theme.colors.critical};
      }
      input {
        caret-color: ${props.theme.colors.critical};
      }
      ` : '');
exports.inputTextValidation = inputTextValidation;
const inputCSS = (0, _styledComponents.css)(["background:", ";border:1px solid ", ";border-radius:", ";color:", ";font-size:", ";"], ({
  theme: {
    colors
  }
}) => colors.field, ({
  theme: {
    colors
  }
}) => colors.ui3, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  theme: {
    colors
  }
}) => colors.text5, ({
  theme: {
    fontSizes
  }
}) => fontSizes.small);
exports.inputCSS = inputCSS;
const InputText = (0, _styledComponents.default)(InputComponent).attrs(({
  height = _height.inputHeight,
  type = 'text'
}) => ({
  height,
  type
})).withConfig({
  displayName: "InputText",
  componentId: "sc-6cvg1f-1"
})(["", " align-items:center;color:", ";cursor:text;display:inline-flex;justify-content:space-evenly;padding:", ";width:", ";", " ", " ", " ", "{height:100%;max-width:100%;width:100%;input,span{padding:0 ", ";}}&:hover{", "}&:focus,&:focus-within{", "}", " ", ""], _designTokens.reset, ({
  theme
}) => theme.colors.text, ({
  theme: {
    space
  }
}) => `${space.u05} ${space.u1}`, ({
  autoResize
}) => autoResize ? 'auto' : '100%', _designTokens.layout, _designTokens.space, inputCSS, _InlineInputText.InlineInputTextBase, ({
  theme
}) => theme.space.u2, inputTextHover, inputTextFocus, ({
  disabled
}) => disabled ? inputTextDisabled : '', inputTextValidation);
exports.InputText = InputText;
//# sourceMappingURL=InputText.js.map
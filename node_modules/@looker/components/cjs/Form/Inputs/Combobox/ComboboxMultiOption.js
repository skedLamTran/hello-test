"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxMultiOption = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _FauxCheckbox = require("../Checkbox/FauxCheckbox");

var _CheckMark = require("../Checkbox/CheckMark");

var _ComboboxContext = require("./ComboboxContext");

var _ComboboxOption = require("./ComboboxOption");

var _ComboboxOptionIndicator = require("./ComboboxOptionIndicator");

var _useAddOptionToContext = require("./utils/useAddOptionToContext");

var _useOptionEvents = require("./utils/useOptionEvents");

var _useOptionStatus2 = require("./utils/useOptionStatus");

var _useOptionScroll = require("./utils/useOptionScroll");

const _excluded = ["children", "indicator", "highlightText", "scrollIntoView"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ComboboxMultiOption = (0, _styledComponents.default)((0, _react.forwardRef)((_ref, forwardedRef) => {
  let children = _ref.children,
      indicator = _ref.indicator,
      _ref$highlightText = _ref.highlightText,
      highlightText = _ref$highlightText === void 0 ? true : _ref$highlightText,
      scrollIntoView = _ref.scrollIntoView,
      props = _objectWithoutProperties(_ref, _excluded);

  const label = props.label,
        value = props.value;
  (0, _useAddOptionToContext.useAddOptionToContext)(_ComboboxContext.ComboboxMultiContext, value, label, scrollIntoView);
  const optionEvents = (0, _useOptionEvents.useOptionEvents)(props, _ComboboxContext.ComboboxMultiContext);

  const _useOptionStatus = (0, _useOptionStatus2.useOptionStatus)(_ComboboxContext.ComboboxMultiContext, value),
        isActive = _useOptionStatus.isActive,
        isSelected = _useOptionStatus.isSelected;

  const scrollRef = (0, _useOptionScroll.useOptionScroll)(_ComboboxContext.ComboboxMultiContext, value, label, scrollIntoView, isActive);
  const ref = (0, _utils.useForkedRef)(scrollRef, forwardedRef);
  return _react.default.createElement(_ComboboxOption.ComboboxOptionWrapper, _extends({}, props, optionEvents, {
    ref: ref,
    "aria-selected": isActive,
    isSelected: isSelected
  }), _react.default.createElement(_ComboboxOptionIndicator.ComboboxOptionIndicator, {
    indicator: indicator,
    isActive: isActive,
    isSelected: isSelected,
    isMulti: true
  }, _react.default.createElement(_FauxCheckbox.FauxCheckbox, {
    isSelected: isSelected
  }, _react.default.createElement(_CheckMark.CheckMark, null))), children || _react.default.createElement(_ComboboxOption.ComboboxOptionText, {
    highlightText: highlightText
  }));
})).attrs(({
  color = 'text4',
  display = 'flex',
  fontSize = 'small',
  lineHeight = 'small',
  px = 'xsmall',
  py = 'xxsmall'
}) => ({
  color,
  display,
  fontSize,
  lineHeight,
  px,
  py
})).withConfig({
  displayName: "ComboboxMultiOption",
  componentId: "sc-t8w536-0"
})(["", " ", "{margin-top:1px;}"], _ComboboxOption.comboboxOptionStyle, _FauxCheckbox.FauxCheckbox);
exports.ComboboxMultiOption = ComboboxMultiOption;
//# sourceMappingURL=ComboboxMultiOption.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxMulti = exports.ComboboxMultiInternal = void 0;

require("core-js/modules/es.array.iterator.js");

var _every = _interopRequireDefault(require("lodash/every"));

var _isMatch = _interopRequireDefault(require("lodash/isMatch"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _useFocusManagement = require("./utils/useFocusManagement");

var _state = require("./utils/state");

var _ComboboxContext = require("./ComboboxContext");

var _Combobox = require("./Combobox");

var _useComboboxRefs2 = require("./utils/useComboboxRefs");

var _useComboboxToggle = require("./utils/useComboboxToggle");

var _useScrollState = require("./utils/useScrollState");

const _excluded = ["openOnFocus", "openOnClick", "onChange", "values", "defaultValues", "onClose", "onOpen", "id"],
      _excluded2 = ["ref"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function compareOptions(optionsA, optionsB) {
  return (0, _every.default)(optionsA, optionA => optionsB.find(optionB => (0, _isMatch.default)(optionA, optionB)));
}

const ComboboxMultiInternal = (0, _react.forwardRef)((_ref, forwardedRef) => {
  let _ref$openOnFocus = _ref.openOnFocus,
      openOnFocus = _ref$openOnFocus === void 0 ? false : _ref$openOnFocus,
      _ref$openOnClick = _ref.openOnClick,
      openOnClick = _ref$openOnClick === void 0 ? true : _ref$openOnClick,
      onChange = _ref.onChange,
      values = _ref.values,
      defaultValues = _ref.defaultValues,
      onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      propsID = _ref.id,
      rest = _objectWithoutProperties(_ref, _excluded);

  const initialValues = values || defaultValues;
  const initialData = {
    options: initialValues || []
  };

  const _useReducerMachine = (0, _state.useReducerMachine)(_state.reducerMulti, _objectSpread(_objectSpread({}, _ComboboxContext.defaultMultiData), initialData), {
    inputValues: [],
    options: []
  }),
        _useReducerMachine2 = _slicedToArray(_useReducerMachine, 3),
        state = _useReducerMachine2[0],
        data = _useReducerMachine2[1],
        transition = _useReducerMachine2[2];

  const lastActionType = data.lastActionType,
        options = data.options;

  if (values !== undefined && (options.length !== values.length || !compareOptions(options, values))) {
    transition && transition(_state.ComboboxActionType.SELECT_SILENT, {
      options: values
    });
  }

  const focusManagement = (0, _useFocusManagement.useFocusManagement)(lastActionType);
  const id = (0, _utils.useID)(propsID);
  const isVisible = (0, _useComboboxToggle.useComboboxToggle)(state, options, onOpen, onClose);

  const _useComboboxRefs = (0, _useComboboxRefs2.useComboboxRefs)(forwardedRef),
        ref = _useComboboxRefs.ref,
        commonRefs = _objectWithoutProperties(_useComboboxRefs, _excluded2);

  const scrollState = (0, _useScrollState.useScrollState)();

  const context = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, commonRefs), focusManagement), scrollState), {}, {
    data,
    id,
    isVisible,
    onChange,
    openOnClick,
    openOnFocus,
    state,
    transition
  });

  return _react.default.createElement(_ComboboxContext.ComboboxMultiContext.Provider, {
    value: context
  }, _react.default.createElement(_Combobox.ComboboxWrapper, _extends({
    id: id
  }, rest, {
    isVisible: isVisible,
    ref: ref
  })));
});
exports.ComboboxMultiInternal = ComboboxMultiInternal;
ComboboxMultiInternal.displayName = 'ComboboxMultiInternal';
const ComboboxMulti = (0, _styledComponents.default)(ComboboxMultiInternal).attrs(({
  display = 'flex'
}) => ({
  display
})).withConfig({
  displayName: "ComboboxMulti",
  componentId: "sc-1okouq3-0"
})([""]);
exports.ComboboxMulti = ComboboxMulti;
//# sourceMappingURL=ComboboxMulti.js.map
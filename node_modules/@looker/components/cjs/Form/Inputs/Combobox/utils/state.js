"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOptionsFromValues = getOptionsFromValues;
exports.useReducerMachine = useReducerMachine;
exports.reducerMulti = exports.reducer = exports.stateChart = exports.ComboboxActionType = exports.ComboboxState = void 0;

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

var _xorWith = _interopRequireDefault(require("lodash/xorWith"));

var _react = require("react");

var _getComboboxText = require("./getComboboxText");

var _parseOption = require("./parseOption");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let ComboboxState;
exports.ComboboxState = ComboboxState;

(function (ComboboxState) {
  ComboboxState["IDLE"] = "IDLE";
  ComboboxState["SUGGESTING"] = "SUGGESTING";
  ComboboxState["NAVIGATING"] = "NAVIGATING";
  ComboboxState["INTERACTING"] = "INTERACTING";
})(ComboboxState || (exports.ComboboxState = ComboboxState = {}));

let ComboboxActionType;
exports.ComboboxActionType = ComboboxActionType;

(function (ComboboxActionType) {
  ComboboxActionType["CLEAR"] = "CLEAR";
  ComboboxActionType["CHANGE"] = "CHANGE";
  ComboboxActionType["CHANGE_SILENT"] = "CHANGE_SILENT";
  ComboboxActionType["CHANGE_VALUES"] = "CHANGE_VALUES";
  ComboboxActionType["NAVIGATE"] = "NAVIGATE";
  ComboboxActionType["SELECT_WITH_KEYBOARD"] = "SELECT_WITH_KEYBOARD";
  ComboboxActionType["SELECT_WITH_CLICK"] = "SELECT_WITH_CLICK";
  ComboboxActionType["SELECT_SILENT"] = "SELECT_SILENT";
  ComboboxActionType["ESCAPE"] = "ESCAPE";
  ComboboxActionType["BLUR"] = "BLUR";
  ComboboxActionType["INTERACT"] = "INTERACT";
  ComboboxActionType["FOCUS"] = "FOCUS";
})(ComboboxActionType || (exports.ComboboxActionType = ComboboxActionType = {}));

const stateChart = {
  initial: ComboboxState.IDLE,
  states: {
    [ComboboxState.IDLE]: {
      on: {
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.IDLE,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.IDLE,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.IDLE
      }
    },
    [ComboboxState.SUGGESTING]: {
      on: {
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.SUGGESTING,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
        [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.SUGGESTING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.SUGGESTING,
        [ComboboxActionType.INTERACT]: ComboboxState.INTERACTING
      }
    },
    [ComboboxState.NAVIGATING]: {
      on: {
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.NAVIGATING,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.NAVIGATING,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_WITH_KEYBOARD]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.NAVIGATING,
        [ComboboxActionType.INTERACT]: ComboboxState.INTERACTING
      }
    },
    [ComboboxState.INTERACTING]: {
      on: {
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.INTERACTING,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.INTERACTING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.INTERACTING
      }
    }
  }
};
exports.stateChart = stateChart;

const findNavigationValue = (state, action) => {
  if (action.option) {
    return action.option;
  } else if (action.persistSelection) {
    const singularState = state;
    const multiState = state;

    if (singularState.option) {
      return singularState.option;
    } else if (multiState.options) {
      return multiState.navigationOption || multiState.options[multiState.options.length - 1];
    } else {
      return undefined;
    }
  } else {
    return undefined;
  }
};

const reducer = (data, action) => {
  const nextState = _objectSpread({}, data);

  if (action.type.indexOf('_SILENT') === -1) {
    nextState.lastActionType = action.type;
  }

  switch (action.type) {
    case ComboboxActionType.CHANGE:
    case ComboboxActionType.CHANGE_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: action.inputValue
      });

    case ComboboxActionType.NAVIGATE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    case ComboboxActionType.CLEAR:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: undefined,
        option: undefined
      });

    case ComboboxActionType.BLUR:
    case ComboboxActionType.ESCAPE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: action.inputValue || (0, _getComboboxText.getComboboxText)(data.option),
        navigationOption: undefined
      });

    case ComboboxActionType.SELECT_WITH_CLICK:
    case ComboboxActionType.SELECT_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: (0, _getComboboxText.getComboboxText)(action.option),
        navigationOption: undefined,
        option: action.option
      });

    case ComboboxActionType.SELECT_WITH_KEYBOARD:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: (0, _getComboboxText.getComboboxText)(data.navigationOption),
        navigationOption: undefined,
        option: data.navigationOption
      });

    case ComboboxActionType.INTERACT:
      return nextState;

    case ComboboxActionType.FOCUS:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    default:
      throw new Error(`Unknown action ${action.type}`);
  }
};

exports.reducer = reducer;

function getOptionsFromValues(currentOptions, newValues) {
  if (!newValues) return [];
  return newValues.reduce((acc, value) => {
    const valueAsOption = (0, _parseOption.parseOption)(value);
    const matchingOption = currentOptions.find(option => option.value === valueAsOption.value);
    const duplicateOption = acc.find(option => option.value === valueAsOption.value);

    if (!duplicateOption) {
      if (matchingOption) {
        return [...acc, matchingOption];
      } else {
        return [...acc, valueAsOption];
      }
    }

    return acc;
  }, []);
}

const reducerMulti = (data, action) => {
  const nextState = _objectSpread({}, data);

  if (action.type.indexOf('_SILENT') === -1) {
    nextState.lastActionType = action.type;
  }

  switch (action.type) {
    case ComboboxActionType.CHANGE:
    case ComboboxActionType.CHANGE_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: action.inputValue
      });

    case ComboboxActionType.CHANGE_VALUES:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: undefined,
        options: getOptionsFromValues(nextState.options, action.inputValues)
      });

    case ComboboxActionType.NAVIGATE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    case ComboboxActionType.CLEAR:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: undefined,
        options: []
      });

    case ComboboxActionType.BLUR:
    case ComboboxActionType.ESCAPE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: action.inputValue || '',
        navigationOption: undefined
      });

    case ComboboxActionType.SELECT_WITH_CLICK:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: findNavigationValue(nextState, action),
        options: (0, _xorWith.default)(nextState.options, action.option ? [action.option] : [], (o1, o2) => o1.value === o2.value)
      });

    case ComboboxActionType.SELECT_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: undefined,
        options: action.options || []
      });

    case ComboboxActionType.SELECT_WITH_KEYBOARD:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: findNavigationValue(nextState, action),
        options: (0, _xorWith.default)(nextState.options, data.navigationOption ? [data.navigationOption] : [], (o1, o2) => o1.value === o2.value)
      });

    case ComboboxActionType.INTERACT:
      return nextState;

    case ComboboxActionType.FOCUS:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    default:
      throw new Error(`Unknown action ${action.type}`);
  }
};

exports.reducerMulti = reducerMulti;

function useReducerMachine(reducerFn, initialData, defaultPayload) {
  const stateRef = (0, _react.useRef)(stateChart.initial);

  const _useReducer = (0, _react.useReducer)(reducerFn, initialData),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        data = _useReducer2[0],
        dispatch = _useReducer2[1];

  function transition(action, payload = defaultPayload) {
    const currentState = stateChart.states[stateRef.current];
    const nextState = currentState.on[action];

    if (!nextState) {
      console.warn(`Unknown action "${action}" for state "${stateRef.current}"`);
      return;
    }

    stateRef.current = nextState;
    dispatch(_objectSpread({
      state: stateRef.current,
      type: action
    }, payload));
  }

  return [stateRef.current, data, transition];
}
//# sourceMappingURL=state.js.map
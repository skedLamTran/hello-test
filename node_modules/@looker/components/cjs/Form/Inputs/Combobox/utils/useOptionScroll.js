"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOptionScroll = useOptionScroll;

var _react = require("react");

var _utils = require("../../../../utils");

var _state = require("./state");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const relativeElementVisibility = (listElement, containerScrollPosition, containerHeight = 0) => {
  const offsetTop = listElement.offsetTop;
  const isAbove = offsetTop < containerScrollPosition;
  const isBelow = offsetTop >= containerScrollPosition + containerHeight;
  return isAbove && 'above' || isBelow && 'below' || 'visible';
};

function useOptionScroll(context, value, label, scrollIntoView, isActive) {
  const _useContext = (0, _react.useContext)(context),
        transition = _useContext.transition,
        _useContext$listScrol = _useContext.listScrollPosition,
        listScrollPosition = _useContext$listScrol === void 0 ? 0 : _useContext$listScrol,
        _useContext$listClien = _useContext.listClientRect,
        listClientRect = _useContext$listClien === void 0 ? {
    height: 0
  } : _useContext$listClien;

  const _useCallbackRef = (0, _utils.useCallbackRef)(),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        newTriggerElement = _useCallbackRef2[0],
        callbackRef = _useCallbackRef2[1];

  (0, _react.useEffect)(() => {
    if (scrollIntoView) {
      if (newTriggerElement) {
        newTriggerElement.scrollIntoView();
      }

      if (!isActive) {
        transition && transition(_state.ComboboxActionType.NAVIGATE, {
          option: {
            label,
            value
          }
        });
      }
    }
  }, [newTriggerElement, scrollIntoView]);
  (0, _react.useEffect)(() => {
    if (isActive && newTriggerElement) {
      const visibility = relativeElementVisibility(newTriggerElement, listScrollPosition, listClientRect.height);

      if (visibility !== 'visible') {
        const attachToTop = visibility === 'above';
        newTriggerElement.scrollIntoView(attachToTop);
      }
    }
  }, [newTriggerElement, isActive]);
  return callbackRef;
}
//# sourceMappingURL=useOptionScroll.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxMultiList = exports.ComboboxList = exports.ComboboxUl = void 0;

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _once = _interopRequireDefault(require("lodash/once"));

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _Popover = require("../../../Popover");

var _utils = require("../../../List/utils");

var _utils2 = require("../../../utils");

var _ComboboxContext = require("./ComboboxContext");

var _useBlur = require("./utils/useBlur");

var _useKeyDown = require("./utils/useKeyDown");

var _useListWidths = require("./utils/useListWidths");

const _excluded = ["persistSelection", "closeOnSelect", "windowing", "cancelClickOutside", "indicator", "isMulti", "minWidth", "width"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ComboboxListInternal = (0, _react.forwardRef)((_ref, ref) => {
  let _ref$persistSelection = _ref.persistSelection,
      persistSelection = _ref$persistSelection === void 0 ? false : _ref$persistSelection,
      _ref$closeOnSelect = _ref.closeOnSelect,
      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,
      _ref$windowing = _ref.windowing,
      windowing = _ref$windowing === void 0 ? false : _ref$windowing,
      _ref$cancelClickOutsi = _ref.cancelClickOutside,
      cancelClickOutside = _ref$cancelClickOutsi === void 0 ? false : _ref$cancelClickOutsi,
      indicator = _ref.indicator,
      isMulti = _ref.isMulti,
      minWidth = _ref.minWidth,
      width = _ref.width,
      props = _objectWithoutProperties(_ref, _excluded);

  const context = (0, _react.useContext)(_ComboboxContext.ComboboxContext);
  const contextMulti = (0, _react.useContext)(_ComboboxContext.ComboboxMultiContext);
  const contextToUse = isMulti ? contextMulti : context;
  const persistSelectionPropRef = contextToUse.persistSelectionPropRef,
        closeOnSelectPropRef = contextToUse.closeOnSelectPropRef,
        windowingPropRef = contextToUse.windowingPropRef,
        indicatorPropRef = contextToUse.indicatorPropRef,
        wrapperElement = contextToUse.wrapperElement,
        isVisible = contextToUse.isVisible,
        optionsRef = contextToUse.optionsRef,
        listRef = contextToUse.listRef,
        setListScrollPosition = contextToUse.setListScrollPosition,
        setListClientRect = contextToUse.setListClientRect,
        isScrollingRef = contextToUse.isScrollingRef,
        id = contextToUse.id;
  if (persistSelectionPropRef) persistSelectionPropRef.current = persistSelection;
  if (closeOnSelectPropRef) closeOnSelectPropRef.current = closeOnSelect;
  if (indicatorPropRef) indicatorPropRef.current = indicator;
  (0, _utils2.useSafeLayoutEffect)(() => {
    if (windowingPropRef) windowingPropRef.current = windowing;
    if (optionsRef) optionsRef.current = [];
    return () => {
      if (optionsRef) optionsRef.current = [];
    };
  }, [optionsRef, isVisible, windowing, windowingPropRef]);
  const handleKeyDown = (0, _useKeyDown.useKeyDown)();
  const useBlurSingle = (0, _useBlur.useBlur)(_ComboboxContext.ComboboxContext);
  const useBlurMulti = (0, _useBlur.useBlur)(_ComboboxContext.ComboboxMultiContext);
  const handleBlur = isMulti ? useBlurMulti : useBlurSingle;
  const widthProps = (0, _useListWidths.useListWidths)({
    isVisible,
    minWidth,
    width,
    wrapperElement
  });

  const content = _react.default.createElement(ComboboxUl, _extends({}, props, widthProps, {
    isMulti: isMulti,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur,
    ref: ref,
    role: "listbox",
    id: `listbox-${id}`,
    tabIndex: -1
  }));

  const setOpen = isOpen => {
    if (!isOpen) {
      handleBlur();
    }
  };

  const _usePopover = (0, _Popover.usePopover)({
    cancelClickOutside,
    content,
    focusTrap: false,
    isOpen: isVisible,
    placement: 'bottom-start',
    setOpen,
    triggerElement: wrapperElement,
    triggerToggle: false
  }),
        popover = _usePopover.popover,
        contentContainer = _usePopover.contentContainer,
        popperInstanceRef = _usePopover.popperInstanceRef;

  if (popperInstanceRef.current && listRef) {
    listRef.current = popperInstanceRef.current.state.elements.popper;
  }

  const valueLength = isMulti ? contextMulti.data.options.length : 1;
  (0, _react.useEffect)(() => {
    popperInstanceRef.current && popperInstanceRef.current.update();
  }, [popperInstanceRef, valueLength]);
  const resizeListener = (0, _react.useCallback)(() => {
    setListClientRect === null || setListClientRect === void 0 ? void 0 : setListClientRect(contentContainer === null || contentContainer === void 0 ? void 0 : contentContainer.getBoundingClientRect());
  }, [setListClientRect, contentContainer]);
  (0, _utils2.useResize)(contentContainer, resizeListener);
  (0, _react.useEffect)(() => {
    const setListClientRectOnce = (0, _once.default)(containerElement => {
      setListClientRect && setListClientRect(containerElement.getBoundingClientRect());
    });

    const updateScrollState = containerElement => {
      setListClientRectOnce(containerElement);
      setListScrollPosition === null || setListScrollPosition === void 0 ? void 0 : setListScrollPosition(containerElement.scrollTop);
    };

    const timeoutValue = 50;
    let t;
    const scrollListener = (0, _throttle.default)(() => {
      if (contentContainer) {
        updateScrollState(contentContainer);
        if (isScrollingRef) isScrollingRef.current = true;
        clearTimeout(t);
        t = setTimeout(() => {
          if (isScrollingRef) isScrollingRef.current = false;
        }, timeoutValue + 1);
      }
    }, timeoutValue);

    if (contentContainer) {
      contentContainer.addEventListener('scroll', scrollListener);
      updateScrollState(contentContainer);
    }

    return () => {
      contentContainer && contentContainer.removeEventListener('scroll', scrollListener);
      setListScrollPosition && setListScrollPosition(0);
      setListClientRect && setListClientRect(undefined);
    };
  }, [contentContainer]);
  return popover || null;
});
ComboboxListInternal.displayName = 'ComboboxListInternal';

const ComboboxUl = _styledComponents.default.ul.withConfig({
  shouldForwardProp: _designTokens.shouldForwardProp
}).withConfig({
  displayName: "ComboboxList__ComboboxUl",
  componentId: "sc-1ban10u-0"
})(["", " ", " ", " list-style-type:none;margin:0;max-height:30rem;outline:none;position:relative;", " ", ""], _designTokens.reset, _designTokens.typography, _designTokens.space, _designTokens.layout, _utils.listPadding);

exports.ComboboxUl = ComboboxUl;

const ComboboxList = props => _react.default.createElement(ComboboxListInternal, _extends({}, props, {
  isMulti: false
}));

exports.ComboboxList = ComboboxList;

const ComboboxMultiList = props => _react.default.createElement(ComboboxListInternal, _extends({}, props, {
  isMulti: true
}));

exports.ComboboxMultiList = ComboboxMultiList;
//# sourceMappingURL=ComboboxList.js.map
"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionContext = exports.ComboboxMultiContext = exports.ComboboxContext = exports.defaultMultiData = exports.defaultData = void 0;

var _omit = _interopRequireDefault(require("lodash/omit"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const defaultData = {
  inputValue: undefined,
  navigationOption: undefined,
  option: undefined
};
exports.defaultData = defaultData;

const defaultMultiData = _objectSpread(_objectSpread({}, (0, _omit.default)(defaultData, 'option')), {}, {
  options: []
});

exports.defaultMultiData = defaultMultiData;
const ComboboxContext = (0, _react.createContext)({
  data: defaultData
});
exports.ComboboxContext = ComboboxContext;
const ComboboxMultiContext = (0, _react.createContext)({
  data: defaultMultiData
});
exports.ComboboxMultiContext = ComboboxMultiContext;
const OptionContext = (0, _react.createContext)(undefined);
exports.OptionContext = OptionContext;
//# sourceMappingURL=ComboboxContext.js.map
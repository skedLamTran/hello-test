"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxMultiInput = exports.ComboboxMultiInputInternal = void 0;

require("core-js/modules/es.array.map.js");

var _omit = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _InputChips = require("../InputChips");

var _ComboboxContext = require("./ComboboxContext");

var _ComboboxInput = require("./ComboboxInput");

var _utils2 = require("./utils");

var _makeHash = require("./utils/makeHash");

var _state = require("./utils/state");

var _useInputEvents = require("./utils/useInputEvents");

var _useInputPropRefs = require("./utils/useInputPropRefs");

const _excluded = ["autoComplete", "inputReadOnly", "readOnly", "onClear", "onInputChange", "inputValue", "freeInput", "validate", "formatInputValue", "onValidationFail", "onDuplicate", "chipIconLabel", "clearIconLabel"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function parseInputValue(value) {
  try {
    const parsed = JSON.parse(value);

    if (Array.isArray(parsed)) {
      return parsed.map(option => typeof option === 'string' ? option : JSON.stringify(option));
    }

    return (0, _InputChips.splitInputValue)(value);
  } catch (e) {
    return (0, _InputChips.splitInputValue)(value);
  }
}

function formatTextToCopy(selectedValues) {
  let noJson = true;
  const jsonReadyValues = selectedValues.map(value => {
    try {
      JSON.parse(value);
      noJson = false;
      return value;
    } catch (e) {
      return `"${value}"`;
    }
  });

  if (noJson) {
    return (0, _InputChips.joinValues)(selectedValues);
  }

  return `[${jsonReadyValues.join(',')}]`;
}

const ComboboxMultiInputInternal = (0, _react.forwardRef)((props, forwardedRef) => {
  const _props$autoComplete = props.autoComplete,
        autoComplete = _props$autoComplete === void 0 ? true : _props$autoComplete,
        _props$inputReadOnly = props.inputReadOnly,
        inputReadOnly = _props$inputReadOnly === void 0 ? false : _props$inputReadOnly,
        _props$readOnly = props.readOnly,
        readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
        onClear = props.onClear,
        onInputChange = props.onInputChange,
        controlledInputValue = props.inputValue,
        _props$freeInput = props.freeInput,
        freeInput = _props$freeInput === void 0 ? false : _props$freeInput,
        validate = props.validate,
        formatInputValue = props.formatInputValue,
        onValidationFail = props.onValidationFail,
        onDuplicate = props.onDuplicate,
        chipIconLabel = props.chipIconLabel,
        clearIconLabel = props.clearIconLabel,
        rest = _objectWithoutProperties(props, _excluded);

  const _useContext = (0, _react.useContext)(_ComboboxContext.ComboboxMultiContext),
        _useContext$data = _useContext.data,
        navigationOption = _useContext$data.navigationOption,
        options = _useContext$data.options,
        contextInputValue = _useContext$data.inputValue,
        contextOnChange = _useContext.onChange,
        inputCallbackRef = _useContext.inputCallbackRef,
        state = _useContext.state,
        transition = _useContext.transition,
        id = _useContext.id,
        isVisible = _useContext.isVisible;

  (0, _useInputPropRefs.useInputPropRefs)(props, _ComboboxContext.ComboboxMultiContext);

  function handleClear() {
    transition && transition(_state.ComboboxActionType.CLEAR);
    contextOnChange && contextOnChange([]);
    onClear && onClear();
  }

  function handleChange(values) {
    transition && transition(_state.ComboboxActionType.CHANGE_VALUES, {
      inputValues: values
    });
    const newOptions = (0, _state.getOptionsFromValues)(options, values);
    contextOnChange && contextOnChange(newOptions);
  }

  const isInputting = (0, _react.useRef)(false);
  const handleInputValueChange = (0, _react.useCallback)(value => {
    const action = isInputting.current ? _state.ComboboxActionType.CHANGE : _state.ComboboxActionType.CHANGE_SILENT;
    transition === null || transition === void 0 ? void 0 : transition(action, {
      inputValue: value
    });
  }, [transition]);
  const latestInputValueRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    if (contextInputValue !== undefined && contextInputValue !== latestInputValueRef.current) {
      onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(contextInputValue);
      latestInputValueRef.current = contextInputValue;
    }
  }, [contextInputValue]);
  (0, _react.useEffect)(() => {
    if (controlledInputValue !== undefined) {
      handleInputValueChange(controlledInputValue);
      latestInputValueRef.current = controlledInputValue;
    }
  }, [controlledInputValue]);
  const isControlled = controlledInputValue !== undefined;
  const handleInputChange = (0, _react.useCallback)((value, event) => {
    isInputting.current = event !== undefined;

    if (!isControlled) {
      handleInputValueChange(value);
    }

    requestAnimationFrame(() => {
      isInputting.current = false;
    });
  }, [handleInputValueChange, isControlled]);
  const inputValues = options.map(_utils2.formatOptionAsString);
  let inputValue = contextInputValue || '';

  if (autoComplete && (state === _state.ComboboxState.NAVIGATING || state === _state.ComboboxState.INTERACTING) && navigationOption) {
    inputValue = (0, _utils2.getComboboxText)(navigationOption);
  }

  const wrappedOnInputChange = (0, _react.useCallback)((value, event) => {
    handleInputChange(value, event);
    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(value, event);
    latestInputValueRef.current = value;
  }, [handleInputChange, onInputChange]);
  const inputEvents = (0, _useInputEvents.useInputEvents)(props, _ComboboxContext.ComboboxMultiContext);

  function formatChip(value) {
    const option = (0, _utils2.parseOption)(value);
    return option.label || option.value;
  }

  const commonProps = _objectSpread(_objectSpread(_objectSpread({}, (0, _omit.default)(rest, 'selectOnClick')), inputEvents), {}, {
    'aria-activedescendant': navigationOption ? String((0, _makeHash.makeHash)(navigationOption ? navigationOption.value : '')) : undefined,
    'aria-autocomplete': 'both',
    autoComplete: 'off',
    chipIconLabel: chipIconLabel,
    clearIconLabel: clearIconLabel,
    formatChip,
    formatTextToCopy,
    id: `listbox-input-${id}`,
    inputReadOnly,
    inputValue,
    isVisibleOptions: isVisible,
    onChange: handleChange,
    onClear: handleClear,
    onInputChange: wrappedOnInputChange,
    readOnly,
    showCaret: true,
    values: inputValues
  });

  const ref = (0, _utils.useForkedRef)(inputCallbackRef, forwardedRef);
  return freeInput ? _react.default.createElement(_InputChips.InputChips, _extends({}, commonProps, {
    validate: validate,
    formatInputValue: formatInputValue,
    onValidationFail: onValidationFail,
    onDuplicate: onDuplicate,
    parseInputValue: parseInputValue,
    ref: ref
  })) : _react.default.createElement(_InputChips.InputChipsBase, _extends({}, commonProps, {
    ref: ref
  }));
});
exports.ComboboxMultiInputInternal = ComboboxMultiInputInternal;
ComboboxMultiInputInternal.displayName = 'ComboboxMultiInputInternal';
const ComboboxMultiInput = (0, _styledComponents.default)(ComboboxMultiInputInternal).attrs(({
  width = '100%'
}) => ({
  width
})).withConfig({
  displayName: "ComboboxMultiInput",
  componentId: "sc-17k5d0g-0"
})(["", " padding-right:0;"], _ComboboxInput.comboboxStyles);
exports.ComboboxMultiInput = ComboboxMultiInput;
//# sourceMappingURL=ComboboxMultiInput.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickInputProps = exports.getAutoFocusProps = exports.inputPropKeys = void 0;

var _pick = _interopRequireDefault(require("lodash/pick"));

const _excluded = ["autoFocus"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const inputPropKeys = ['accept', 'autoFocus', 'autoComplete', 'checked', 'data-autofocus', 'data-testid', 'defaultValue', 'defaultChecked', 'disabled', 'id', 'list', 'max', 'maxLength', 'min', 'minLength', 'multiple', 'name', 'onBlur', 'onChange', 'onClick', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onFocus', 'onKeyDown', 'onKeyPress', 'onPaste', 'placeholder', 'readOnly', 'required', 'pattern', 'step', 'tabIndex', 'value', 'aria-activedescendant', 'aria-autocomplete', 'aria-invalid', 'aria-label', 'aria-describedby', 'aria-labelledby'];
exports.inputPropKeys = inputPropKeys;

const getAutoFocusProps = autoFocus => {
  return autoFocus ? {
    autoFocus,
    'data-autofocus': 'true'
  } : {};
};

exports.getAutoFocusProps = getAutoFocusProps;

const pickInputProps = _ref => {
  let autoFocus = _ref.autoFocus,
      props = _objectWithoutProperties(_ref, _excluded);

  const inputProps = (0, _pick.default)(props, inputPropKeys);
  return _objectSpread(_objectSpread({}, getAutoFocusProps(autoFocus)), inputProps);
};

exports.pickInputProps = pickInputProps;
//# sourceMappingURL=InputProps.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioGroup = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _Fieldset = require("../../Fieldset");

var _FieldRadio = require("../../Fields/FieldRadio");

var _height = require("../height");

const _excluded = ["autoFocus", "defaultValue", "disabled", "inline", "name", "onChange", "options", "validationType", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getCheckedProps(optionValue, isControlled, value, defaultValue) {
  const key = isControlled ? 'checked' : 'defaultChecked';
  const valueToUse = isControlled ? value : defaultValue;
  return {
    [key]: valueToUse === optionValue
  };
}

const RadioGroupLayout = (0, _react.forwardRef)((_ref, ref) => {
  let autoFocus = _ref.autoFocus,
      defaultValue = _ref.defaultValue,
      disabled = _ref.disabled,
      inline = _ref.inline,
      propsName = _ref.name,
      onChange = _ref.onChange,
      options = _ref.options,
      validationType = _ref.validationType,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, _excluded);

  const name = (0, _utils.useID)(propsName);
  const isControlled = onChange !== undefined && defaultValue === undefined;
  const getChangeHandler = (0, _react.useCallback)(optionValue => {
    return onChange ? () => onChange(optionValue) : undefined;
  }, [onChange]);
  const radios = options.map((option, index) => {
    const checkedProps = getCheckedProps(option.value, isControlled, value, defaultValue);
    const autoFocusProps = index === 0 && autoFocus ? {
      autoFocus
    } : {};
    return _react.default.createElement(_FieldRadio.FieldRadio, _extends({
      detail: option.detail,
      disabled: option.disabled || disabled,
      key: option.value,
      label: option.label,
      name: name,
      onChange: getChangeHandler(option.value),
      validationType: validationType
    }, checkedProps, autoFocusProps));
  });
  return _react.default.createElement(_Fieldset.Fieldset, _extends({
    "data-testid": "radio-list",
    inline: inline,
    wrap: inline,
    gap: !inline ? 'u1' : undefined,
    width: inline ? 'auto' : undefined,
    ref: ref
  }, rest), radios);
});
RadioGroupLayout.displayName = 'RadioGroupLayout';
const RadioGroup = (0, _styledComponents.default)(RadioGroupLayout).withConfig({
  displayName: "RadioGroup",
  componentId: "sc-x72kee-0"
})(["", "{", "}"], _FieldRadio.FieldRadio, ({
  inline
}) => inline ? `line-height: ${_height.inputHeight};` : '');
exports.RadioGroup = RadioGroup;
//# sourceMappingURL=RadioGroup.js.map
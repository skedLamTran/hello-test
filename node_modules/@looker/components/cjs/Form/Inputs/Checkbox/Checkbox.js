"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = void 0;

var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _utils = require("../../../utils");

var _Ripple = require("../../../Ripple");

var _InputProps = require("../InputProps");

var _CheckMark = require("./CheckMark");

var _CheckMarkMixed = require("./CheckMarkMixed");

var _FauxCheckbox = require("./FauxCheckbox");

const _excluded = ["className", "checked", "defaultChecked", "onChange", "readOnly", "style", "validationType"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const Checkbox = (0, _styledComponents.default)((0, _react.forwardRef)((props, ref) => {
  const className = props.className,
        checked = props.checked,
        defaultChecked = props.defaultChecked,
        onChange = props.onChange,
        readOnly = props.readOnly,
        style = props.style,
        validationType = props.validationType,
        restProps = _objectWithoutProperties(props, _excluded);

  const _useState = (0, _react.useState)(!!defaultChecked),
        _useState2 = _slicedToArray(_useState, 2),
        isChecked = _useState2[0],
        setIsChecked = _useState2[1];

  const _useRipple = (0, _Ripple.useRipple)({
    color: (0, _Ripple.inputRippleColor)(isChecked !== false, validationType === 'error'),
    size: _Ripple.RIPPLE_RATIO
  }),
        callbacks = _useRipple.callbacks,
        rippleClassName = _useRipple.className,
        rippleStyle = _useRipple.style;

  const rippleHandlers = (0, _Ripple.useRippleHandlers)(callbacks, _objectSpread({}, (0, _pick.default)(restProps, _Ripple.rippleHandlerKeys)), restProps.disabled);
  const handleClick = readOnly ? undefined : e => {
    if ((0, _isUndefined.default)(checked)) {
      setIsChecked(!isChecked);
    }

    if (onChange) {
      onChange(e);
    }
  };
  (0, _react.useEffect)(() => {
    if (!(0, _isUndefined.default)(checked)) {
      setIsChecked(checked);
    }
  }, [checked]);
  return _react.default.createElement("div", _extends({
    className: (0, _utils.mergeClassNames)([className, rippleClassName]),
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }, rippleHandlers), _react.default.createElement("input", _extends({
    type: "checkbox"
  }, (0, _InputProps.pickInputProps)(restProps), {
    checked: !!isChecked,
    "aria-checked": checked,
    "aria-invalid": validationType === 'error' ? 'true' : undefined,
    onClick: handleClick,
    onChange: _noop.default,
    ref: ref
  })), _react.default.createElement(_FauxCheckbox.FauxCheckbox, {
    isSelected: !!isChecked
  }, checked === 'mixed' ? _react.default.createElement(_CheckMarkMixed.CheckMarkMixed, null) : _react.default.createElement(_CheckMark.CheckMark, null)));
})).withConfig({
  displayName: "Checkbox",
  componentId: "sc-9j2vap-0"
})(["", " ", " ", " align-items:center;display:flex;height:", ";justify-content:center;position:relative;width:", ";input{cursor:", ";height:100%;left:0;margin:0;opacity:0;position:absolute;top:0;width:100%;z-index:1;&[aria-invalid='true']{+ ", "{border-color:", ";}&:checked + ", "{background:", ";}}&:disabled{+ ", ",&:not(:checked):hover + ", "{border-color:", ";}&:checked + ", "{background:", ";}}&:not(:checked):not([aria-invalid='true']):not(:disabled){&:hover,&:focus{+ ", "{border-color:", ";}}}}"], _designTokens.reset, _designTokens.space, _Ripple.rippleStyle, ({
  theme: {
    space
  }
}) => space.u6, ({
  theme: {
    space
  }
}) => space.u6, ({
  readOnly,
  disabled
}) => readOnly || disabled ? 'not-allowed' : undefined, _FauxCheckbox.FauxCheckbox, ({
  theme
}) => theme.colors.critical, _FauxCheckbox.FauxCheckbox, ({
  theme
}) => theme.colors.critical, _FauxCheckbox.FauxCheckbox, _FauxCheckbox.FauxCheckbox, ({
  theme
}) => theme.colors.ui2, _FauxCheckbox.FauxCheckbox, ({
  theme
}) => theme.colors.ui2, _FauxCheckbox.FauxCheckbox, ({
  theme
}) => theme.colors.ui5);
exports.Checkbox = Checkbox;
//# sourceMappingURL=Checkbox.js.map
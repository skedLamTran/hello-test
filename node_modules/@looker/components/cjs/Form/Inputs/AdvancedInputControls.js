"use strict";

require("core-js/modules/es.array.index-of.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdvancedInputControls = void 0;

var _reactI18next = require("react-i18next");

var _Close = require("@styled-icons/material/Close");

var _Error = require("@styled-icons/material/Error");

var _ArrowDropDown = require("@styled-icons/material/ArrowDropDown");

var _ArrowDropUp = require("@styled-icons/material/ArrowDropUp");

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Button = require("../../Button");

var _iconButtonColor = require("../../Button/iconButtonColor");

var _Icon = require("../../Icon");

var _Text = require("../../Text");

const _excluded = ["disabled", "clearIconLabel", "isVisibleOptions", "onClear", "showCaret", "showClear", "summary", "errorIcon"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const AdvancedInputControls = (0, _styledComponents.default)(props => {
  const _useTranslation = (0, _reactI18next.useTranslation)('AdvancedInputControls'),
        t = _useTranslation.t;

  const clearIconLabelText = t('Clear Field');

  const disabled = props.disabled,
        _props$clearIconLabel = props.clearIconLabel,
        clearIconLabel = _props$clearIconLabel === void 0 ? clearIconLabelText : _props$clearIconLabel,
        isVisibleOptions = props.isVisibleOptions,
        onClear = props.onClear,
        showCaret = props.showCaret,
        showClear = props.showClear,
        summary = props.summary,
        errorIcon = props.errorIcon,
        rest = _objectWithoutProperties(props, _excluded);

  return _react.default.createElement("div", rest, summary && _react.default.createElement(_Text.Span, {
    color: "text1",
    fontSize: "small",
    style: {
      whiteSpace: 'nowrap'
    },
    pr: "u2"
  }, summary), summary && showClear && _react.default.createElement(SearchControlDivider, null), showClear && _react.default.createElement(_Button.IconButton, {
    size: "small",
    icon: _react.default.createElement(_Close.Close, null),
    label: clearIconLabel,
    onClick: onClear,
    tooltipDisabled: disabled,
    disabled: disabled,
    mr: "u1"
  }), showClear && showCaret && _react.default.createElement(SearchControlDivider, null), showCaret && _react.default.createElement(CaretIcon, {
    icon: isVisibleOptions ? _react.default.createElement(_ArrowDropUp.ArrowDropUp, null) : _react.default.createElement(_ArrowDropDown.ArrowDropDown, null),
    "data-testid": "caret",
    mr: "u1"
  }), errorIcon && _react.default.createElement(_Icon.Icon, {
    icon: _react.default.createElement(_Error.Error, null),
    color: "critical",
    mr: "u1"
  }));
}).withConfig({
  displayName: "AdvancedInputControls",
  componentId: "sc-1e7uo3l-0"
})(["align-items:center;display:flex;max-height:1.9rem;padding-right:", ";"], ({
  theme
}) => theme.space.u1);
exports.AdvancedInputControls = AdvancedInputControls;

const SearchControlDivider = _styledComponents.default.div.withConfig({
  displayName: "AdvancedInputControls__SearchControlDivider",
  componentId: "sc-1e7uo3l-1"
})(["background:", ";height:", ";margin-right:", ";width:1px;"], ({
  theme
}) => theme.colors.ui2, ({
  theme
}) => theme.space.u5, ({
  theme
}) => theme.space.u1);

const CaretIcon = (0, _styledComponents.default)(_Icon.Icon).withConfig({
  displayName: "AdvancedInputControls__CaretIcon",
  componentId: "sc-1e7uo3l-2"
})(["", " cursor:default;"], _iconButtonColor.iconButtonColor);
//# sourceMappingURL=AdvancedInputControls.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FloatingLabelField = void 0;

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _Layout = require("../../../Layout");

var _constants = require("../../constants");

var _Fieldset = require("../../Fieldset");

var _Field = require("./Field");

var _FieldDetail = require("./FieldDetail");

var _FieldLabel = require("./FieldLabel");

var _HelperText = require("./HelperText");

var _InputArea = require("./InputArea");

var _useFloatingLabel2 = require("./useFloatingLabel");

const _excluded = ["className", "externalLabel"],
      _excluded2 = ["ariaLabelOnly", "children", "detail", "disabled", "hideLabel", "id", "inline", "label", "required", "labelOffset", "hasValue", "checkValueOnBlur"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const getLabelColor = (isFocused, validationMessage) => {
  if ((validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type) === 'error') return 'critical';
  if (isFocused) return 'key';
  return undefined;
};

const FloatingLabelField = (0, _styledComponents.default)(_ref => {
  let className = _ref.className,
      propsExternalLabel = _ref.externalLabel,
      props = _objectWithoutProperties(_ref, _excluded);

  const ariaLabelOnly = props.ariaLabelOnly,
        children = props.children,
        detail = props.detail,
        disabled = props.disabled,
        hideLabel = props.hideLabel,
        id = props.id,
        inline = props.inline,
        label = props.label,
        required = props.required,
        labelOffset = props.labelOffset,
        hasValue = props.hasValue,
        checkValueOnBlur = props.checkValueOnBlur,
        rest = _objectWithoutProperties(props, _excluded2);

  const _useFloatingLabel = (0, _useFloatingLabel2.useFloatingLabel)({
    checkValueOnBlur,
    hasValue,
    labelOffset
  }),
        labelPositionClass = _useFloatingLabel.className,
        isFocused = _useFloatingLabel.isFocused,
        handlers = _useFloatingLabel.handlers,
        style = _useFloatingLabel.style;

  const _useContext = (0, _react.useContext)(_styledComponents.ThemeContext),
        externalLabel = _useContext.defaults.externalLabel;

  const _useContext2 = (0, _react.useContext)(_Fieldset.FieldsetContext),
        fieldsHideLabel = _useContext2.fieldsHideLabel;

  if (externalLabel || propsExternalLabel || !label || hideLabel || fieldsHideLabel || inline) {
    return _react.default.createElement(_Field.Field, props);
  }

  return _react.default.createElement("div", {
    className: `${className} ${labelPositionClass}`,
    style: style,
    "data-disabled": disabled
  }, _react.default.createElement(_InputArea.InputArea, handlers, children), _react.default.createElement(_FieldLabel.FieldLabel, {
    ariaLabelOnly: ariaLabelOnly,
    id: id,
    label: label,
    hideLabel: hideLabel,
    required: required,
    fontWeight: "normal",
    color: getLabelColor(isFocused, props.validationMessage)
  }), _react.default.createElement(_Layout.Space, {
    width: "auto",
    align: "start"
  }, _react.default.createElement(_HelperText.HelperText, _extends({
    id: id
  }, rest)), detail && _react.default.createElement(_FieldDetail.FieldDetail, {
    pt: "u2",
    color: "text2"
  }, detail)));
}).withConfig({
  displayName: "FloatingLabelField",
  componentId: "sc-1sw05so-0"
})(["display:", ";opacity:", ";padding-top:calc(", " / 2);position:relative;width:", ";", " label{background:", ";border-radius:", ";font-size:", ";left:calc(", " + 1px);line-height:initial;padding:0 ", ";position:absolute;top:0;transition:", "ms;}&.label-down{label{font-size:", ";pointer-events:none;transform:translate(var(--label-translate,0));}input::placeholder,textarea::placeholder{color:", ";}}& > ", "{margin:0 calc(", " + 1px);}"], ({
  autoResize
}) => autoResize ? 'inline-block' : 'block', ({
  disabled
}) => disabled ? _constants.DISABLED_OPACITY : '1', ({
  theme
}) => theme.fontSizes.xsmall, ({
  autoResize
}) => autoResize ? 'fit-content' : '100%', _designTokens.width, ({
  theme
}) => theme.colors.field, ({
  theme
}) => theme.radii.small, ({
  theme
}) => theme.fontSizes.xsmall, ({
  theme
}) => theme.space.u2, ({
  theme
}) => theme.space.u1, ({
  theme
}) => theme.transitions.rapid, ({
  theme
}) => theme.fontSizes.small, ({
  theme
}) => theme.colors.field, _Layout.Space, ({
  theme
}) => theme.space.u3);
exports.FloatingLabelField = FloatingLabelField;
//# sourceMappingURL=FloatingLabelField.js.map
"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFloatingLabel = exports.getHasValue = void 0;

var _react = require("react");

var _styledComponents = require("styled-components");

var _Portal = require("../../../Portal");

var _utils = require("../../../utils");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const defaultCheckValueOnBlur = e => {
  const target = e.currentTarget;
  const input = target.querySelector('input') || target.querySelector('textarea');
  return (input === null || input === void 0 ? void 0 : input.value) !== undefined && input.value !== '';
};

const getIsInSelectList = (nextFocusTarget, inputArea) => {
  const portalRoot = (0, _Portal.getPortalRoot)();

  if (!portalRoot.contains(nextFocusTarget)) {
    return false;
  }

  if (portalRoot.contains(inputArea)) {
    return (nextFocusTarget === null || nextFocusTarget === void 0 ? void 0 : nextFocusTarget.closest('portal-child')) !== inputArea.closest('portal-child');
  }

  return true;
};

const getHasValue = ({
  value,
  defaultValue
}) => {
  if (value !== undefined) return value !== '';
  if (defaultValue !== undefined) return defaultValue !== '';
  return false;
};

exports.getHasValue = getHasValue;

const useFloatingLabel = ({
  checkValueOnBlur = defaultCheckValueOnBlur,
  hasValue: propsHasValue,
  labelOffset = '0rem'
}) => {
  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocused = _useState2[0],
        setIsFocused = _useState2[1];

  const _useSyncedState = (0, _utils.useSyncedState)(propsHasValue),
        _useSyncedState2 = _slicedToArray(_useSyncedState, 2),
        hasValue = _useSyncedState2[0],
        setHasValue = _useSyncedState2[1];

  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);
  const style = {
    ['--label-translate']: `${labelOffset}, ${theme.space.u4}`
  };
  return {
    className: hasValue || isFocused ? 'label-up' : 'label-down',
    handlers: {
      onBlur: e => {
        if (checkValueOnBlur) {
          setHasValue(checkValueOnBlur(e));
        }

        const nextFocusTarget = (0, _utils.getNextFocusTarget)(e);
        const isInSelectList = getIsInSelectList(nextFocusTarget, e.currentTarget);

        if (nextFocusTarget && !e.currentTarget.contains(nextFocusTarget) && !isInSelectList) {
          setIsFocused(false);
        }
      },
      onFocus: () => {
        setIsFocused(true);
      }
    },
    isFocused,
    style
  };
};

exports.useFloatingLabel = useFloatingLabel;
//# sourceMappingURL=useFloatingLabel.js.map
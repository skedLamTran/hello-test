"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pagination = void 0;

var _reactI18next = require("react-i18next");

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ChevronLeft = require("@styled-icons/material-rounded/ChevronLeft");

var _ChevronRight = require("@styled-icons/material-rounded/ChevronRight");

var _Layout = require("../Layout");

var _Button = require("../Button");

var _Text = require("../Text");

var _DoubleChevronLeft = require("./DoubleChevronLeft");

var _DoubleChevronRight = require("./DoubleChevronRight");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const PaginationButton = props => _react.default.createElement(_Button.IconButton, _extends({
  outline: true,
  shape: "square",
  mx: "xxsmall"
}, props));

const PaginationLayout = ({
  alwaysVisible = false,
  className,
  current,
  pages,
  onChange
}) => {
  const _useTranslation = (0, _reactI18next.useTranslation)('Pagination'),
        t = _useTranslation.t;

  if (pages <= 1 && !alwaysVisible) return null;

  const first = () => onChange(1);

  const previous = () => onChange(current - 1);

  const next = () => onChange(current + 1);

  const last = () => onChange(pages);

  return _react.default.createElement(_Layout.Flex, {
    alignItems: "center",
    className: className
  }, _react.default.createElement(PaginationButton, {
    label: t('First page of results'),
    icon: _react.default.createElement(_DoubleChevronLeft.DoubleChevronLeft, null),
    onClick: first,
    disabled: current === 1
  }), _react.default.createElement(PaginationButton, {
    label: t('Previous page of results'),
    icon: _react.default.createElement(_ChevronLeft.ChevronLeft, null),
    onClick: previous,
    disabled: current === 1
  }), _react.default.createElement(_Text.Span, {
    fontSize: "small",
    mx: "xxsmall"
  }, _react.default.createElement("b", null, current), " ", t('of'), " ", pages), _react.default.createElement(PaginationButton, {
    label: t('Next page of results'),
    icon: _react.default.createElement(_ChevronRight.ChevronRight, null),
    onClick: next,
    disabled: pages - current === 0
  }), _react.default.createElement(PaginationButton, {
    mr: "none",
    label: t('Last page of results'),
    icon: _react.default.createElement(_DoubleChevronRight.DoubleChevronRight, null),
    onClick: last,
    disabled: pages - current === 0
  }));
};

const Pagination = (0, _styledComponents.default)(PaginationLayout).withConfig({
  displayName: "Pagination",
  componentId: "sc-kh6un3-0"
})([""]);
exports.Pagination = Pagination;
//# sourceMappingURL=Pagination.js.map
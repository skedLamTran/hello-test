"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRippleHandlers = exports.rippleHandlerKeys = void 0;

var _react = require("react");

var _utils = require("../utils");

const rippleHandlerKeys = ['onBlur', 'onFocus', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseUp'];
exports.rippleHandlerKeys = rippleHandlerKeys;

const useRippleHandlers = ({
  startBG,
  endBG,
  startFG,
  endFG
}, currentHandlers, disabled) => {
  const handleKeyDown = (0, _react.useCallback)(e => {
    switch (e.key) {
      case 'Enter':
      case ' ':
        startFG();
        break;
    }
  }, [startFG]);
  const handleMouseLeave = (0, _react.useCallback)(() => {
    endBG();
    endFG();
  }, [endFG, endBG]);
  const wrappedCallbacks = {
    onBlur: (0, _utils.useWrapEvent)(endBG, currentHandlers.onBlur),
    onFocus: (0, _utils.useWrapEvent)(startBG, currentHandlers.onFocus),
    onKeyDown: (0, _utils.useWrapEvent)(handleKeyDown, currentHandlers.onKeyDown),
    onKeyUp: (0, _utils.useWrapEvent)(endFG, currentHandlers.onKeyUp),
    onMouseDown: (0, _utils.useWrapEvent)(startFG, currentHandlers.onMouseDown),
    onMouseEnter: (0, _utils.useWrapEvent)(startBG, currentHandlers.onMouseEnter),
    onMouseLeave: (0, _utils.useWrapEvent)(handleMouseLeave, currentHandlers.onMouseLeave),
    onMouseUp: (0, _utils.useWrapEvent)(endFG, currentHandlers.onMouseUp)
  };
  return disabled ? {} : wrappedCallbacks;
};

exports.useRippleHandlers = useRippleHandlers;
//# sourceMappingURL=useRippleHandlers.js.map
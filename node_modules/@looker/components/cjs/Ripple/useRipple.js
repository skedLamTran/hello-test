"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRipple = void 0;

require("core-js/modules/es.math.hypot.js");

var _react = require("react");

var _styledComponents = require("styled-components");

var _useRippleState2 = require("./useRippleState");

var _useRippleStateBG2 = require("./useRippleStateBG");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const getMinMaxDimensions = (width, height) => {
  const min = Math.min(width, height);
  const max = Math.max(width, height);
  return [min, max];
};

const getRippleScaleRange = (bounded, min, max, size, noScale) => {
  const start = 0.1;

  if (bounded && min > 0 && max > 0) {
    const startBounded = min === max ? start : 1;
    const end = Math.hypot(min, max) / min;

    if (noScale) {
      return [end, end];
    }

    return [startBounded, end];
  }

  if (noScale) {
    return [size, size];
  }

  return [start, size];
};

const getRippleOffset = (min, max, bounded) => {
  if (!bounded || min === max) {
    return '0, 0';
  }

  const offset = max / 2 - min / 2;
  return `${offset}px, 0`;
};

const useRipple = ({
  bounded = false,
  color = 'neutral',
  height = 0,
  size = 1,
  width = 0
}) => {
  const _useContext = (0, _react.useContext)(_styledComponents.ThemeContext),
        colors = _useContext.colors,
        brandAnimation = _useContext.defaults.brandAnimation;

  const _getMinMaxDimensions = getMinMaxDimensions(width, height),
        _getMinMaxDimensions2 = _slicedToArray(_getMinMaxDimensions, 2),
        min = _getMinMaxDimensions2[0],
        max = _getMinMaxDimensions2[1];

  const rippleScaleRange = getRippleScaleRange(bounded, min, max, size, !brandAnimation);
  const rippleOffset = getRippleOffset(min, max, bounded);

  const _useRippleStateBG = (0, _useRippleStateBG2.useRippleStateBG)(),
        startBG = _useRippleStateBG.start,
        endBG = _useRippleStateBG.end,
        bgClass = _useRippleStateBG.className;

  const _useRippleState = (0, _useRippleState2.useRippleState)(),
        startFG = _useRippleState.start,
        endFG = _useRippleState.end,
        fgClass = _useRippleState.className;

  const style = {
    ['--ripple-color']: colors[color],
    ['--ripple-scale-end']: rippleScaleRange[1] || 1,
    ['--ripple-scale-start']: rippleScaleRange[0],
    ['--ripple-size']: bounded && min > 0 ? `${min}px` : '100%',
    ['--ripple-translate']: rippleOffset,
    ['--ripple-overflow']: bounded ? 'hidden' : 'visible'
  };
  return {
    callbacks: {
      endBG,
      endFG,
      startBG,
      startFG
    },
    className: `${bgClass} ${fgClass}`,
    style
  };
};

exports.useRipple = useRipple;
//# sourceMappingURL=useRipple.js.map
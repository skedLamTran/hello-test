"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRippleState = void 0;

var _react = require("react");

var _styledComponents = require("styled-components");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const reducer = (state, action) => {
  switch (action.type) {
    case 'START':
      return 'IN';

    case 'END':
      return state === 'IN' ? 'OUT' : state;

    case 'DONE':
      return 'OFF';
  }
};

const getRippleClassName = rippling => {
  if (rippling === 'IN') {
    return 'fg-in';
  } else if (rippling === 'OUT') {
    return 'fg-out';
  }

  return '';
};

const useRippleState = () => {
  const _useReducer = (0, _react.useReducer)(reducer, 'OFF'),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        rippling = _useReducer2[0],
        dispatch = _useReducer2[1];

  const isInRef = (0, _react.useRef)(false);
  const isLockedRef = (0, _react.useRef)(false);

  const _useContext = (0, _react.useContext)(_styledComponents.ThemeContext),
        _useContext$transitio = _useContext.transitions,
        quick = _useContext$transitio.quick,
        simple = _useContext$transitio.simple;

  const start = (0, _react.useCallback)(() => {
    dispatch({
      type: 'START'
    });
    isInRef.current = true;
  }, []);
  const end = (0, _react.useCallback)(() => {
    isInRef.current = false;

    if (!isLockedRef.current) {
      dispatch({
        type: 'END'
      });
    }
  }, []);
  (0, _react.useEffect)(() => {
    let t;

    if (rippling === 'IN') {
      isLockedRef.current = true;
      t = setTimeout(() => {
        isLockedRef.current = false;

        if (!isInRef.current) {
          dispatch({
            type: 'END'
          });
        }
      }, simple);
    }

    if (rippling === 'OUT') {
      t = setTimeout(() => {
        dispatch({
          type: 'DONE'
        });
      }, quick);
    }

    return () => {
      clearTimeout(t);
    };
  }, [rippling, quick, simple]);
  return {
    className: getRippleClassName(rippling),
    end,
    start
  };
};

exports.useRippleState = useRippleState;
//# sourceMappingURL=useRippleState.js.map
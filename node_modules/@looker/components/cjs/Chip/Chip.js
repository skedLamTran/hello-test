"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chip = void 0;

var _reactI18next = require("react-i18next");

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Close = require("@styled-icons/material/Close");

var _utils = require("../utils");

var _IconButton = require("../Button/IconButton");

var _Text = require("../Text");

var _truncate = require("../Text/truncate");

const _excluded = ["children", "disabled", "iconLabel", "onBlur", "onClick", "onDelete", "onKeyUp", "onKeyDown", "readOnly", "prefix", "truncate"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ChipStyle = _styledComponents.default.span.withConfig({
  displayName: "Chip__ChipStyle",
  componentId: "sc-1stj55z-0"
})(["", " ", " align-items:center;background:", ";border:1px solid transparent;border-radius:4px;color:", ";display:inline-flex;font-size:", ";font-weight:", ";height:28px;min-width:44px;padding:", ";&:hover,&:active,&:focus,&[aria-selected='true']{background:", ";}&.focus,&:focus{border-color:", ";outline:none;}&[disabled]{background:", ";border-color:", ";color:", ";&:hover{background:", ";}}"], _designTokens.reset, _designTokens.maxWidth, ({
  theme
}) => theme.colors.keySubtle, ({
  theme
}) => theme.colors.keyInteractive, ({
  theme
}) => theme.fontSizes.xsmall, ({
  theme
}) => theme.fontWeights.semiBold, ({
  theme: {
    space
  }
}) => `${space.u1} ${space.u2}`, ({
  theme
}) => theme.colors.keyAccent, ({
  theme
}) => theme.colors.key, ({
  theme
}) => theme.colors.neutralAccent, ({
  theme
}) => theme.colors.ui2, ({
  theme
}) => theme.colors.text1, ({
  theme
}) => theme.colors.neutralAccent);

const ChipLabel = (0, _styledComponents.default)(_Text.Span).withConfig({
  displayName: "Chip__ChipLabel",
  componentId: "sc-1stj55z-1"
})(["", ""], _truncate.truncateCSS);
const ChipJSX = (0, _react.forwardRef)((props, ref) => {
  const _useTranslation = (0, _reactI18next.useTranslation)('Chip'),
        t = _useTranslation.t;

  const iconLabelText = t('Delete');

  const children = props.children,
        disabled = props.disabled,
        _props$iconLabel = props.iconLabel,
        iconLabel = _props$iconLabel === void 0 ? iconLabelText : _props$iconLabel,
        onBlur = props.onBlur,
        onClick = props.onClick,
        onDelete = props.onDelete,
        onKeyUp = props.onKeyUp,
        onKeyDown = props.onKeyDown,
        _props$readOnly = props.readOnly,
        readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
        prefix = props.prefix,
        _props$truncate = props.truncate,
        truncate = _props$truncate === void 0 ? true : _props$truncate,
        rest = _objectWithoutProperties(props, _excluded);

  const clickableProps = (0, _utils.useClickable)({
    disabled,
    onBlur,
    onClick,
    onKeyUp
  });

  const handleKeyDown = event => {
    if (event.key === 'Backspace') {
      onDelete && onDelete(event);
    }
  };

  const handleDelete = e => {
    if (!disabled) {
      onDelete && onDelete(e);
    }

    e.stopPropagation();
  };

  return _react.default.createElement(ChipStyle, _extends({}, clickableProps, {
    onKeyDown: (0, _utils.useWrapEvent)(handleKeyDown, onKeyDown),
    ref: ref
  }, rest), _react.default.createElement(ChipLabel, {
    truncate: truncate
  }, prefix && _react.default.createElement(ChipLabel, {
    fontWeight: "normal"
  }, prefix, ": "), children), readOnly || disabled || onDelete && _react.default.createElement(_IconButton.IconButton, {
    disabled: disabled,
    icon: _react.default.createElement(_Close.Close, null),
    label: iconLabel,
    ml: "xsmall",
    onClick: handleDelete,
    size: "xxsmall"
  }));
});
ChipJSX.displayName = 'ChipJSX';
const Chip = (0, _styledComponents.default)(ChipJSX).withConfig({
  displayName: "Chip",
  componentId: "sc-1stj55z-2"
})([""]);
exports.Chip = Chip;
//# sourceMappingURL=Chip.js.map
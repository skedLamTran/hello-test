"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialogSurface = exports.dialogPlacements = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _SurfaceBase = require("../Dialog/SurfaceBase");

var _dialogWidth = require("./dialogWidth");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const dialogPlacements = ['center', 'cover', 'top'];
exports.dialogPlacements = dialogPlacements;
const space = _designTokens.theme.space,
      breakpoints = _designTokens.theme.breakpoints;
const gapSpace = 'xxlarge';
const coverDimension = `calc(100% - ${space[gapSpace]} * 2)`;
const placements = {
  center: (0, _styledComponents.css)(["align-self:flex-start;max-height:100%;@media screen and (min-width:", "){align-self:center;max-height:", ";}"], breakpoints[0], coverDimension),
  cover: (0, _styledComponents.css)(["height:100%;@media screen and (min-width:", "){height:", ";width:", ";}@media screen and (min-width:", "){height:", ";width:", ";}"], breakpoints[0], coverDimension, coverDimension, breakpoints[1], coverDimension, coverDimension),
  top: (0, _styledComponents.css)(["align-self:flex-start;margin-top:0;max-height:100%;@media screen and (min-width:", "){margin-top:", ";max-height:", ";}"], breakpoints[0], ({
    theme
  }) => theme.space[gapSpace], coverDimension)
};
const defaultDialogSurfacePlacement = 'center';
const dialogIn = (0, _styledComponents.keyframes)(["from{opacity:0.01;transform:translateY(100%);}to{opacity:1;transform:translate(0);}"]);
const dialogOut = (0, _styledComponents.keyframes)(["from{opacity:1;transform:translate(0);}to{opacity:0.01;transform:translateY(100%);}"]);
const DialogSurface = (0, _styledComponents.default)(_SurfaceBase.SurfaceBase).attrs(({
  placement = defaultDialogSurfacePlacement,
  width = 'medium'
}) => ({
  placement,
  width
})).withConfig({
  displayName: "DialogSurface",
  componentId: "sc-sg86rj-0"
})(["box-shadow:", ";position:relative;", " ", " ", " @media screen and (min-width:", "){border-radius:", ";}&.entering{animation:", " ", ";}&.exiting{animation:", " ", ";}"], ({
  theme
}) => theme.elevations.plus3, _dialogWidth.dialogWidth, ({
  placement
}) => placements[placement || defaultDialogSurfacePlacement], _designTokens.height, breakpoints[0], ({
  theme
}) => theme.radii.medium, dialogIn, _SurfaceBase.surfaceTransition, dialogOut, _SurfaceBase.surfaceTransition);
exports.DialogSurface = DialogSurface;
//# sourceMappingURL=DialogSurface.js.map
"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panels = exports.PanelsContext = void 0;

var _componentsProviders = require("@looker/components-providers");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const PanelsContext = (0, _react.createContext)({});
exports.PanelsContext = PanelsContext;
PanelsContext.displayName = 'PanelsContext';

const activatePanel = ({
  element
}) => {
  const panel = element.closest('[data-panel]');
  const container = element.closest('[data-panels]');

  if (panel && container) {
    container.style.visibility = 'hidden';
    panel.style.visibility = 'visible';
  }

  return () => {
    if (panel && container) {
      panel.style.visibility = '';
      container.style.visibility = '';
    }
  };
};

const Panels = (0, _styledComponents.default)(props => {
  return _react.default.createElement(_componentsProviders.TrapStackProvider, {
    activate: activatePanel,
    context: PanelsContext
  }, _react.default.createElement("div", _extends({}, props, {
    "data-panels": true
  })));
}).withConfig({
  displayName: "Panels",
  componentId: "sc-1214ocx-0"
})(["height:100%;position:relative;width:100%;"]);
exports.Panels = Panels;
//# sourceMappingURL=Panels.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonBase = exports.ButtonOuter = exports.buttonIconSize = void 0;

var _react = _interopRequireWildcard(require("react"));

var _designTokens = require("@looker/design-tokens");

var _styledIcon = require("@styled-icons/styled-icon");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _Ripple = require("../Ripple");

var _utils = require("../utils");

var _size = require("./size");

var _icon = require("./icon");

const _excluded = ["children", "className", "color", "iconBefore", "iconAfter", "rippleBackgroundColor", "size", "style"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const buttonCSS = (0, _styledComponents.css)(["", " ", " ", " ", " align-items:center;border-radius:", ";cursor:pointer;display:inline-flex;flex-shrink:0;font-family:", ";font-weight:", ";justify-content:center;line-height:1;outline:none;transition:border 80ms;vertical-align:middle;white-space:nowrap;&[disabled]{cursor:default;filter:grayscale(0.3);opacity:0.25;}", " ", ""], _designTokens.reset, _designTokens.maxWidth, _designTokens.minWidth, _designTokens.width, ({
  theme
}) => theme.radii.medium, ({
  theme
}) => theme.fonts.brand, ({
  theme
}) => theme.fontWeights.medium, _size.buttonSize, _designTokens.space);
const buttonIconSize = (0, _styledComponents.css)(["", "{height:", ";width:", ";}"], _styledIcon.StyledIconBase, ({
  theme,
  size = 'medium'
}) => theme.sizes[_size.buttonIconSizeMap[size]], ({
  theme,
  size = 'medium'
}) => theme.sizes[_size.buttonIconSizeMap[size]]);
exports.buttonIconSize = buttonIconSize;

const ButtonOuter = _styledComponents.default.button.withConfig({
  shouldForwardProp: _designTokens.shouldForwardProp
}).attrs(({
  color = 'key'
}) => ({
  color
})).withConfig({
  displayName: "ButtonBase__ButtonOuter",
  componentId: "sc-1bpio6j-0"
})(["", " ", ""], buttonCSS, ({
  fullWidth
}) => fullWidth && `width: 100%;`);

exports.ButtonOuter = ButtonOuter;
const ButtonBase = (0, _styledComponents.default)((0, _react.forwardRef)((props, forwardedRef) => {
  const children = props.children,
        className = props.className,
        color = props.color,
        iconBefore = props.iconBefore,
        iconAfter = props.iconAfter,
        rippleBackgroundColor = props.rippleBackgroundColor,
        _props$size = props.size,
        size = _props$size === void 0 ? 'medium' : _props$size,
        style = props.style,
        restProps = _objectWithoutProperties(props, _excluded);

  const _useCallbackRef = (0, _utils.useCallbackRef)(forwardedRef),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        element = _useCallbackRef2[0],
        ref = _useCallbackRef2[1];

  const _useMeasuredElement = (0, _utils.useMeasuredElement)(element),
        _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
        _useMeasuredElement2$ = _useMeasuredElement2[0],
        height = _useMeasuredElement2$.height,
        width = _useMeasuredElement2$.width;

  const _useRipple = (0, _Ripple.useRipple)({
    bounded: true,
    color: rippleBackgroundColor || color || 'key',
    height,
    width
  }),
        callbacks = _useRipple.callbacks,
        rippleClassName = _useRipple.className,
        rippleStyle = _useRipple.style;

  const rippleHandlers = (0, _Ripple.useRippleHandlers)(callbacks, _objectSpread({}, (0, _pick.default)(restProps, _Ripple.rippleHandlerKeys)), restProps.disabled);
  return _react.default.createElement(ButtonOuter, _extends({
    className: (0, _utils.mergeClassNames)([className, rippleClassName]),
    px: (0, _size.buttonPadding)(!!(iconBefore || iconAfter), size),
    ref: ref
  }, restProps, rippleHandlers, {
    size: size,
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }), iconBefore, children, iconAfter);
})).withConfig({
  displayName: "ButtonBase",
  componentId: "sc-1bpio6j-1"
})(["", " ", " ", ""], _icon.buttonIcon, buttonIconSize, _Ripple.rippleStyle);
exports.ButtonBase = ButtonBase;
//# sourceMappingURL=ButtonBase.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconButton = void 0;

var _pick = _interopRequireDefault(require("lodash/pick"));

var _some = _interopRequireDefault(require("lodash/some"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _Icon = require("../Icon");

var _Ripple = require("../Ripple");

var _Tooltip = require("../Tooltip");

var _utils = require("../utils");

var _VisuallyHidden = require("../VisuallyHidden");

var _ButtonBase = require("./ButtonBase");

var _iconButtonColor = require("./iconButtonColor");

var _iconButtonOutline = require("./iconButtonOutline");

var _size = require("./size");

const _excluded = ["aria-expanded", "className", "icon", "id", "size", "label", "toggle", "toggleColor", "tooltipDisabled", "tooltipPlacement", "tooltipTextAlign", "tooltipWidth", "onFocus", "onBlur", "onMouseOver", "onMouseOut", "style", "shape"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const IconButton = (0, _styledComponents.default)((0, _react.forwardRef)((props, forwardedRef) => {
  const ariaExpanded = props['aria-expanded'],
        className = props.className,
        icon = props.icon,
        id = props.id,
        _props$size = props.size,
        size = _props$size === void 0 ? 'xsmall' : _props$size,
        label = props.label,
        toggle = props.toggle,
        _props$toggleColor = props.toggleColor,
        toggleColor = _props$toggleColor === void 0 ? _iconButtonColor.ICON_BUTTON_DEFAULT_COLOR : _props$toggleColor,
        tooltipDisabled = props.tooltipDisabled,
        tooltipPlacement = props.tooltipPlacement,
        tooltipTextAlign = props.tooltipTextAlign,
        tooltipWidth = props.tooltipWidth,
        propsOnFocus = props.onFocus,
        propsOnBlur = props.onBlur,
        propsOnMouseOver = props.onMouseOver,
        propsOnMouseOut = props.onMouseOut,
        style = props.style,
        shape = props.shape,
        rest = _objectWithoutProperties(props, _excluded);

  const _useRipple = (0, _Ripple.useRipple)({
    bounded: shape === 'square',
    color: toggle ? toggleColor : undefined,
    size: shape === 'square' ? _Ripple.SQUARE_RIPPLE : 1
  }),
        callbacks = _useRipple.callbacks,
        rippleClassName = _useRipple.className,
        rippleStyle = _useRipple.style;

  const hasOuterTooltip = (0, _some.default)([propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut], _isFunction.default);

  const _useTooltip = (0, _Tooltip.useTooltip)({
    content: label,
    disabled: tooltipDisabled || hasOuterTooltip || ariaExpanded === true,
    id: id ? `${id}-tooltip` : undefined,
    placement: tooltipPlacement,
    textAlign: tooltipTextAlign,
    width: tooltipWidth
  }),
        _useTooltip$domProps = _useTooltip.domProps,
        ariaDescribedBy = _useTooltip$domProps['aria-describedby'],
        _useTooltip$domProps$ = _useTooltip$domProps.className,
        tooltipClassName = _useTooltip$domProps$ === void 0 ? '' : _useTooltip$domProps$,
        onFocus = _useTooltip$domProps.onFocus,
        onBlur = _useTooltip$domProps.onBlur,
        onMouseOver = _useTooltip$domProps.onMouseOver,
        onMouseOut = _useTooltip$domProps.onMouseOut,
        tooltip = _useTooltip.tooltip;

  const rippleHandlers = (0, _Ripple.useRippleHandlers)(callbacks, _objectSpread({
    onBlur: (0, _utils.useWrapEvent)(onBlur, propsOnBlur),
    onFocus: (0, _utils.useWrapEvent)(onFocus, propsOnFocus)
  }, (0, _pick.default)(rest, _Ripple.rippleHandlerKeys)), rest.disabled);
  const otherHandlers = {
    onMouseOut: (0, _utils.useWrapEvent)(onMouseOut, propsOnMouseOut),
    onMouseOver: (0, _utils.useWrapEvent)(onMouseOver, propsOnMouseOver)
  };
  return _react.default.createElement(_ButtonBase.ButtonOuter, _extends({
    "aria-describedby": ariaDescribedBy,
    "aria-expanded": ariaExpanded,
    "aria-pressed": toggle ? true : undefined,
    ref: forwardedRef,
    p: "none",
    size: size,
    width: _size.buttonSizeMap[size],
    className: (0, _utils.mergeClassNames)([className, tooltipClassName, rippleClassName]),
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }, rippleHandlers, otherHandlers, rest), _react.default.createElement(_VisuallyHidden.VisuallyHidden, null, label), _react.default.createElement(_Icon.Icon, {
    icon: icon,
    size: _size.iconButtonIconSizeMap[size]
  }), tooltip);
})).attrs(({
  type = 'button',
  toggleColor = _iconButtonColor.ICON_BUTTON_DEFAULT_COLOR
}) => ({
  toggleColor,
  type
})).withConfig({
  displayName: "IconButton",
  componentId: "sc-n9jti8-0"
})(["", " ", " ", " background:none;background-color:", ";border:none;border-radius:", ";", " flex-shrink:0;padding:0;", ""], _designTokens.reset, _designTokens.space, _Ripple.rippleStyle, ({
  theme,
  toggle,
  toggleBackground,
  toggleColor
}) => toggle && toggleBackground && theme.colors[`${toggleColor}Subtle`], ({
  shape
}) => shape !== 'square' && '100%', _iconButtonColor.iconButtonColor, ({
  outline
}) => outline && _iconButtonOutline.iconButtonOutline);
exports.IconButton = IconButton;
//# sourceMappingURL=IconButton.js.map
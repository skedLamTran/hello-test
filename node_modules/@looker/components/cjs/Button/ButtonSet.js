"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonSet = exports.ButtonSetLayout = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _height = require("../Form/Inputs/height");

var _simple = require("../Layout/utils/simple");

var _utils = require("../utils");

var _ButtonSetContext = require("./ButtonSetContext");

var _ButtonItem = require("./ButtonItem");

const _excluded = ["children", "className", "disabled", "onItemClick", "options", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ButtonSetLayout = (0, _react.forwardRef)((_ref, forwardedRef) => {
  let children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      onItemClick = _ref.onItemClick,
      options = _ref.options,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  if (children && options) {
    console.warn('Use children or options but not both at the same time.');
  }

  const context = {
    disabled,
    onItemClick,
    value
  };

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        isWrapping = _useState2[0],
        setIsWrapping = _useState2[1];

  const timeoutRef = (0, _react.useRef)();
  const measureRef = (0, _react.useCallback)(node => {
    if (node) {
      const _node$getBoundingClie = node.getBoundingClientRect(),
            height = _node$getBoundingClie.height;

      const getIsWrapping = () => {
        const firstItem = node.childNodes[0];
        const rowHeight = firstItem ? firstItem.getBoundingClientRect().height : _height.inputHeightNumber;

        if (height >= rowHeight * 2) {
          setIsWrapping(true);
        } else {
          setIsWrapping(false);
        }
      };

      if (height > 0) {
        getIsWrapping();
      } else {
        timeoutRef.current = setTimeout(getIsWrapping, 10);
      }
    } else if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  }, [options]);
  const ref = (0, _utils.useForkedRef)(measureRef, forwardedRef);
  const optionItems = options && options.map(({
    disabled,
    label,
    value
  }) => {
    return _react.default.createElement(_ButtonItem.ButtonItem, {
      key: value,
      disabled: disabled,
      value: value
    }, label || value);
  });
  return _react.default.createElement(_ButtonSetContext.ButtonSetContext.Provider, {
    value: context
  }, _react.default.createElement("div", _extends({
    role: "group",
    className: `${isWrapping ? 'wrapping ' : ''}${className}`,
    ref: ref
  }, props), children || optionItems));
});
exports.ButtonSetLayout = ButtonSetLayout;
ButtonSetLayout.displayName = 'ButtonSetLayout';
const ButtonSet = (0, _styledComponents.default)(ButtonSetLayout).withConfig({
  displayName: "ButtonSet",
  componentId: "sc-b1ia7f-0"
})(["", " align-items:center;display:inline-flex;flex-wrap:wrap;font-size:", ";text-align:center;"], _simple.simpleLayoutCSS, ({
  theme
}) => theme.fontSizes.small);
exports.ButtonSet = ButtonSet;
//# sourceMappingURL=ButtonSet.js.map
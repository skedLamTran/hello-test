"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTooltip = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var _Portal = require("../Portal");

var _TooltipContent = require("./TooltipContent");

var _TooltipSurface = require("./TooltipSurface");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const noop = () => {};

const useTooltip = ({
  canClose,
  content,
  isOpen: initializeOpen = false,
  width,
  maxWidth = '30rem',
  textAlign,
  disabled,
  id,
  invert,
  triggerElement,
  placement: propsPlacement = 'bottom',
  delay = 'intricate'
}) => {
  const _useState = (0, _react.useState)(initializeOpen),
        _useState2 = _slicedToArray(_useState, 2),
        isOpen = _useState2[0],
        setIsOpen = _useState2[1];

  const _useAnimationState = (0, _utils.useAnimationState)({
    enter: delay,
    exit: 'none',
    isOpen
  }),
        busy = _useAnimationState.busy,
        className = _useAnimationState.className,
        renderDOM = _useAnimationState.renderDOM;

  const _useCallbackRef = (0, _utils.useCallbackRef)(),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        surfaceElement = _useCallbackRef2[0],
        surfaceCallbackRef = _useCallbackRef2[1];

  const _useState3 = (0, _react.useState)(null),
        _useState4 = _slicedToArray(_useState3, 2),
        newTriggerElement = _useState4[0],
        setTriggerElement = _useState4[1];

  const element = triggerElement !== null && triggerElement !== void 0 ? triggerElement : newTriggerElement;
  const handleClose = (0, _react.useCallback)(() => {
    if (canClose && !canClose()) return;
    setIsOpen(false);
  }, [canClose]);
  const handleMouseOut = (0, _react.useCallback)(event => {
    if (!isOpen) return;
    const related = event.relatedTarget;

    if (element && (element === related || element.contains(related))) {
      return;
    }

    if (surfaceElement && (surfaceElement === related || surfaceElement.contains(related))) {
      return;
    }

    window.requestAnimationFrame(() => {
      handleClose();
    });
  }, [element, surfaceElement, isOpen, handleClose]);
  const usePopperProps = (0, _react.useMemo)(() => ({
    anchor: element,
    options: {
      modifiers: [{
        enabled: true,
        name: 'flip',
        options: {
          flipVariations: true
        }
      }],
      placement: propsPlacement
    }
  }), [element, propsPlacement]);

  const _usePopper = (0, _utils.usePopper)(usePopperProps),
        placement = _usePopper.placement,
        popperInstanceRef = _usePopper.popperInstanceRef,
        style = _usePopper.style,
        targetRef = _usePopper.targetRef;

  const ref = (0, _utils.useForkedRef)(targetRef, surfaceCallbackRef);
  const guaranteedId = (0, _utils.useID)(id);
  return (0, _react.useMemo)(() => {
    const popper = renderDOM && content && !disabled ? _react.default.createElement(_Portal.Portal, null, _react.default.createElement(_TooltipSurface.TooltipSurface, {
      "aria-busy": busy ? true : undefined,
      className: className,
      eventHandlers: {
        onMouseOut: handleMouseOut
      },
      placement: placement,
      ref: ref,
      style: style,
      maxWidth: maxWidth,
      invert: invert
    }, _react.default.createElement(_TooltipContent.TooltipContent, {
      role: "tooltip",
      id: guaranteedId,
      width: width,
      textAlign: textAlign
    }, content))) : null;

    const handleOpen = e => {
      setTriggerElement(e.currentTarget);
      const currentElement = triggerElement !== null && triggerElement !== void 0 ? triggerElement : e.currentTarget;

      if (!disabled && (!currentElement || !currentElement.dataset.notooltip)) {
        setIsOpen(true);
      }
    };

    const enabledDomProps = disabled ? {} : {
      'aria-describedby': guaranteedId,
      className: renderDOM ? 'hover' : undefined
    };
    return {
      domProps: _objectSpread(_objectSpread({}, enabledDomProps), {}, {
        onBlur: handleClose,
        onFocus: handleOpen,
        onMouseOut: handleMouseOut,
        onMouseOver: handleOpen,
        ref: noop
      }),
      popperInstanceRef,
      tooltip: popper
    };
  }, [busy, className, content, disabled, guaranteedId, handleClose, handleMouseOut, invert, maxWidth, placement, popperInstanceRef, ref, renderDOM, style, textAlign, triggerElement, width]);
};

exports.useTooltip = useTooltip;
//# sourceMappingURL=useTooltip.js.map
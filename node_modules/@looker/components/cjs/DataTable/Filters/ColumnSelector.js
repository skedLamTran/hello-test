"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnSelector = void 0;

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.map.js");

var _reactI18next = require("react-i18next");

var _react = _interopRequireWildcard(require("react"));

var _ViewColumn = require("@styled-icons/material/ViewColumn");

var _Popover = require("../../Popover");

var _IconButton = require("../../Button/IconButton");

var _OptionsGroup = require("../../Form/Inputs/OptionsGroup");

var _ButtonTransparent = require("../../Button/ButtonTransparent");

var _Layout = require("../../Layout");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const ColumnSelector = ({
  columns,
  columnsVisible: defaultColumnsVisible,
  onColumnVisibilityChange
}) => {
  const _useTranslation = (0, _reactI18next.useTranslation)('ColumnSelector'),
        t = _useTranslation.t;

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        isOpen = _useState2[0],
        setOpen = _useState2[1];

  const selectableColumns = columns.filter(c => c.hide !== undefined);

  const _useState3 = (0, _react.useState)(defaultColumnsVisible),
        _useState4 = _slicedToArray(_useState3, 2),
        columnsVisible = _useState4[0],
        setColumnsVisible = _useState4[1];

  const options = selectableColumns.map(column => ({
    label: column.title,
    value: column.id
  }));

  const apply = () => {
    onColumnVisibilityChange(columnsVisible);
    setOpen(false);
  };

  const cancel = () => setOpen(false);

  const all = () => {
    const resetColumn = columns.map(column => column.id);
    setColumnsVisible(resetColumn);
  };

  const none = () => setColumnsVisible([]);

  const content = _react.default.createElement(_Popover.PopoverContent, {
    width: "12rem",
    overflow: "hidden"
  }, _react.default.createElement(_Layout.SpaceVertical, null, _react.default.createElement(_Layout.Space, {
    gap: "u1"
  }, _react.default.createElement(_ButtonTransparent.ButtonTransparent, {
    size: "xsmall",
    onClick: all
  }, t('Select All')), _react.default.createElement(_ButtonTransparent.ButtonTransparent, {
    size: "xsmall",
    onClick: none
  }, t('Select None'))), _react.default.createElement(_OptionsGroup.CheckboxGroup, {
    value: columnsVisible,
    onChange: setColumnsVisible,
    options: options
  }), _react.default.createElement(_Layout.Space, {
    reverse: true
  }, _react.default.createElement(_ButtonTransparent.ButtonTransparent, {
    onClick: apply
  }, t('Apply')), _react.default.createElement(_ButtonTransparent.ButtonTransparent, {
    onClick: cancel,
    color: "neutral"
  }, t('Cancel')))));

  const _usePopover = (0, _Popover.usePopover)({
    content,
    isOpen,
    setOpen
  }),
        popover = _usePopover.popover,
        domProps = _usePopover.domProps;

  return _react.default.createElement(_react.default.Fragment, null, popover, _react.default.createElement(_IconButton.IconButton, _extends({
    icon: _react.default.createElement(_ViewColumn.ViewColumn, null),
    label: t('Select columns to display')
  }, domProps)));
};

exports.ColumnSelector = ColumnSelector;
//# sourceMappingURL=ColumnSelector.js.map
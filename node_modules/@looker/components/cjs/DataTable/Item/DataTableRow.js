"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTableRow = void 0;

require("core-js/modules/es.array.map.js");

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _DataTableContext = require("../DataTableContext");

var _DataTableCheckbox = require("./DataTableCheckbox");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DataTableRowLayout = (0, _react.forwardRef)((props, ref) => {
  const className = props.className,
        hasCheckbox = props.hasCheckbox,
        children = props.children,
        id = props.id,
        isHeaderRow = props.isHeaderRow,
        onClick = props.onClick,
        onKeyDown = props.onKeyDown,
        secondary = props.secondary;
  const ColumnType = isHeaderRow ? 'th' : 'td';

  const _useContext = (0, _react.useContext)(_DataTableContext.DataTableContext),
        columns = _useContext.columns,
        columnsDisplayState = _useContext.columnsDisplayState;

  const getColumnSize = index => columns && columns[index].size;

  const sizedChildren = _react.Children.map(children, (child, index) => {
    if (columnsDisplayState && !columnsDisplayState[index]) {
      return null;
    }

    const size = getColumnSize(index);
    const cellProps = index === 0 ? {
      id: `rowheader-${id}`,
      role: 'rowheader',
      size
    } : {
      size
    };
    return (0, _react.isValidElement)(child) && (0, _react.cloneElement)(child, cellProps);
  });

  const handleOnClick = event => {
    return event.target instanceof HTMLAnchorElement ? undefined : onClick && onClick(event);
  };

  const suppressClickPropagation = event => {
    event.stopPropagation();
  };

  return _react.default.createElement("tr", {
    ref: ref,
    className: className,
    onKeyDown: onKeyDown,
    onClick: handleOnClick
  }, hasCheckbox ? _react.default.createElement(ColumnType, {
    onClick: suppressClickPropagation
  }, _react.default.createElement(_DataTableCheckbox.DataTableCheckbox, (0, _pick.default)(props, _DataTableCheckbox.checkListProps))) : _react.default.createElement(ColumnType, {
    "aria-hidden": "true"
  }), sizedChildren, _react.default.createElement(ColumnType, {
    onClick: suppressClickPropagation
  }, secondary));
});
DataTableRowLayout.displayName = 'DataTableRowLayout';

const getRowHoverColor = (theme, hasOnClick, isHeader, isSelected) => {
  if (!isHeader && hasOnClick) {
    return isSelected ? theme.colors.keyAccent : theme.colors.ui1;
  }

  return undefined;
};

const DataTableRow = (0, _styledComponents.default)(DataTableRowLayout).withConfig({
  displayName: "DataTableRow",
  componentId: "sc-gwwepv-0"
})(["td,th{background:", ";border-bottom:solid 1px ", ";&:first-of-type > div{border-left:1px solid transparent;border-right:1px solid transparent;height:100%;}}&:hover{cursor:", ";outline:none;td,th{background:", ";}}&:focus{outline:none;td:first-of-type > div{border-left-color:", ";}}"], ({
  checked,
  isHeaderRow,
  theme: {
    colors
  }
}) => checked && !isHeaderRow ? colors.keySubtle : colors.background, ({
  theme
}) => theme.colors.ui2, ({
  onClick
}) => onClick && 'pointer', ({
  checked,
  isHeaderRow,
  onClick,
  theme
}) => getRowHoverColor(theme, Boolean(onClick), Boolean(isHeaderRow), Boolean(checked)), ({
  theme
}) => theme.colors.key);
exports.DataTableRow = DataTableRow;
//# sourceMappingURL=DataTableRow.js.map
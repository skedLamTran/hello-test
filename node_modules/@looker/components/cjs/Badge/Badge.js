"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Badge = void 0;

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

const _excluded = ["children"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const size = (0, _designTokens.variant)({
  prop: 'size',
  variants: {
    small: {
      fontSize: 'xxsmall',
      lineHeight: '16px',
      px: 'u2'
    },
    medium: {
      fontSize: 'xsmall',
      lineHeight: '24px',
      px: 'u2'
    },
    large: {
      fontSize: 'medium',
      lineHeight: '32px',
      px: 'u3'
    }
  }
});
const BadgeLayout = (0, _react.forwardRef)((_ref, ref) => {
  let children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  return _react.default.createElement("span", _extends({
    ref: ref
  }, props), children);
});
BadgeLayout.displayName = 'BadgeLayout';

const badgeIntent = intent => (0, _styledComponents.css)(["background:", ";color:", ";"], (0, _designTokens.intentUIBlend)(intent, 1), ({
  theme: {
    colors
  }
}) => (0, _designTokens.generateIntentShade)(colors[intent]));

const Badge = (0, _styledComponents.default)(BadgeLayout).attrs(({
  intent = 'key',
  size = 'medium'
}) => ({
  intent,
  size
})).withConfig({
  displayName: "Badge",
  componentId: "sc-idhxta-0"
})(["", " border-radius:50px;display:inline-flex;font-weight:", ";", " ", " ", " ", " ", ""], _designTokens.reset, ({
  theme
}) => theme.fontWeights.semiBold, _designTokens.color, _designTokens.space, _designTokens.typography, size, ({
  intent
}) => badgeIntent(intent));
exports.Badge = Badge;
//# sourceMappingURL=Badge.js.map
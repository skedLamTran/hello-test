"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListItem = void 0;

require("core-js/modules/es.symbol.description.js");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var _Icon = require("../Icon");

var _ListItemContext = require("./ListItemContext");

var _ListItemContent = require("./ListItemContent");

var _ListItemWrapper = require("./ListItemWrapper");

var _utils2 = require("./utils");

const _excluded = ["children", "className", "color", "density", "description", "detail", "disabled", "hovered", "href", "icon", "itemRole", "onBlur", "onClick", "onKeyDown", "onKeyUp", "onMouseEnter", "onMouseLeave", "rel", "role", "selected", "tabIndex", "target", "truncate"],
      _excluded2 = ["focusVisible"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ListItemInternal = (0, _react.forwardRef)((props, ref) => {
  const children = props.children,
        className = props.className,
        propsColor = props.color,
        propsDensity = props.density,
        description = props.description,
        detail = props.detail,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        _props$hovered = props.hovered,
        propsHovered = _props$hovered === void 0 ? false : _props$hovered,
        href = props.href,
        icon = props.icon,
        itemRole = props.itemRole,
        onBlur = props.onBlur,
        onClick = props.onClick,
        onKeyDown = props.onKeyDown,
        onKeyUp = props.onKeyUp,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        rel = props.rel,
        role = props.role,
        selected = props.selected,
        _props$tabIndex = props.tabIndex,
        tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,
        target = props.target,
        truncate = props.truncate,
        restProps = _objectWithoutProperties(props, _excluded);

  const _useContext = (0, _react.useContext)(_ListItemContext.ListItemContext),
        contextDensity = _useContext.density,
        iconGutter = _useContext.iconGutter,
        contextColor = _useContext.color;

  const density = propsDensity || contextDensity;
  const color = (0, _utils.undefinedCoalesce)([propsColor, contextColor]);

  const _useFocusVisible = (0, _utils.useFocusVisible)({
    onBlur,
    onKeyUp
  }),
        focusVisible = _useFocusVisible.focusVisible,
        focusVisibleHandlers = _objectWithoutProperties(_useFocusVisible, _excluded2);

  const _useState = (0, _react.useState)(propsHovered),
        _useState2 = _slicedToArray(_useState, 2),
        hovered = _useState2[0],
        setHovered = _useState2[1];

  const handleOnClick = event => {
    if (itemRole !== 'none' && onClick) {
      onClick(event);
    }
  };

  if (disabled && itemRole === 'link') {
    console.warn('itemRole="link" and disabled cannot be combined - use itemRole="button" if you need to offer a disabled ListItem');
  }

  if (itemRole === 'none' && onClick) {
    console.warn('itemRole="none" and onClick cannot be combined - if itemRole="none" is a necessity, assign click behavior directly to ListItem\'s children');
  }

  const wrapperRef = (0, _react.useRef)(null);
  const actualRef = (0, _utils.useForkedRef)(wrapperRef, ref);

  const _partitionAriaProps = (0, _utils.partitionAriaProps)(restProps),
        _partitionAriaProps2 = _slicedToArray(_partitionAriaProps, 2),
        ariaProps = _partitionAriaProps2[0],
        wrapperProps = _partitionAriaProps2[1];

  const _createListItemPartit = (0, _utils2.createListItemPartitions)(_objectSpread(_objectSpread({}, props), {}, {
    color,
    density,
    icon: icon || (iconGutter ? _react.default.createElement(_Icon.IconPlaceholder, null) : undefined)
  })),
        _createListItemPartit2 = _slicedToArray(_createListItemPartit, 2),
        insideElements = _createListItemPartit2[0],
        outsideElements = _createListItemPartit2[1];

  const statefulProps = {
    color,
    disabled,
    hovered,
    selected
  };

  const handleWrapperFocus = () => {
    setHovered(true);
  };

  const handleWrapperBlur = event => {
    const nextFocusTarget = (0, _utils.getNextFocusTarget)(event);

    if (nextFocusTarget && !event.currentTarget.contains(nextFocusTarget)) {
      setHovered(false);
    }
  };

  const handleWrapperMouseEnter = (0, _utils.useWrapEvent)(() => setHovered(true), onMouseEnter);
  const handleWrapperMouseLeave = (0, _utils.useWrapEvent)(() => setHovered(false), onMouseLeave);
  return _react.default.createElement(_utils.HoverDisclosureContext.Provider, {
    value: {
      visible: hovered
    }
  }, _react.default.createElement(_ListItemWrapper.ListItemWrapper, _extends({
    className: className,
    color: (0, _utils2.listItemLabelColor)(color, disabled),
    onBlur: handleWrapperBlur,
    onFocus: handleWrapperFocus,
    onMouseEnter: handleWrapperMouseEnter,
    onMouseLeave: handleWrapperMouseLeave,
    ref: actualRef
  }, wrapperProps), _react.default.createElement(_ListItemContent.ListItemContent, _extends({
    itemRole: itemRole,
    "aria-selected": selected,
    cursorPointer: !!(href || onClick),
    focusVisible: focusVisible,
    href: href,
    onClick: disabled ? undefined : handleOnClick,
    onKeyDown: onKeyDown,
    density: density,
    rel: (0, _utils.createSafeRel)(rel, target),
    role: role || 'listitem',
    target: target,
    tabIndex: tabIndex
  }, ariaProps, focusVisibleHandlers, statefulProps), insideElements), outsideElements));
});
ListItemInternal.displayName = 'ListItemInternal';
const ListItem = (0, _styledComponents.default)(ListItemInternal).withConfig({
  displayName: "ListItem",
  componentId: "sc-1n26s38-0"
})([""]);
exports.ListItem = ListItem;
//# sourceMappingURL=ListItem.js.map
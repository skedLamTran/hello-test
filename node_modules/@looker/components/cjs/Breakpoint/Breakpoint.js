"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Breakpoint = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.index-of.js");

var _react = _interopRequireWildcard(require("react"));

var _designTokens = require("@looker/design-tokens");

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _styledComponents = require("styled-components");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const Breakpoint = ({
  children,
  show
}) => {
  const _ref = (0, _isArray.default)(show) ? show : [show, show],
        _ref2 = _slicedToArray(_ref, 2),
        _ref2$ = _ref2[0],
        from = _ref2$ === void 0 ? 'mobile' : _ref2$,
        _ref2$2 = _ref2[1],
        to = _ref2$2 === void 0 ? 'xl' : _ref2$2;

  const _useState = (0, _react.useState)(typeof document === 'undefined' ? 800 : document.body.clientWidth),
        _useState2 = _slicedToArray(_useState, 2),
        screenWidth = _useState2[0],
        setScreenWidth = _useState2[1];

  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);
  const breakpointPx = theme.breakpoints.map(b => (0, _designTokens.convertRemToPx)(parseInt(b.replace('rem', ''))));
  const fromIndex = theme.breakpoints.indexOf(_designTokens.BreakpointRamp[from]);
  const toIndex = theme.breakpoints.indexOf(_designTokens.BreakpointRamp[to]);

  const handleResize = () => {
    if (document) {
      setScreenWidth(document.body.clientWidth);
    }
  };

  (0, _utils.useResize)(typeof document === 'undefined' ? null : document.body, handleResize);
  const screenMin = from === 'mobile' ? 0 : breakpointPx[fromIndex - 1];
  const screenMax = to === 'xl' ? Infinity : breakpointPx[toIndex];
  return _react.default.createElement(_react.default.Fragment, null, screenWidth > screenMin && screenWidth <= screenMax ? children : null);
};

exports.Breakpoint = Breakpoint;
//# sourceMappingURL=Breakpoint.js.map
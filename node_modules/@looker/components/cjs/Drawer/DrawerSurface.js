"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawerSurface = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _SurfaceBase = require("../Dialog/SurfaceBase");

var _dialogWidth = require("../Dialog/dialogWidth");

var _asideWidth = require("../Layout/Semantics/Aside/asideWidth");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const placement = (0, _designTokens.variant)({
  prop: 'placement',
  variants: {
    left: {
      boxShadow: '-18px 0 18px -18px rgba(0, 0, 0, 0.12)',
      left: 0
    },
    right: {
      boxShadow: '-18px 0 18px -18px rgba(0, 0, 0, 0.12)',
      right: 0
    }
  }
});

const drawerWidth = () => {
  const drawerSizes = _objectSpread(_objectSpread({}, _asideWidth.asideSizes), _dialogWidth.dialogSizes);

  return (0, _designTokens.system)({
    width: {
      defaultScale: drawerSizes,
      property: 'width',
      scale: 'drawerSizes'
    }
  });
};

const slideIn = (0, _styledComponents.keyframes)(["from{opacity:0.01;transform:translate(var(--direction-translate,0),0);}to{opacity:1;transform:translate(0);}"]);
const slideOut = (0, _styledComponents.keyframes)(["from{opacity:1;transform:translate(0);}to{opacity:0.01;transform:translate(var(--direction-translate,0),0);}"]);
const DrawerSurface = (0, _styledComponents.default)(_SurfaceBase.SurfaceBase).attrs(({
  placement = 'right',
  width = 'small'
}) => ({
  placement,
  width
})).withConfig({
  displayName: "DrawerSurface",
  componentId: "sc-1vwnqjh-0"
})(["--direction-translate:", ";height:100%;position:absolute;", " ", " &.entering{animation:", " ", ";}&.exiting{animation:", " ", ";}"], ({
  placement
}) => placement === 'left' ? '-100%' : '100%', placement, drawerWidth, slideIn, _SurfaceBase.surfaceTransition, slideOut, _SurfaceBase.surfaceTransition);
exports.DrawerSurface = DrawerSurface;
//# sourceMappingURL=DrawerSurface.js.map
"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accordionDimensions = exports.densities = exports.densityNegative3 = exports.densityNegative2 = exports.densityNegative1 = exports.density0 = exports.densityPositive1 = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const densityPositive1 = {
  fontSize: 'medium',
  indicatorGap: 'u1',
  indicatorSize: 'medium'
};
exports.densityPositive1 = densityPositive1;

const density0 = _objectSpread(_objectSpread({}, densityPositive1), {}, {
  fontSize: 'small',
  indicatorSize: 'small'
});

exports.density0 = density0;

const densityNegative1 = _objectSpread({}, density0);

exports.densityNegative1 = densityNegative1;

const densityNegative2 = _objectSpread({}, densityNegative1);

exports.densityNegative2 = densityNegative2;

const densityNegative3 = _objectSpread(_objectSpread({}, densityNegative2), {}, {
  fontSize: 'xsmall',
  indicatorSize: 'xxsmall'
});

exports.densityNegative3 = densityNegative3;
const densities = {
  '-1': densityNegative1,
  '-2': densityNegative2,
  '-3': densityNegative3,
  '0': density0,
  '1': densityPositive1
};
exports.densities = densities;

const accordionDimensions = (density = 0) => densities[density];

exports.accordionDimensions = accordionDimensions;
//# sourceMappingURL=accordionDimensions.js.map
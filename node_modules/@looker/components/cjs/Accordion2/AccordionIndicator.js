"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccordionIndicator = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _styledIcon = require("@styled-icons/styled-icon");

var _accordionDimensions = require("./accordionDimensions");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const size = (density = 0) => (0, _accordionDimensions.accordionDimensions)(density).indicatorSize;

const gap = (density = 0) => (0, _accordionDimensions.accordionDimensions)(density).indicatorGap;

const indicatorFocusVisible = (0, _styledComponents.css)(["&{box-shadow:inset 0 0 0 2px ", ";}"], ({
  theme
}) => theme.colors.keyFocus);

const AccordionIndicator = _styledComponents.default.div.withConfig({
  displayName: "AccordionIndicator",
  componentId: "sc-1w66fqe-0"
})(["align-items:center;display:flex;justify-content:center;outline:none;", " ", " ", "{height:", ";width:", ";}"], ({
  focusVisible
}) => focusVisible && indicatorFocusVisible, ({
  density,
  indicatorPosition,
  theme: {
    space
  }
}) => indicatorPosition === 'left' ? `margin-right: ${space[gap(density)]};` : `margin-left: ${space[gap(density)]};`, _styledIcon.StyledIconBase, ({
  density,
  theme
}) => theme.sizes[size(density)], ({
  density,
  theme
}) => theme.sizes[size(density)]);

exports.AccordionIndicator = AccordionIndicator;
//# sourceMappingURL=AccordionIndicator.js.map
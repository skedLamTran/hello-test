"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordion = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _designTokens = require("@looker/design-tokens");

var _simple = require("../Layout/utils/simple");

var _useAccordion2 = require("../Accordion2/useAccordion2");

var _accordionDimensions = require("../Accordion2/accordionDimensions");

var _AccordionLegacy = require("./AccordionLegacy");

var _AccordionDisclosure = require("./AccordionDisclosure");

var _AccordionContent = require("./AccordionContent");

const _excluded = ["content", "children", "isOpen", "toggleOpen"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const AccordionInternal = _ref => {
  let children = _ref.content,
      label = _ref.children,
      propsIsOpen = _ref.isOpen,
      propsToggleOpen = _ref.toggleOpen,
      props = _objectWithoutProperties(_ref, _excluded);

  if (propsIsOpen && propsToggleOpen === undefined || propsIsOpen === undefined && propsToggleOpen) {
    console.warn('Please provide both an isOpen prop and a toggleOpen prop if you wish to control a Accordion state. If you would like an uncontrolled Accordion, avoid passing in either prop into your Accordion element.');
  }

  if (!label) {
    console.warn("<Accordion>'s child is falsy (i.e. undefined, null, false, etc). Please give <Accordion> a valid ReactNode child.");
  }

  const controlledProps = propsIsOpen && propsToggleOpen ? {
    isOpen: propsIsOpen,
    toggleOpen: propsToggleOpen
  } : {};

  const _useAccordion = (0, _useAccordion2.useAccordion2)(_objectSpread(_objectSpread({
    children,
    label
  }, controlledProps), props)),
        contentDomProps = _useAccordion.contentDomProps,
        domProps = _useAccordion.domProps,
        disclosureProps = _useAccordion.disclosureProps,
        isOpen = _useAccordion.isOpen;

  if ((0, _AccordionLegacy.isLegacyComposition)(label)) {
    return _react.default.createElement(_AccordionLegacy.AccordionLegacy, _extends({}, domProps, {
      contentDomProps: (0, _omit.default)(contentDomProps, 'children'),
      disclosureProps: (0, _omit.default)(disclosureProps, 'children'),
      isOpen: isOpen
    }), label);
  } else {
    return _react.default.createElement("div", domProps, _react.default.createElement(_AccordionDisclosure.AccordionDisclosure, disclosureProps), isOpen && _react.default.createElement(_AccordionContent.AccordionContent, contentDomProps));
  }
};

const Accordion = (0, _styledComponents.default)(AccordionInternal).withConfig({
  displayName: "Accordion",
  componentId: "sc-egrkwf-0"
})(["font-size:", ";width:100%;", ",", "{", " ", " ", "}"], ({
  theme,
  density
}) => theme.fontSizes[(0, _accordionDimensions.accordionDimensions)(density || theme.defaults.density).fontSize], _AccordionDisclosure.AccordionDisclosure, _AccordionContent.AccordionContent, _designTokens.textColor, _simple.simpleLayoutCSS, _designTokens.typography);
exports.Accordion = Accordion;
//# sourceMappingURL=Accordion.js.map
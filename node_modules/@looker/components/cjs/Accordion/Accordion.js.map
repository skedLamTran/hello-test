{"version":3,"sources":["../../../src/Accordion/Accordion.tsx"],"names":["AccordionInternal","children","content","label","propsIsOpen","isOpen","propsToggleOpen","toggleOpen","props","undefined","console","warn","controlledProps","contentDomProps","domProps","disclosureProps","Accordion","theme","density","fontSizes","defaults","fontSize","AccordionDisclosure","AccordionContent","textColor","simpleLayoutCSS","typography"],"mappings":";;;;;;;;;;;;;AA2BA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AAIA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AA6BA,MAAMA,iBAAqC,GAAG,QAMxC;AAAA,MALKC,QAKL,QALJC,OAKI;AAAA,MAJMC,KAIN,QAJJF,QAII;AAAA,MAHIG,WAGJ,QAHJC,MAGI;AAAA,MAFQC,eAER,QAFJC,UAEI;AAAA,MADDC,KACC;;AACJ,MACGJ,WAAW,IAAIE,eAAe,KAAKG,SAApC,IACCL,WAAW,KAAKK,SAAhB,IAA6BH,eAFhC,EAGE;AAEAI,IAAAA,OAAO,CAACC,IAAR,CACE,2MADF;AAGD;;AAED,MAAI,CAACR,KAAL,EAAY;AAEVO,IAAAA,OAAO,CAACC,IAAR,CACE,mHADF;AAGD;;AAED,QAAMC,eAAe,GACnBR,WAAW,IAAIE,eAAf,GACI;AACED,IAAAA,MAAM,EAAED,WADV;AAEEG,IAAAA,UAAU,EAAED;AAFd,GADJ,GAKI,EANN;;AAQA,wBAA+D;AAC7DL,IAAAA,QAD6D;AAE7DE,IAAAA;AAF6D,KAG1DS,eAH0D,GAI1DJ,KAJ0D,EAA/D;AAAA,QAAQK,eAAR,iBAAQA,eAAR;AAAA,QAAyBC,QAAzB,iBAAyBA,QAAzB;AAAA,QAAmCC,eAAnC,iBAAmCA,eAAnC;AAAA,QAAoDV,MAApD,iBAAoDA,MAApD;;AAOA,MAAI,0CAAoBF,KAApB,CAAJ,EAAgC;AAC9B,WACE,6BAAC,gCAAD,eACMW,QADN;AAEE,MAAA,eAAe,EAAE,mBAAKD,eAAL,EAAsB,UAAtB,CAFnB;AAGE,MAAA,eAAe,EAAE,mBAAKE,eAAL,EAAsB,UAAtB,CAHnB;AAIE,MAAA,MAAM,EAAEV;AAJV,QAMGF,KANH,CADF;AAUD,GAXD,MAWO;AACL,WACE,oCAASW,QAAT,EACE,6BAAC,wCAAD,EAAyBC,eAAzB,CADF,EAEGV,MAAM,IAAI,6BAAC,kCAAD,EAAsBQ,eAAtB,CAFb,CADF;AAMD;AACF,CA1DD;;AA+DO,MAAMG,SAAS,GAAG,+BAAOhB,iBAAP,CAAH;AAAA;AAAA;AAAA,4DACP,CAAC;AAAEiB,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KACXD,KAAK,CAACE,SAAN,CACE,8CAAoBD,OAAO,IAAID,KAAK,CAACG,QAAN,CAAeF,OAA9C,EAAuDG,QADzD,CAFkB,EAOlBC,wCAPkB,EAOMC,kCAPN,EAQhBC,uBARgB,EAShBC,uBATgB,EAUhBC,wBAVgB,CAAf","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { FC, ReactNode } from 'react'\nimport React from 'react'\nimport styled from 'styled-components'\nimport omit from 'lodash/omit'\nimport type { TextColorProps, TypographyProps } from '@looker/design-tokens'\nimport { textColor, typography } from '@looker/design-tokens'\nimport type { SimpleLayoutProps } from '../Layout/utils/simple'\nimport { simpleLayoutCSS } from '../Layout/utils/simple'\nimport { useAccordion2 } from '../Accordion2/useAccordion2'\nimport { accordionDimensions } from '../Accordion2/accordionDimensions'\nimport type { AccordionIndicatorProps } from '../Accordion2/types'\nimport type { ControlledLoosely } from '../Accordion2/controlTypes'\nimport type { GenericClickProps } from '../utils'\nimport { AccordionLegacy, isLegacyComposition } from './AccordionLegacy'\nimport { AccordionDisclosure } from './AccordionDisclosure'\nimport { AccordionContent } from './AccordionContent'\n\nexport type AccordionProps = ControlledLoosely &\n  AccordionIndicatorProps &\n  Omit<GenericClickProps<HTMLElement>, 'content'> &\n  SimpleLayoutProps &\n  TextColorProps &\n  TypographyProps & {\n    /**\n     * We currently support two different compositions for Accordion:\n     *  - `Accordion`'s children will act as the \"trigger\" element (i.e. children always visible, clicking children toggles whether content is visible or not)\n     *  - Legacy: `<Accordion>` wrapped around an `<AccordionDisclosure>` and `<AccordionContent>` (NOTE: This composition will be deprecated in a future MAJOR release)\n     */\n    children: ReactNode\n    /**\n     * Determines the content shown or hidden by the Accordion's open state.\n     * Note: If using the \"Legacy\" Accordion composition, provide an `<AccordionContent>` child instead of using the content prop.\n     */\n    content?: ReactNode\n    /**\n     * A unique ID primarily used to supply aria-controls and aria-labelledby to child AccordionDisclosure and child AccordionContent\n     * Note: This will be auto-generated if undefined\n     */\n    id?: string\n  }\n\n/**\n * @deprecated Use `Accordion2` instead\n */\nconst AccordionInternal: FC<AccordionProps> = ({\n  content: children,\n  children: label,\n  isOpen: propsIsOpen,\n  toggleOpen: propsToggleOpen,\n  ...props\n}) => {\n  if (\n    (propsIsOpen && propsToggleOpen === undefined) ||\n    (propsIsOpen === undefined && propsToggleOpen)\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Please provide both an isOpen prop and a toggleOpen prop if you wish to control a Accordion state. If you would like an uncontrolled Accordion, avoid passing in either prop into your Accordion element.'\n    )\n  }\n\n  if (!label) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"<Accordion>'s child is falsy (i.e. undefined, null, false, etc). Please give <Accordion> a valid ReactNode child.\"\n    )\n  }\n\n  const controlledProps =\n    propsIsOpen && propsToggleOpen\n      ? {\n          isOpen: propsIsOpen,\n          toggleOpen: propsToggleOpen,\n        }\n      : {}\n\n  const { contentDomProps, domProps, disclosureProps, isOpen } = useAccordion2({\n    children,\n    label,\n    ...controlledProps,\n    ...props,\n  })\n\n  if (isLegacyComposition(label)) {\n    return (\n      <AccordionLegacy\n        {...domProps}\n        contentDomProps={omit(contentDomProps, 'children')}\n        disclosureProps={omit(disclosureProps, 'children')}\n        isOpen={isOpen}\n      >\n        {label}\n      </AccordionLegacy>\n    )\n  } else {\n    return (\n      <div {...domProps}>\n        <AccordionDisclosure {...disclosureProps} />\n        {isOpen && <AccordionContent {...contentDomProps} />}\n      </div>\n    )\n  }\n}\n\n/**\n * @deprecated Use `Accordion2` instead\n */\nexport const Accordion = styled(AccordionInternal)`\n  font-size: ${({ theme, density }) =>\n    theme.fontSizes[\n      accordionDimensions(density || theme.defaults.density).fontSize\n    ]};\n  width: 100%;\n\n  ${AccordionDisclosure}, ${AccordionContent} {\n    ${textColor}\n    ${simpleLayoutCSS}\n    ${typography}\n  }\n`\n"],"file":"Accordion.js"}
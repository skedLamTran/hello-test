"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.progressCircularSize = exports.progressCircularSVG = void 0;

var _designTokens = require("@looker/design-tokens");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const calculateValues = half => {
  return {
    dashArray: half * 4.7,
    dashOffset: half * 2.3,
    half: half,
    radius: half / 1.34
  };
};

const progressCircularSVG = (0, _designTokens.variant)({
  prop: 'size',
  variants: {
    xsmall: _objectSpread({
      stroke: 2
    }, calculateValues(10)),
    small: _objectSpread({
      stroke: 2.5
    }, calculateValues(12)),
    medium: _objectSpread({
      stroke: 3
    }, calculateValues(18)),
    large: _objectSpread({
      stroke: 4
    }, calculateValues(24))
  }
});
exports.progressCircularSVG = progressCircularSVG;
const progressCircularSize = (0, _designTokens.variant)({
  prop: 'size',
  variants: {
    xsmall: {
      height: '20px',
      width: '20px'
    },
    small: {
      height: '24px',
      width: '24px'
    },
    medium: {
      height: '36px',
      width: '36px'
    },
    large: {
      height: '48px',
      width: '48px'
    }
  }
});
exports.progressCircularSize = progressCircularSize;
//# sourceMappingURL=size.js.map
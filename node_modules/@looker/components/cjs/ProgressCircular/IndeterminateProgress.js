"use strict";

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndeterminateProgress = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.iterator.js");

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _size = require("./size");

var _constants = require("./constants");

var _ProgressSvg = require("./ProgressSvg");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IndeterminateProgress = ({
  size
}) => {
  const _progressCircularSVG = (0, _size.progressCircularSVG)({
    size
  }),
        stroke = _progressCircularSVG.stroke,
        half = _progressCircularSVG.half,
        radius = _progressCircularSVG.radius,
        dashArray = _progressCircularSVG.dashArray,
        dashOffset = _progressCircularSVG.dashOffset;

  return _react.default.createElement(IndeterminateContainer, null, _react.default.createElement(IndeterminateSpinner, null, _react.default.createElement(CircleClipper, null, _react.default.createElement(LeftCircleContainer, {
    viewBox: `0 0 ${half * 2} ${half * 2}`,
    xmlns: "http://www.w3.org/2000/svg"
  }, _react.default.createElement("circle", {
    cx: half,
    cy: half,
    r: radius,
    strokeDasharray: dashArray,
    strokeDashoffset: dashOffset,
    strokeWidth: stroke
  }))), _react.default.createElement(GapPatch, null, _react.default.createElement(_ProgressSvg.CircleContainer, {
    viewBox: `0 0 ${half * 2} ${half * 2}`,
    xmlns: "http://www.w3.org/2000/svg"
  }, _react.default.createElement("circle", {
    cx: half,
    cy: half,
    r: radius,
    strokeDasharray: dashArray,
    strokeDashoffset: dashOffset,
    strokeWidth: stroke - 0.6
  }))), _react.default.createElement(CircleClipper, null, _react.default.createElement(RightCircleContainer, {
    viewBox: `0 0 ${half * 2} ${half * 2}`,
    xmlns: "http://www.w3.org/2000/svg"
  }, _react.default.createElement("circle", {
    cx: half,
    cy: half,
    r: radius,
    strokeDasharray: dashArray,
    strokeDashoffset: dashOffset,
    strokeWidth: stroke
  })))));
};

exports.IndeterminateProgress = IndeterminateProgress;
const containerRotate = (0, _styledComponents.keyframes)(["to{transform:rotate(360deg);}"]);

const spinnerRotateAnimations = () => [...Array(9)].map((_, i) => `${i * 12.5}% {transform: rotate(${i * 0.5 * _constants.progressCircularConstants.arcSize}deg)}`);

const spinnerKeyFrames = (0, _styledComponents.keyframes)(["", ""], spinnerRotateAnimations().join('\n'));

const containerAnimation = () => {
  const duration = 360 * _constants.progressCircularConstants.arcTime / (_constants.progressCircularConstants.arcStartRotationInterval + (360 - _constants.progressCircularConstants.arcSize));
  return (0, _styledComponents.css)(["animation:", " ", "ms linear infinite;"], containerRotate, duration);
};

const leftSpin = (0, _styledComponents.keyframes)(["from{transform:rotate(265deg);}50%{transform:rotate(130deg);}to{transform:rotate(265deg);}"]);
const rightSpin = (0, _styledComponents.keyframes)(["from{transform:rotate(-265deg);}50%{transform:rotate(-130deg);}to{transform:rotate(-265deg);}"]);

const IndeterminateSpinner = _styledComponents.default.div.withConfig({
  displayName: "IndeterminateProgress__IndeterminateSpinner",
  componentId: "sc-1vb6yjx-0"
})(["height:100%;position:absolute;width:100%;"]);

const IndeterminateContainer = _styledComponents.default.div.withConfig({
  displayName: "IndeterminateProgress__IndeterminateContainer",
  componentId: "sc-1vb6yjx-1"
})(["font-size:0;height:100%;letter-spacing:0;position:absolute;white-space:nowrap;width:100%;", " ", "{animation:", " ", "ms ", " infinite both;}"], containerAnimation, IndeterminateSpinner, spinnerKeyFrames, _constants.progressCircularConstants.arcTime * 4, _constants.progressCircularConstants.timingFunction);

const LeftCircleContainer = (0, _styledComponents.default)(_ProgressSvg.CircleContainer).withConfig({
  displayName: "IndeterminateProgress__LeftCircleContainer",
  componentId: "sc-1vb6yjx-2"
})(["animation-name:", ";"], leftSpin);
const RightCircleContainer = (0, _styledComponents.default)(_ProgressSvg.CircleContainer).withConfig({
  displayName: "IndeterminateProgress__RightCircleContainer",
  componentId: "sc-1vb6yjx-3"
})(["animation-name:", ";left:-100%;"], rightSpin);

const CircleClipper = _styledComponents.default.div.withConfig({
  displayName: "IndeterminateProgress__CircleClipper",
  componentId: "sc-1vb6yjx-4"
})(["display:inline-flex;height:100%;overflow:hidden;position:relative;width:50%;", "{animation-duration:", "ms;animation-fill-mode:both;animation-iteration-count:infinite;animation-timing-function:", ";width:200%;}"], _ProgressSvg.CircleContainer, _constants.progressCircularConstants.arcTime, _constants.progressCircularConstants.timingFunction);

const GapPatch = _styledComponents.default.div.withConfig({
  displayName: "IndeterminateProgress__GapPatch",
  componentId: "sc-1vb6yjx-5"
})(["box-sizing:border-box;height:100%;left:47.5%;overflow:hidden;position:absolute;top:0;width:5%;", "{left:-900%;transform:rotate(180deg);width:2000%;}"], _ProgressSvg.CircleContainer);
//# sourceMappingURL=IndeterminateProgress.js.map
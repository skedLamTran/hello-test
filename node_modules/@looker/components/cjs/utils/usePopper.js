"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopper = usePopper;

var _cloneDeep = _interopRequireDefault(require("lodash/cloneDeep"));

var _concat = _interopRequireDefault(require("lodash/concat"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _react = require("react");

var _core = require("@popperjs/core");

var _getCurrentNode = require("./getCurrentNode");

var _useCallbackRef3 = require("./useCallbackRef");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function usePopper({
  anchor,
  target,
  options
}) {
  const _useState = (0, _react.useState)({
    popper: {
      left: '0',
      margin: '0',
      position: 'fixed',
      top: '-9999px'
    }
  }),
        _useState2 = _slicedToArray(_useState, 2),
        styles = _useState2[0],
        setStyles = _useState2[1];

  const _useState3 = (0, _react.useState)(options.placement),
        _useState4 = _slicedToArray(_useState3, 2),
        truePlacement = _useState4[0],
        setTruePlacement = _useState4[1];

  const popperInstanceRef = (0, _react.useRef)();

  const _useCallbackRef = (0, _useCallbackRef3.useCallbackRef)(),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        targetElement = _useCallbackRef2[0],
        targetRef = _useCallbackRef2[1];

  const mergedOptions = (0, _react.useMemo)(() => (0, _merge.default)(options, {
    modifiers: (0, _concat.default)(options && options.modifiers, [{
      enabled: false,
      name: 'applyStyles'
    }, {
      enabled: true,
      fn: ({
        state: {
          placement
        }
      }) => setTruePlacement(placement),
      name: 'update-placement',
      phase: 'afterWrite'
    }, {
      enabled: true,
      fn: ({
        state: {
          styles
        }
      }) => setStyles((0, _cloneDeep.default)(styles)),
      name: 'update-styles',
      phase: 'afterWrite'
    }, {
      enabled: true,
      name: 'preventOverflow',
      options: {
        boundary: 'viewport',
        padding: 8
      }
    }]),
    strategy: 'fixed'
  }), [options]);
  (0, _react.useEffect)(() => {
    const anchorNode = (0, _getCurrentNode.getCurrentNode)(anchor);
    const targetNode = target ? (0, _getCurrentNode.getCurrentNode)(target) : targetElement;

    if (anchorNode && targetNode) {
      popperInstanceRef.current = (0, _core.createPopper)(anchorNode, targetNode, mergedOptions);
    }

    return () => {
      popperInstanceRef.current && popperInstanceRef.current.destroy();
    };
  }, [anchor, target, targetElement, mergedOptions]);
  return {
    placement: truePlacement,
    popperInstanceRef,
    style: styles.popper,
    targetRef
  };
}
//# sourceMappingURL=usePopper.js.map
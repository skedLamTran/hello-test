{"version":3,"sources":["../../../src/utils/useGlobalHotkeys.ts"],"names":["keyCommandCollection","doRectsIntersect","r1","r2","left","right","top","bottom","calculateIntersectionPoint","y","Math","max","x","organizeKeyCommands","shortcut","commandGroup","sort","ev1","ev2","rect1","target","getBoundingClientRect","rect2","stackedElements","document","elementsFromPoint","idx1","findIndex","el","idx2","executeFirstKeyCommand","e","cbStack","cb","discardStaleCommands","keyCommand","commandSet","Set","event","body","contains","useGlobalHotkeys","containerRef","current","newCommand","add","wrappedCb","handler","orderedEventListeners","filter"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { useHotkeys } from 'react-hotkeys-hook'\nimport type { HotkeysEvent } from 'hotkeys-js'\nimport type { MutableRefObject } from 'react'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport debounce from 'lodash/debounce'\n\ntype CB = (e?: KeyboardEvent) => void\n\ninterface Command {\n  cb: CB\n  target: HTMLElement\n}\n\n/*\n * keyCommandCollection is a collection of all global hotkeys callbacks, grouped by key command.\n * This will mutate as global hotkeys are added or target elements are removed.\n * Example: {\n *   esc: [{ cb: () => {}, target: HTMLDivElement }],\n * }\n */\nconst keyCommandCollection: { [key: string]: Set<Command> } = {}\n\n/*\n * doRectsIntersect calculates whether two elements (often two focus traps)\n * are layered on top of each other.\n */\nconst doRectsIntersect = (r1: DOMRect, r2: DOMRect) => {\n  return !(\n    r2.left > r1.right ||\n    r2.right < r1.left ||\n    r2.top > r1.bottom ||\n    r2.bottom < r1.top\n  )\n}\n\n/*\n * calculateIntersectionPoint returns a pixel coordinate where two elements\n * are layered on top of each other.\n */\nconst calculateIntersectionPoint = (r1: DOMRect, r2: DOMRect) => {\n  const y = Math.max(r2.top, r1.top)\n  const x = Math.max(r1.left, r2.left)\n  return { x, y }\n}\n\n/*\n * organizeKeyCommands grabs a key command Set and returns an ordered array.\n * Array sorted by dom stacking order.\n */\nconst organizeKeyCommands = (shortcut: string) => {\n  // convert from Set to array for sorting\n  const commandGroup = [\n    ...(get(keyCommandCollection, shortcut, []) as Command[]),\n  ]\n\n  // sort elements by dom nesting order\n  commandGroup.sort((ev1, ev2) => {\n    const rect1 = ev1.target.getBoundingClientRect()\n    const rect2 = ev2.target.getBoundingClientRect()\n\n    if (!doRectsIntersect(rect1, rect2)) {\n      // no intersection. return 0 to specify equal stacking order.\n      return 0\n    } else {\n      // elements intersect! sort by dom stacking order\n      const { x, y } = calculateIntersectionPoint(rect1, rect2)\n      const stackedElements = document.elementsFromPoint(x, y)\n      const idx1 = stackedElements.findIndex(el => el === ev1.target)\n      const idx2 = stackedElements.findIndex(el => el === ev2.target)\n      return idx1 > idx2 ? 1 : -1\n    }\n  })\n\n  return commandGroup\n}\n\n/*\n * executeFirstKeyCommand calls a single keyboard event callback taken from the\n * top of the Command array. The function is Debounced to prevent event bubbling\n * from firing multiple callbacks.\n */\nconst executeFirstKeyCommand = debounce(\n  (e: KeyboardEvent, cbStack: Command[]) => {\n    cbStack[0] && cbStack[0].cb(e)\n  },\n  50\n)\n\n/*\n * discardStaleCommands filters out event listeners for elements that are\n * no longer in the document\n */\nconst discardStaleCommands = (keyCommand: string) => {\n  const commandSet = keyCommandCollection[keyCommand]\n  keyCommandCollection[keyCommand] = new Set(\n    filter(\n      [...commandSet],\n      // filter out elements that are no longer in the document\n      event => document.body.contains(event.target)\n    )\n  )\n}\n\n/*\n * useGlobalHotkeys takes a keyCommand, callback, and dom ref.\n * It then adds a unique copy to keyCommandCollection, and passes a wrapped\n * version to the useHotkeys function.\n */\nexport const useGlobalHotkeys = (\n  keyCommand: string,\n  cb: CB,\n  containerRef: MutableRefObject<null | HTMLElement>\n) => {\n  if (containerRef.current) {\n    const newCommand: Command = { cb, target: containerRef.current }\n    const commandSet = get(\n      keyCommandCollection,\n      keyCommand,\n      new Set()\n    ) as Set<Command>\n    commandSet.add(newCommand)\n    keyCommandCollection[keyCommand] = commandSet\n  }\n\n  // wrappedCb organizes the list by dom stacking order and only calls the\n  // callback associated with the focused element\n  const wrappedCb = (e: KeyboardEvent, handler: HotkeysEvent) => {\n    discardStaleCommands(handler.shortcut)\n    const orderedEventListeners = organizeKeyCommands(handler.shortcut)\n    executeFirstKeyCommand(e, orderedEventListeners)\n  }\n\n  useHotkeys(keyCommand, wrappedCb, {\n    filter: () => {\n      // By default, useHotkeys filters out events when form inputs are focused.\n      // We can return true here to allow all events regardless of context.\n      // for more information on usage: https://github.com/jaywcjlove/hotkeys/#filter\n      return true\n    },\n  })\n}\n"],"file":"useGlobalHotkeys.js"}
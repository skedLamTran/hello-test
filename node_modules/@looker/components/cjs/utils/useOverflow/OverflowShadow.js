"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OverflowShadow = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const OverflowShadowStyle = (0, _styledComponents.css)(["border-bottom:1px solid ", ";border-top:1px solid ", ";box-shadow:inset 0 -4px 4px -4px ", ";"], ({
  theme
}) => theme.colors.ui2, ({
  theme
}) => theme.colors.ui2, ({
  theme
}) => theme.colors.ui2);

const OverflowShadow = _styledComponents.default.div.withConfig({
  displayName: "OverflowShadow",
  componentId: "sc-1d4s5ma-0"
})(["", " ", " ", ""], _designTokens.reset, ({
  hasOverflow
}) => hasOverflow && OverflowShadowStyle, _designTokens.padding);

exports.OverflowShadow = OverflowShadow;
//# sourceMappingURL=OverflowShadow.js.map
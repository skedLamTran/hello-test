"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDelayedState = useDelayedState;

var _react = require("react");

var _undefinedCoalesce = require("./undefinedCoalesce");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const reducer = (state, {
  type,
  payload = {}
}) => {
  switch (type) {
    case 'CHANGE':
      return {
        delay: false,
        futureValue: undefined,
        value: (0, _undefinedCoalesce.undefinedCoalesce)([payload.value, state.futureValue])
      };

    case 'WAIT_CHANGE':
      return {
        delay: state.delay,
        futureValue: state.delay ? payload.value : undefined,
        value: state.delay ? state.value : payload.value || state.value
      };

    case 'DELAY_CHANGE':
      return _objectSpread(_objectSpread({}, state), {}, {
        delay: state.value === payload.value ? false : payload.delay || 0,
        futureValue: payload.value,
        value: state.value
      });
  }
};

function useDelayedState(initialValue) {
  const _useReducer = (0, _react.useReducer)(reducer, {
    delay: false,
    value: initialValue
  }),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        _useReducer2$ = _useReducer2[0],
        delay = _useReducer2$.delay,
        value = _useReducer2$.value,
        dispatch = _useReducer2[1];

  const change = (0, _react.useCallback)(newValue => dispatch({
    payload: {
      value: newValue
    },
    type: 'CHANGE'
  }), []);
  const delayChange = (0, _react.useCallback)((newValue, delay) => dispatch({
    payload: {
      delay,
      value: newValue
    },
    type: 'DELAY_CHANGE'
  }), []);
  const waitChange = (0, _react.useCallback)(newValue => dispatch({
    payload: {
      value: newValue
    },
    type: 'WAIT_CHANGE'
  }), []);
  (0, _react.useEffect)(() => {
    let t;

    if (delay !== false) {
      t = setTimeout(() => {
        dispatch({
          type: 'CHANGE'
        });
      }, delay);
    }

    return () => {
      clearTimeout(t);
    };
  }, [delay]);
  return {
    change,
    delayChange,
    value,
    waitChange
  };
}
//# sourceMappingURL=useDelayedState.js.map
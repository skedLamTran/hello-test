"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimationState = void 0;

require("core-js/modules/es.array.includes.js");

var _designTokens = require("@looker/design-tokens");

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const busyStates = ['entering', 'exiting'];

const useAnimationState = ({
  enter = 'moderate',
  exit = 'moderate',
  isOpen,
  onAfterEntered,
  onAfterExited
}) => {
  const _useState = (0, _react.useState)('exited'),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

  const timingEnter = _designTokens.transitions[enter];
  const timingExit = _designTokens.transitions[exit];
  (0, _react.useEffect)(() => {
    if (!isOpen && state === 'exited') return;
    if (isOpen && state === 'entered') return;
    let t;

    if (isOpen) {
      if (!timingEnter) {
        setState('entered');
      } else {
        setState('entering');
        t = setTimeout(() => setState('entered'), timingEnter);
      }
    } else {
      if (!timingExit) {
        setState('exited');
      } else {
        setState('exiting');
        t = setTimeout(() => setState('exited'), timingExit);
      }
    }

    return () => {
      t && clearTimeout(t);
    };
  }, [isOpen, timingEnter, timingExit, state]);
  const previousStateRef = (0, _react.useRef)(state);
  (0, _react.useEffect)(() => {
    if (state === 'entered' && previousStateRef.current !== 'entered') {
      onAfterEntered === null || onAfterEntered === void 0 ? void 0 : onAfterEntered();
    }

    if (state === 'exited' && previousStateRef.current !== 'exited') {
      onAfterExited === null || onAfterExited === void 0 ? void 0 : onAfterExited();
    }

    previousStateRef.current = state;
  }, [state, onAfterExited, onAfterEntered]);
  return {
    busy: busyStates.includes(state),
    className: state,
    renderDOM: state !== 'exited'
  };
};

exports.useAnimationState = useAnimationState;
//# sourceMappingURL=useAnimationState.js.map
{"version":3,"sources":["../../../src/utils/useMouseDownClick.ts"],"names":["useMouseDownClick","onMouseDownClick","onMouseUp","mouseDownTriggered","handleMouseUp","e","window","requestAnimationFrame","current","document","removeEventListener","onClick","onMouseDown","addEventListener"],"mappings":";;;;;;;AAgCA;;AAKO,SAASA,iBAAT,CACLC,gBADK,EAELC,SAFK,EAGL;AACA,QAAMC,kBAAkB,GAAG,mBAAO,KAAP,CAA3B;AAMA,QAAMC,aAAa,GAAG,wBACnBC,CAAD,IAAmB;AACjBC,IAAAA,MAAM,CAACC,qBAAP,CAA6B,MAAM;AACjCJ,MAAAA,kBAAkB,CAACK,OAAnB,GAA6B,KAA7B;AACAN,MAAAA,SAAS,IAAIA,SAAS,CAACG,CAAD,CAAtB;AACD,KAHD;AAID,GANmB,EAOpB,CAACH,SAAD,CAPoB,CAAtB;AAUA,wBAAU,MAAM;AACd,WAAO,MAAM;AACXO,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,SAA7B,EAAwCN,aAAxC;AACD,KAFD;AAGD,GAJD,EAIG,CAACA,aAAD,CAJH;AAMA,SAAO;AACLO,IAAAA,OAAO,EAAE,wBACNN,CAAD,IAA2B;AACzB,UAAI,CAACF,kBAAkB,CAACK,OAAxB,EAAiC;AAC/BP,QAAAA,gBAAgB,CAACI,CAAD,CAAhB;AACD;AACF,KALM,EAMP,CAACJ,gBAAD,CANO,CADJ;AASLW,IAAAA,WAAW,EAAE,wBACVP,CAAD,IAA2B;AACzBF,MAAAA,kBAAkB,CAACK,OAAnB,GAA6B,IAA7B;AACAP,MAAAA,gBAAgB,CAACI,CAAD,CAAhB;AACAI,MAAAA,QAAQ,CAACI,gBAAT,CAA0B,SAA1B,EAAqCT,aAArC;AACD,KALU,EAMX,CAACA,aAAD,EAAgBH,gBAAhB,CANW;AATR,GAAP;AAkBD","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\n// This hook allows you to merge click and mousedown behavior to a single callback\n// which will trigger on mousedown or on click if mousedown has not already been triggered\n// onMouseUp is an optional callback parameter for any necessary cleanup or cancellations\n// because the user changed their mind and dragged out of the element before mouseup\n\nimport type { MouseEvent as ReactMouseEvent } from 'react'\nimport { useEffect, useRef, useCallback } from 'react'\n/**\n * @param onMouseDownClick callback with React.MouseEvent for the first of either mousedown OR click\n * @param onMouseUp callback with DOM MouseEvent for mouseup (may be outside the element)\n */\nexport function useMouseDownClick<E extends HTMLElement>(\n  onMouseDownClick: (e: ReactMouseEvent<E>) => void,\n  onMouseUp?: (e: MouseEvent) => void\n) {\n  const mouseDownTriggered = useRef(false)\n\n  // User may hold the mouse down for an unspecified length of time\n  // and they may drag out of the element in question before mouseup\n  // in which case, onMouseDown has been called but not onClick\n  // so we need to provide the opportunity to \"reverse\" the action (e.g. close the menu)\n  const handleMouseUp = useCallback(\n    (e: MouseEvent) => {\n      window.requestAnimationFrame(() => {\n        mouseDownTriggered.current = false\n        onMouseUp && onMouseUp(e)\n      })\n    },\n    [onMouseUp]\n  )\n\n  useEffect(() => {\n    return () => {\n      document.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [handleMouseUp])\n\n  return {\n    onClick: useCallback(\n      (e: ReactMouseEvent<E>) => {\n        if (!mouseDownTriggered.current) {\n          onMouseDownClick(e)\n        }\n      },\n      [onMouseDownClick]\n    ),\n    onMouseDown: useCallback(\n      (e: ReactMouseEvent<E>) => {\n        mouseDownTriggered.current = true\n        onMouseDownClick(e)\n        document.addEventListener('mouseup', handleMouseUp)\n      },\n      [handleMouseUp, onMouseDownClick]\n    ),\n  }\n}\n"],"file":"useMouseDownClick.js"}
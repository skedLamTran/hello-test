"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VIEWPORT_MAP = void 0;

require("core-js/modules/es.array.iterator.js");

var _toPairs = _interopRequireDefault(require("lodash/toPairs"));

var _startCase = _interopRequireDefault(require("lodash/startCase"));

var _designTokens = require("@looker/design-tokens");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const VIEWPORT_MAP = (0, _toPairs.default)(_designTokens.BreakpointRamp).reduce((map, [name, size]) => {
  const sizePx = (0, _designTokens.convertRemToPx)(parseInt(size || '', 10));
  const width = `${sizePx}px`;
  const height = sizePx < (0, _designTokens.convertRemToPx)(parseInt(_designTokens.breakpoints[2])) ? `${Math.round(sizePx * 2.16)}px` : `${Math.round(sizePx * 0.55)}px`;
  return _objectSpread(_objectSpread({}, map), {}, {
    [name]: {
      name: (0, _startCase.default)(name),
      styles: {
        height,
        width
      },
      type: name
    }
  });
}, {});
exports.VIEWPORT_MAP = VIEWPORT_MAP;
//# sourceMappingURL=viewportMap.js.map
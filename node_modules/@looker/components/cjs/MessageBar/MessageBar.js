"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageBar = void 0;

var _designTokens = require("@looker/design-tokens");

var _Close = require("@styled-icons/material/Close");

var _noop = _interopRequireDefault(require("lodash/noop"));

var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));

var _react = _interopRequireWildcard(require("react"));

var _reactI18next = require("react-i18next");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Button = require("../Button");

var _Space = require("../Layout/Space");

var _simple = require("../Layout/utils/simple");

var _utils = require("../utils");

var _Status = require("../Status");

const _excluded = ["id", "children", "intent", "visible", "onPrimaryClick", "onSecondaryClick", "primaryAction", "secondaryAction", "noActions"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const NoopComponent = () => _react.default.createElement(_react.default.Fragment, null);

function getPrimaryActionButton(t, primaryAction) {
  switch (typeof primaryAction) {
    case 'string':
      return ({
        onClick
      }) => _react.default.createElement(_Button.ButtonTransparent, {
        onClick: onClick
      }, primaryAction);

    case 'object':
      return () => primaryAction;

    default:
      return ({
        intent,
        onClick,
        id
      }) => _react.default.createElement(_Button.IconButton, {
        id: id ? `${id}-iconButton` : undefined,
        onClick: onClick,
        icon: _react.default.createElement(_Close.Close, null),
        size: "small",
        label: `${t('DismissIntent', {
          intent: (0, _Status.getIntentLabel)(t, intent)
        })}`
      });
  }
}

function getSecondaryActionButton(secondaryAction) {
  switch (typeof secondaryAction) {
    case 'string':
      return ({
        onClick
      }) => _react.default.createElement(_Button.ButtonTransparent, {
        onClick: onClick,
        color: "neutral"
      }, secondaryAction);

    case 'object':
      return () => secondaryAction;

    default:
      return NoopComponent;
  }
}

const MessageBarLayout = (0, _react.forwardRef)((_ref, ref) => {
  let id = _ref.id,
      children = _ref.children,
      _ref$intent = _ref.intent,
      intent = _ref$intent === void 0 ? 'inform' : _ref$intent,
      visibleProp = _ref.visible,
      _ref$onPrimaryClick = _ref.onPrimaryClick,
      onPrimaryClick = _ref$onPrimaryClick === void 0 ? _noop.default : _ref$onPrimaryClick,
      _ref$onSecondaryClick = _ref.onSecondaryClick,
      onSecondaryClick = _ref$onSecondaryClick === void 0 ? _noop.default : _ref$onSecondaryClick,
      primaryAction = _ref.primaryAction,
      secondaryAction = _ref.secondaryAction,
      _ref$noActions = _ref.noActions,
      noActions = _ref$noActions === void 0 ? false : _ref$noActions,
      props = _objectWithoutProperties(_ref, _excluded);

  (0, _utils.useReadOnlyWarn)('MessageBar', visibleProp, onPrimaryClick);

  const _useState = (0, _react.useState)((0, _isUndefined.default)(visibleProp) ? true : visibleProp),
        _useState2 = _slicedToArray(_useState, 2),
        visible = _useState2[0],
        setVisible = _useState2[1];

  const handlePrimaryClick = () => {
    setVisible(visibleProp || false);
    onPrimaryClick();
  };

  const handleSecondaryClick = () => {
    setVisible(visibleProp || false);
    onSecondaryClick();
  };

  (0, _react.useEffect)(() => {
    if (!(0, _isUndefined.default)(visibleProp)) {
      setVisible(visibleProp);
    }
  }, [visibleProp]);

  const _useTranslation = (0, _reactI18next.useTranslation)('MessageBar'),
        t = _useTranslation.t;

  const PrimaryButton = getPrimaryActionButton(t, primaryAction);
  const SecondaryButton = getSecondaryActionButton(secondaryAction);

  const messageBarMarkup = _react.default.createElement("div", _extends({
    "aria-live": "polite",
    ref: ref,
    role: "status"
  }, (0, _designTokens.omitStyledProps)(props)), _react.default.createElement(_Status.Status, {
    intent: intent
  }), _react.default.createElement(MessageBarContent, null, children), !noActions && _react.default.createElement(_Space.Space, {
    width: "auto"
  }, _react.default.createElement(SecondaryButton, {
    onClick: handleSecondaryClick
  }), _react.default.createElement(PrimaryButton, {
    intent: intent,
    onClick: handlePrimaryClick,
    id: id
  })));

  return visible ? messageBarMarkup : null;
});
MessageBarLayout.displayName = 'MessageBarLayout';

const MessageBarContent = _styledComponents.default.div.withConfig({
  displayName: "MessageBar__MessageBarContent",
  componentId: "sc-11gt222-0"
})(["flex-grow:1;padding:0 ", ";"], ({
  theme: {
    space
  }
}) => space.u5);

const backgroundColor = (0, _designTokens.variant)({
  prop: 'intent',
  variants: {
    critical: {
      backgroundColor: 'criticalAccent'
    },
    inform: {
      backgroundColor: 'informAccent'
    },
    positive: {
      backgroundColor: 'positiveAccent'
    },
    warn: {
      backgroundColor: 'warnAccent'
    }
  }
});
const MessageBar = (0, _styledComponents.default)(MessageBarLayout).attrs(({
  intent = 'inform',
  px = 'medium',
  py = 'small',
  width = '100%'
}) => ({
  intent,
  px,
  py,
  width
})).withConfig({
  displayName: "MessageBar",
  componentId: "sc-11gt222-1"
})(["", " align-items:center;", " border-radius:", ";color:", ";display:flex;font-size:", ";"], _simple.simpleLayoutCSS, backgroundColor, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  theme: {
    colors
  }
}) => colors.text5, ({
  theme: {
    fontSizes
  }
}) => fontSizes.small);
exports.MessageBar = MessageBar;
//# sourceMappingURL=MessageBar.js.map
"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _react = _interopRequireWildcard(require("react"));

var _Accordion = require("../Accordion2");

var _Layout = require("../Layout");

var _utils = require("../utils");

var _List = require("../List");

var _ListItem = require("../ListItem");

var _utils2 = require("../ListItem/utils");

var _TreeContext = require("./TreeContext");

var _utils3 = require("./utils");

var _WindowedTreeNode = require("./WindowedTreeNode");

var _TreeItem = require("./TreeItem");

var _TreeItemContent = require("./TreeItemContent");

var _TreeItemLabel = require("./TreeItemLabel");

const _excluded = ["assumeIconAlignment", "border", "children", "dividers", "forceLabelPadding", "isOpen", "itemRole", "label", "labelBackgroundOnly", "defaultOpen", "onBlur", "onClose", "onFocus", "onOpen", "onMouseEnter", "onMouseLeave", "toggleOpen"],
      _excluded2 = ["indicator", "children"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const TreeLayout = _ref => {
  let assumeIconAlignment = _ref.assumeIconAlignment,
      propsBorder = _ref.border,
      children = _ref.children,
      dividers = _ref.dividers,
      forceLabelPadding = _ref.forceLabelPadding,
      propsIsOpen = _ref.isOpen,
      _ref$itemRole = _ref.itemRole,
      itemRole = _ref$itemRole === void 0 ? 'none' : _ref$itemRole,
      label = _ref.label,
      propsLabelBackgroundOnly = _ref.labelBackgroundOnly,
      defaultOpen = _ref.defaultOpen,
      onBlur = _ref.onBlur,
      onClose = _ref.onClose,
      onFocus = _ref.onFocus,
      onOpen = _ref.onOpen,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      propsToggleOpen = _ref.toggleOpen,
      restProps = _objectWithoutProperties(_ref, _excluded);

  const _partitionTreeProps = (0, _utils3.partitionTreeProps)(restProps),
        _partitionTreeProps2 = _slicedToArray(_partitionTreeProps, 2),
        treeItemInnerProps = _partitionTreeProps2[0],
        accordionInnerProps = _partitionTreeProps2[1];

  const _useTreeHandlers = (0, _utils3.useTreeHandlers)({
    onFocus,
    onMouseEnter,
    onMouseLeave
  }),
        hovered = _useTreeHandlers.hovered,
        contentHandlers = _useTreeHandlers.contentHandlers,
        wrapperHandlers = _useTreeHandlers.wrapperHandlers;

  const _ref2 = treeItemInnerProps,
        propsColor = _ref2.color,
        propsDensity = _ref2.density,
        disabled = _ref2.disabled,
        href = _ref2.href,
        icon = _ref2.icon,
        rel = _ref2.rel,
        selected = _ref2.selected,
        target = _ref2.target;

  const _partitionAriaProps = (0, _utils.partitionAriaProps)(restProps),
        _partitionAriaProps2 = _slicedToArray(_partitionAriaProps, 1),
        ariaProps = _partitionAriaProps2[0];

  const listContext = (0, _react.useContext)(_ListItem.ListItemContext);
  const treeContext = (0, _react.useContext)(_TreeContext.TreeContext);

  const _useContext = (0, _react.useContext)(_WindowedTreeNode.WindowedTreeContext),
        collectionDensity = _useContext.density,
        contextIsOpen = _useContext.isOpen,
        toggleNode = _useContext.toggleNode,
        partialRender = _useContext.partialRender;

  const isOpen = contextIsOpen !== null && contextIsOpen !== void 0 ? contextIsOpen : propsIsOpen;
  const toggleOpen = toggleNode !== null && toggleNode !== void 0 ? toggleNode : propsToggleOpen;
  const border = (0, _utils.undefinedCoalesce)([propsBorder, treeContext.border]);
  const color = (0, _utils.undefinedCoalesce)([propsColor, treeContext.color, listContext.color]);
  const hasLabelBackgroundOnly = (0, _utils.undefinedCoalesce)([propsLabelBackgroundOnly, treeContext.labelBackgroundOnly]);
  const startingDepth = 0;
  const depth = treeContext.depth ? treeContext.depth : startingDepth;
  const density = collectionDensity || propsDensity || treeContext.density || 0;
  const indicatorIcons = _utils3.indicatorDefaults.indicatorIcons,
        indicatorPosition = _utils3.indicatorDefaults.indicatorPosition;

  const _createListItemPartit = (0, _utils2.createListItemPartitions)(_objectSpread(_objectSpread({}, treeItemInnerProps), {}, {
    children: label,
    color,
    density,
    icon
  })),
        _createListItemPartit2 = _slicedToArray(_createListItemPartit, 2),
        inside = _createListItemPartit2[0],
        outside = _createListItemPartit2[1];

  let accordionProps = _objectSpread({
    defaultOpen,
    onClose,
    onOpen
  }, accordionInnerProps);

  if (isOpen !== undefined && toggleOpen) {
    accordionProps = _objectSpread(_objectSpread({}, accordionProps), {}, {
      isOpen,
      toggleOpen
    });
  }

  const _useAccordion = (0, _Accordion.useAccordion2)(_objectSpread({
    'aria-selected': selected,
    children: _react.default.createElement(_List.List, {
      disableKeyboardNav: true,
      role: "group",
      windowing: false
    }, children),
    density,
    disabled,
    indicatorIcons,
    indicatorPosition,
    label: inside,
    onBlur,
    role: 'treeitem',
    tabIndex: -1
  }, accordionProps)),
        contentDomProps = _useAccordion.contentDomProps,
        domProps = _useAccordion.domProps,
        disclosureProps = _useAccordion.disclosureProps,
        accordionIsOpen = _useAccordion.isOpen;

  const indicator = disclosureProps.indicator,
        disclosureLabel = disclosureProps.children,
        disclosureDomProps = _objectWithoutProperties(disclosureProps, _excluded2);

  const statefulProps = {
    color,
    disabled,
    hovered,
    selected
  };

  const content = _react.default.createElement(_TreeItemContent.TreeItemContent, _extends({
    "aria-selected": selected,
    depth: depth,
    href: href,
    itemRole: itemRole,
    labelBackgroundOnly: hasLabelBackgroundOnly
  }, contentHandlers, {
    rel: (0, _utils.createSafeRel)(rel, target),
    target: target
  }, ariaProps, disclosureDomProps, statefulProps), indicator, hasLabelBackgroundOnly ? _react.default.createElement(_TreeItemLabel.TreeItemLabel, statefulProps, disclosureLabel) : disclosureLabel);

  return _react.default.createElement(_utils.HoverDisclosureContext.Provider, {
    value: {
      visible: hovered
    }
  }, _react.default.createElement(_TreeContext.TreeContext.Provider, {
    value: {
      border,
      color,
      density,
      depth: depth + 1,
      labelBackgroundOnly: hasLabelBackgroundOnly
    }
  }, _react.default.createElement("div", domProps, !partialRender && _react.default.createElement(_Layout.Flex, _extends({
    as: "li",
    color: "text5"
  }, wrapperHandlers), content, outside), accordionIsOpen && _react.default.createElement(TreeAccordionContent, _extends({
    border: border,
    density: density,
    depth: depth
  }, contentDomProps)))));
};

const TreeAccordionContent = _styledComponents.default.div.withConfig({
  displayName: "Tree__TreeAccordionContent",
  componentId: "sc-umxml-0"
})(["", ""], _utils3.generateTreeBorder);

const dividersCSS = (0, _styledComponents.css)(["", "{margin-top:1px;}& &{margin-top:1px;}"], _TreeItem.TreeItem);
const Tree = (0, _styledComponents.default)(TreeLayout).withConfig({
  displayName: "Tree",
  componentId: "sc-umxml-1"
})(["", ""], ({
  dividers
}) => dividers && dividersCSS);
exports.Tree = Tree;
//# sourceMappingURL=Tree.js.map
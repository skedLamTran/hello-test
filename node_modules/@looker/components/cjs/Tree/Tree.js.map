{"version":3,"sources":["../../../src/Tree/Tree.tsx"],"names":["TreeLayout","assumeIconAlignment","propsBorder","border","children","dividers","forceLabelPadding","propsIsOpen","isOpen","itemRole","label","propsLabelBackgroundOnly","labelBackgroundOnly","defaultOpen","onBlur","onClose","onFocus","onOpen","onMouseEnter","onMouseLeave","propsToggleOpen","toggleOpen","restProps","treeItemInnerProps","accordionInnerProps","hovered","contentHandlers","wrapperHandlers","propsColor","color","propsDensity","density","disabled","href","icon","rel","selected","target","ariaProps","listContext","ListItemContext","treeContext","TreeContext","WindowedTreeContext","collectionDensity","contextIsOpen","toggleNode","partialRender","hasLabelBackgroundOnly","startingDepth","depth","indicatorIcons","indicatorDefaults","indicatorPosition","inside","outside","accordionProps","undefined","role","tabIndex","contentDomProps","domProps","disclosureProps","accordionIsOpen","indicator","disclosureLabel","disclosureDomProps","statefulProps","content","visible","TreeAccordionContent","styled","div","generateTreeBorder","dividersCSS","css","TreeItem","Tree"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport styled, { css } from 'styled-components'\nimport React, { useContext } from 'react'\nimport { useAccordion2 } from '../Accordion2'\nimport type { ControlledOrUncontrolled } from '../Accordion2/controlTypes'\nimport { Flex } from '../Layout'\nimport {\n  createSafeRel,\n  HoverDisclosureContext,\n  partitionAriaProps,\n  undefinedCoalesce,\n} from '../utils'\nimport { List } from '../List'\nimport type { ListItemProps } from '../ListItem'\nimport { ListItemContext } from '../ListItem'\nimport { createListItemPartitions } from '../ListItem/utils'\nimport { TreeContext } from './TreeContext'\nimport type { TreeBorderProps } from './utils'\nimport {\n  generateTreeBorder,\n  indicatorDefaults,\n  partitionTreeProps,\n  useTreeHandlers,\n} from './utils'\nimport { WindowedTreeContext } from './WindowedTreeNode'\nimport type { TreeProps } from './types'\nimport { TreeItem } from './TreeItem'\nimport { TreeItemContent } from './TreeItemContent'\nimport { TreeItemLabel } from './TreeItemLabel'\n\n/**\n * TODO: When labelToggle is introduced the aria-* attributes should land on the nested ListItem's\n * label container (i.e. the focusable element).\n */\nconst TreeLayout = ({\n  assumeIconAlignment,\n  border: propsBorder,\n  children,\n  dividers,\n  forceLabelPadding,\n  isOpen: propsIsOpen,\n  itemRole = 'none', // By default, Tree's content container should be a 'div'\n  label,\n  labelBackgroundOnly: propsLabelBackgroundOnly,\n  defaultOpen,\n  onBlur,\n  onClose,\n  onFocus,\n  onOpen,\n  onMouseEnter,\n  onMouseLeave,\n  toggleOpen: propsToggleOpen,\n  ...restProps\n}: TreeProps) => {\n  const [treeItemInnerProps, accordionInnerProps] = partitionTreeProps(\n    restProps\n  )\n\n  const { hovered, contentHandlers, wrapperHandlers } = useTreeHandlers({\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n  })\n\n  const {\n    color: propsColor,\n    density: propsDensity,\n    disabled,\n    href,\n    icon,\n    rel,\n    selected,\n    target,\n  } = treeItemInnerProps as Partial<ListItemProps>\n  const [ariaProps] = partitionAriaProps(restProps)\n\n  const listContext = useContext(ListItemContext)\n  const treeContext = useContext(TreeContext)\n\n  // Context for supporting windowing\n  // - density must be defined at the collection level for consistent child height\n  // - opened / closed state must be managed at the collection level for accurate item count\n  // - partialRender to hide the accordion disclosure if it's above the window\n  const {\n    density: collectionDensity,\n    isOpen: contextIsOpen,\n    toggleNode,\n    partialRender,\n  } = useContext(WindowedTreeContext)\n\n  const isOpen = contextIsOpen ?? propsIsOpen\n  const toggleOpen = toggleNode ?? propsToggleOpen\n\n  const border = undefinedCoalesce([propsBorder, treeContext.border])\n  const color = undefinedCoalesce([\n    propsColor,\n    treeContext.color,\n    listContext.color,\n  ])\n\n  const hasLabelBackgroundOnly = undefinedCoalesce([\n    propsLabelBackgroundOnly,\n    treeContext.labelBackgroundOnly,\n  ])\n  const startingDepth = 0\n  const depth = treeContext.depth ? treeContext.depth : startingDepth\n\n  const density = collectionDensity || propsDensity || treeContext.density || 0\n\n  const { indicatorIcons, indicatorPosition } = indicatorDefaults\n\n  const [inside, outside] = createListItemPartitions({\n    ...treeItemInnerProps,\n    children: label,\n    color,\n    density,\n    icon,\n  })\n  let accordionProps: ControlledOrUncontrolled = {\n    defaultOpen,\n    onClose,\n    onOpen,\n    ...accordionInnerProps,\n  }\n  if (isOpen !== undefined && toggleOpen) {\n    accordionProps = { ...accordionProps, isOpen, toggleOpen }\n  }\n\n  const {\n    contentDomProps,\n    domProps,\n    disclosureProps,\n    isOpen: accordionIsOpen,\n  } = useAccordion2({\n    'aria-selected': selected,\n    children: (\n      <List disableKeyboardNav role=\"group\" windowing={false}>\n        {children}\n      </List>\n    ),\n    density,\n    disabled,\n    indicatorIcons,\n    indicatorPosition,\n    label: inside,\n    onBlur,\n    role: 'treeitem',\n    tabIndex: -1,\n    ...accordionProps,\n  })\n\n  const {\n    indicator,\n    children: disclosureLabel,\n    ...disclosureDomProps\n  } = disclosureProps\n\n  const statefulProps = {\n    color,\n    disabled,\n    hovered,\n    selected,\n  }\n\n  const content = (\n    <TreeItemContent\n      aria-selected={selected}\n      depth={depth}\n      href={href}\n      itemRole={itemRole}\n      labelBackgroundOnly={hasLabelBackgroundOnly}\n      {...contentHandlers}\n      rel={createSafeRel(rel, target)}\n      target={target}\n      {...ariaProps}\n      {...disclosureDomProps}\n      {...statefulProps}\n    >\n      {indicator}\n      {/* @TODO: Delete labelBackgroundOnly behavior once FieldItem component is completed */}\n      {hasLabelBackgroundOnly ? (\n        <TreeItemLabel {...statefulProps}>{disclosureLabel}</TreeItemLabel>\n      ) : (\n        disclosureLabel\n      )}\n    </TreeItemContent>\n  )\n\n  return (\n    <HoverDisclosureContext.Provider value={{ visible: hovered }}>\n      <TreeContext.Provider\n        value={{\n          border,\n          color,\n          density,\n          depth: depth + 1,\n          labelBackgroundOnly: hasLabelBackgroundOnly,\n        }}\n      >\n        <div {...domProps}>\n          {!partialRender && (\n            <Flex as=\"li\" color=\"text5\" {...wrapperHandlers}>\n              {content}\n              {outside}\n            </Flex>\n          )}\n          {accordionIsOpen && (\n            <TreeAccordionContent\n              border={border}\n              density={density}\n              depth={depth}\n              {...contentDomProps}\n            />\n          )}\n        </div>\n      </TreeContext.Provider>\n    </HoverDisclosureContext.Provider>\n  )\n}\n\n/**\n * Container for hidden / revealed content based on Tree open state\n */\nconst TreeAccordionContent = styled.div<TreeBorderProps>`\n  ${generateTreeBorder}\n`\n\n/**\n * @deprecated\n */\nconst dividersCSS = css`\n  ${TreeItem} {\n    margin-top: 1px;\n  }\n\n  & & {\n    margin-top: 1px;\n  }\n`\n\nexport const Tree = styled(TreeLayout)<TreeProps>`\n  ${({ dividers }) => dividers && dividersCSS}\n`\n"],"file":"Tree.js"}
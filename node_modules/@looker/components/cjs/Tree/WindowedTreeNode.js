"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WindowedTreeNode = exports.WindowedTreeContext = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireWildcard(require("react"));

var _TreeCollectionContext = require("./TreeCollectionContext");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const WindowedTreeContext = (0, _react.createContext)({
  partialRender: false
});
exports.WindowedTreeContext = WindowedTreeContext;

const WindowedTreeNode = ({
  content,
  firstIDinWindow,
  id,
  items
}) => {
  const context = (0, _react.useContext)(_TreeCollectionContext.TreeCollectionContext);
  const toggleNode = (0, _react.useCallback)(isOpen => {
    var _context$toggleNode;

    (_context$toggleNode = context.toggleNode) === null || _context$toggleNode === void 0 ? void 0 : _context$toggleNode.call(context, id, isOpen);
  }, [context, id]);

  if (items && (0, _react.isValidElement)(content)) {
    var _context$toggleStateM, _context$toggleStateM2;

    const props = {
      children: items.map(item => _react.default.createElement(WindowedTreeNode, _extends({
        firstIDinWindow: firstIDinWindow
      }, item, {
        key: item.id
      })))
    };
    const isOpen = (_context$toggleStateM = context.toggleStateMap) === null || _context$toggleStateM === void 0 ? void 0 : (_context$toggleStateM2 = _context$toggleStateM[id]) === null || _context$toggleStateM2 === void 0 ? void 0 : _context$toggleStateM2.isOpen;
    return _react.default.createElement(WindowedTreeContext.Provider, {
      value: {
        density: context.density,
        isOpen,
        partialRender: firstIDinWindow ? id < firstIDinWindow : false,
        toggleNode
      }
    }, (0, _react.cloneElement)(content, props));
  }

  return content;
};

exports.WindowedTreeNode = WindowedTreeNode;
//# sourceMappingURL=WindowedTreeNode.js.map
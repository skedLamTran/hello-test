"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWindowedTree = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireWildcard(require("react"));

var _ListItem = require("../../ListItem");

var _utils = require("../../utils");

var _WindowedTreeNode = require("../WindowedTreeNode");

var _windowedTreeReducer = require("./windowedTreeReducer");

var _getWindowedTreeNodeFilterer = require("./getWindowedTreeNodeFilterer");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const useWindowedTree = ({
  density,
  trees
}) => {
  const _useReducer = (0, _react.useReducer)(_windowedTreeReducer.windowedTreeReducer, {
    map: {},
    shownIDs: [],
    treesWithIDs: []
  }),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        _useReducer2$ = _useReducer2[0],
        map = _useReducer2$.map,
        shownIDs = _useReducer2$.shownIDs,
        treesWithIDs = _useReducer2$.treesWithIDs,
        dispatch = _useReducer2[1];

  (0, _react.useEffect)(() => {
    dispatch({
      payload: trees,
      type: 'RESET'
    });
  }, [trees]);
  const toggleNode = (0, _react.useCallback)((id, isOpen) => {
    if (isOpen) {
      dispatch({
        payload: id,
        type: 'OPEN'
      });
    } else {
      dispatch({
        payload: id,
        type: 'CLOSE'
      });
    }
  }, []);

  const _listItemDimensions = (0, _ListItem.listItemDimensions)(density || 0),
        height = _listItemDimensions.height;

  const _useWindow = (0, _utils.useWindow)({
    enabled: shownIDs.length > 100,
    itemCount: shownIDs.length,
    itemHeight: height
  }),
        after = _useWindow.after,
        before = _useWindow.before,
        end = _useWindow.end,
        ref = _useWindow.ref,
        start = _useWindow.start;

  let content = null;

  if (treesWithIDs) {
    const firstIDinWindow = shownIDs[start];
    const lastIDinWindow = shownIDs[end];
    const nodesInWindow = [];
    treesWithIDs.every((0, _getWindowedTreeNodeFilterer.getWindowedTreeNodeFilterer)(nodesInWindow, firstIDinWindow, lastIDinWindow));
    content = _react.default.createElement(_react.default.Fragment, null, before, nodesInWindow.map(tree => _react.default.createElement(_WindowedTreeNode.WindowedTreeNode, _extends({}, tree, {
      firstIDinWindow: firstIDinWindow,
      key: tree.id
    }))), after);
  }

  return {
    content,
    contextValue: {
      density,
      toggleNode,
      toggleStateMap: map
    },
    ref
  };
};

exports.useWindowedTree = useWindowedTree;
//# sourceMappingURL=useWindowedTree.js.map
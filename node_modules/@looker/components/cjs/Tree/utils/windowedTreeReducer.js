"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.windowedTreeReducer = void 0;

require("core-js/modules/es.array.map.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const updateCount = (state, id, isOpen) => {
  var _state$treesWithIDs;

  const shownIDs = [];

  const map = _objectSpread(_objectSpread({}, state.map), {}, {
    [id]: _objectSpread(_objectSpread({}, state.map[id]), {}, {
      isOpen
    })
  });

  const countTree = tree => {
    shownIDs.push(tree.id);

    if (tree.items) {
      const treeIsOpen = map[tree.id].isOpen;

      if (treeIsOpen) {
        tree.items.forEach(countTree);
      }
    }
  };

  (_state$treesWithIDs = state.treesWithIDs) === null || _state$treesWithIDs === void 0 ? void 0 : _state$treesWithIDs.forEach(countTree);
  return _objectSpread(_objectSpread({}, state), {}, {
    map,
    shownIDs
  });
};

const windowedTreeReducer = (state, action) => {
  switch (action.type) {
    case 'RESET':
      {
        const trees = action.payload;
        const map = {};
        const shownIDs = [];
        let id = 0;

        const processTree = parentOpen => tree => {
          id++;

          if (parentOpen) {
            shownIDs.push(id);
          }

          if (tree.items) {
            map[id] = {
              isOpen: tree.isOpen || false,
              length: tree.items.length
            };
            return _objectSpread(_objectSpread({}, tree), {}, {
              id,
              items: tree.items.map(processTree(parentOpen ? tree.isOpen : false))
            });
          }

          return {
            content: tree.content,
            id
          };
        };

        const treesWithIDs = trees.map(processTree(true));
        return {
          map,
          shownIDs,
          treesWithIDs
        };
      }

    case 'OPEN':
      {
        return updateCount(state, action.payload, true);
      }

    case 'CLOSE':
      {
        return updateCount(state, action.payload, false);
      }
  }
};

exports.windowedTreeReducer = windowedTreeReducer;
//# sourceMappingURL=windowedTreeReducer.js.map
"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopoverToggle = void 0;

var _react = require("react");

var _useControlWarn = require("../utils/useControlWarn");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const isNodeInOrAfter = (nodeA, nodeB) => {
  const relationship = nodeA.compareDocumentPosition(nodeB);
  return relationship === Node.DOCUMENT_POSITION_FOLLOWING || relationship === Node.DOCUMENT_POSITION_FOLLOWING + Node.DOCUMENT_POSITION_CONTAINED_BY;
};

const usePopoverToggle = ({
  isOpen: controlledIsOpen = false,
  setOpen: controlledSetOpen,
  canClose,
  triggerToggle,
  cancelClickOutside = false
}, portalElement, triggerElement) => {
  const _useState = (0, _react.useState)(controlledIsOpen),
        _useState2 = _slicedToArray(_useState, 2),
        uncontrolledIsOpen = _useState2[0],
        uncontrolledSetOpen = _useState2[1];

  const _useState3 = (0, _react.useState)(null),
        _useState4 = _slicedToArray(_useState3, 2),
        mouseDownTarget = _useState4[0],
        setMouseDownTarget = _useState4[1];

  const isControlled = (0, _useControlWarn.useControlWarn)({
    controllingProps: ['setOpen'],
    isControlledCheck: () => controlledSetOpen !== undefined,
    name: 'usePopover'
  });
  const isOpen = isControlled ? controlledIsOpen : uncontrolledIsOpen;
  const setOpen = isControlled && controlledSetOpen ? controlledSetOpen : uncontrolledSetOpen;
  (0, _react.useEffect)(() => {
    const checkCloseAndStopEvent = event => {
      if (canClose && !canClose()) return;

      if (portalElement && mouseDownTarget) {
        if (isNodeInOrAfter(portalElement, mouseDownTarget)) {
          return;
        }
      }

      if (portalElement && isNodeInOrAfter(portalElement, event.target)) {
        return;
      }

      const clickedOnToggle = triggerElement && triggerElement.contains(event.target);

      if (!triggerToggle && clickedOnToggle) {
        return;
      }

      setOpen(false);

      if (clickedOnToggle) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }

      if (!cancelClickOutside) {
        return;
      }

      event.stopPropagation();
      event.preventDefault();
    };

    const handleMouseDown = event => {
      setMouseDownTarget(event.target);
      checkCloseAndStopEvent(event);
    };

    const handleClickOutside = event => {
      checkCloseAndStopEvent(event);
      setMouseDownTarget(null);
    };

    const handleMouseUp = () => {
      setMouseDownTarget(null);
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleMouseDown, true);
      document.addEventListener('click', handleClickOutside, true);
    } else if (mouseDownTarget) {
      document.addEventListener('click', handleClickOutside, true);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousedown', handleMouseDown, true);
      document.removeEventListener('click', handleClickOutside, true);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [cancelClickOutside, canClose, isOpen, setOpen, triggerElement, portalElement, triggerToggle, mouseDownTarget]);
  return [isOpen, setOpen];
};

exports.usePopoverToggle = usePopoverToggle;
//# sourceMappingURL=usePopoverToggle.js.map
"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopover = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Layout = require("../Layout");

var _Portal = require("../Portal");

var _Dialog = require("../Dialog");

var _OverlaySurface = require("../Overlay/OverlaySurface");

var _utils = require("../utils");

var _usePopoverToggle3 = require("./usePopoverToggle");

var _useVerticalSpace = require("./useVerticalSpace");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const useOpenWithoutElement = (isOpen, element) => {
  const _useState = (0, _react.useState)(isOpen && element === null),
        _useState2 = _slicedToArray(_useState, 2),
        openWithoutElem = _useState2[0],
        setOpenWithoutElem = _useState2[1];

  (0, _react.useEffect)(() => {
    if (element && openWithoutElem) {
      setOpenWithoutElem(false);
    }
  }, [openWithoutElem, element]);
  return openWithoutElem;
};

const usePopover = ({
  'aria-haspopup': ariaHaspopup,
  canClose,
  content,
  disabled,
  pin = false,
  isOpen: controlledIsOpen = false,
  onClose,
  placement: propsPlacement = 'bottom',
  setOpen: controlledSetOpen,
  triggerElement,
  triggerToggle = true,
  focusTrap = true,
  scrollLock = true,
  cancelClickOutside,
  surface,
  width,
  id
}) => {
  const _useScrollLock = (0, _utils.useScrollLock)({
    disabled: !scrollLock
  }),
        _useScrollLock2 = _slicedToArray(_useScrollLock, 2),
        scrollElement = _useScrollLock2[0],
        scrollRef = _useScrollLock2[1];

  const _useFocusTrap = (0, _utils.useFocusTrap)({
    disabled: !focusTrap
  }),
        _useFocusTrap2 = _slicedToArray(_useFocusTrap, 2),
        focusRef = _useFocusTrap2[1];

  const _useCallbackRef = (0, _utils.useCallbackRef)(),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        newTriggerElement = _useCallbackRef2[0],
        callbackRef = _useCallbackRef2[1];

  const element = typeof triggerElement === 'undefined' ? newTriggerElement : triggerElement;

  const _usePopoverToggle = (0, _usePopoverToggle3.usePopoverToggle)({
    canClose,
    cancelClickOutside,
    isOpen: controlledIsOpen,
    setOpen: controlledSetOpen,
    triggerToggle
  }, scrollElement, element),
        _usePopoverToggle2 = _slicedToArray(_usePopoverToggle, 2),
        isOpen = _usePopoverToggle2[0],
        setOpen = _usePopoverToggle2[1];

  const openWithoutElem = useOpenWithoutElement(isOpen, element);

  const handleOpen = event => {
    if (!disabled) {
      setOpen(true);
    }

    event.stopPropagation();
    event.preventDefault();
  };

  const handleClose = () => {
    if (canClose && !canClose()) return;
    setOpen(false);
    onClose && onClose();
  };

  const usePopperProps = (0, _react.useMemo)(() => ({
    anchor: element,
    options: {
      modifiers: [{
        enabled: !pin,
        name: 'flip',
        options: {
          flipVariations: true,
          flipVariationsByContent: true
        }
      }, {
        enabled: true,
        name: 'eventListeners',
        options: {
          scroll: false
        }
      }],
      placement: propsPlacement
    }
  }), [element, pin, propsPlacement]);

  const _usePopper = (0, _utils.usePopper)(usePopperProps),
        placement = _usePopper.placement,
        popperInstanceRef = _usePopper.popperInstanceRef,
        style = _usePopper.style,
        targetRef = _usePopper.targetRef;

  const verticalSpace = (0, _useVerticalSpace.useVerticalSpace)(element, pin, propsPlacement, isOpen, style);
  const ref = (0, _utils.useForkedRef)(targetRef, focusRef);

  const _useCallbackRef3 = (0, _utils.useCallbackRef)(),
        _useCallbackRef4 = _slicedToArray(_useCallbackRef3, 2),
        containerElement = _useCallbackRef4[0],
        contentContainerRef = _useCallbackRef4[1];

  const SurfaceComponent = surface || _OverlaySurface.OverlaySurface;
  id = (0, _utils.useID)(id);

  const popover = content && !openWithoutElem && isOpen && !disabled && _react.default.createElement(_Dialog.DialogContext.Provider, {
    value: {
      closeModal: handleClose,
      id
    }
  }, _react.default.createElement(_Portal.Portal, {
    ref: scrollRef
  }, _react.default.createElement(SurfaceComponent, {
    "aria-labelledby": `${id}-heading`,
    "aria-modal": true,
    maxWidth: width,
    placement: placement,
    ref: ref,
    role: "dialog",
    style: style
  }, _react.default.createElement(_Layout.Flex, {
    alignItems: "flex-start",
    borderRadius: "inherit",
    flexDirection: "column",
    id: id,
    maxHeight: `calc(${verticalSpace - 10}px - 1rem)`,
    overflowY: "auto",
    ref: contentContainerRef
  }, content))));

  return {
    contentContainer: containerElement,
    domProps: {
      'aria-expanded': isOpen,
      'aria-haspopup': content && !disabled ? ariaHaspopup : false,
      onClick: handleOpen,
      ref: callbackRef
    },
    isOpen,
    open: handleOpen,
    popover,
    popperInstanceRef,
    ref: callbackRef
  };
};

exports.usePopover = usePopover;
//# sourceMappingURL=usePopover.js.map
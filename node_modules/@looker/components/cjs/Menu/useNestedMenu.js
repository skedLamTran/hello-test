"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNestedMenu = void 0;

var _designTokens = require("@looker/design-tokens");

var _omit = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _Dialog = require("../Dialog");

var _Popover = require("../Popover");

var _utils = require("../utils");

var _ListItem = require("../ListItem");

var _NestedMenuProvider = require("./NestedMenuProvider");

var _NestedMenuSurface = require("./NestedMenuSurface");

var _ = require("./");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const movingTowardPlacement = (newPos, prevPos, placement) => {
  if (!prevPos || !placement) return false;

  switch (placement) {
    case 'right-start':
      return newPos.x > prevPos.x && newPos.y > prevPos.y;

    case 'right-end':
      return newPos.x > prevPos.x && newPos.y < prevPos.y;

    case 'left-start':
      return newPos.x < prevPos.x && newPos.y > prevPos.y;

    case 'left-end':
      return newPos.x < prevPos.x && newPos.y < prevPos.y;

    default:
      return newPos.x > prevPos.x && newPos.y > prevPos.y;
  }
};

const noop = () => undefined;

const useNestedMenu = ({
  id,
  onClick,
  onKeyDown,
  onMouseEnter,
  onMouseLeave,
  nestedMenu
}) => {
  const mousePosition = (0, _react.useRef)();
  const focusRef = (0, _react.useRef)(null);

  const _useContext = (0, _react.useContext)(_NestedMenuProvider.NestedMenuContext),
        value = _useContext.value,
        change = _useContext.change,
        delayChange = _useContext.delayChange,
        waitChange = _useContext.waitChange;

  const _useContext2 = (0, _react.useContext)(_Dialog.DialogContext),
        closeModal = _useContext2.closeModal;

  const _useContext3 = (0, _react.useContext)(_ListItem.ListItemContext),
        density = _useContext3.density;

  const isOpen = value === id;

  const openNestedMenu = () => change(id);

  const closeNestedMenu = () => change('');

  const itemHandlers = {
    onClick: (0, _utils.useWrapEvent)(e => {
      if (nestedMenu && !onClick) {
        openNestedMenu();
        e.preventDefault();
      }
    }, onClick),
    onKeyDown: (0, _utils.useWrapEvent)(nestedMenu ? e => {
      if (e.key === 'ArrowRight') {
        openNestedMenu();
        e.preventDefault();
      }
    } : noop, onKeyDown),
    onMouseEnter: (0, _utils.useWrapEvent)(nestedMenu ? e => {
      if (value === '') {
        delayChange(id, 100);
      } else {
        waitChange(id);
      }

      focusRef.current = e.currentTarget;
    } : noop, onMouseEnter),
    onMouseLeave: (0, _utils.useWrapEvent)(nestedMenu ? e => {
      if (isOpen) {
        var _popperInstanceRef$cu;

        if (movingTowardPlacement({
          x: e.screenX,
          y: e.screenY
        }, mousePosition.current, (_popperInstanceRef$cu = popperInstanceRef.current) === null || _popperInstanceRef$cu === void 0 ? void 0 : _popperInstanceRef$cu.state.placement)) {
          delayChange('', _designTokens.transitions.complex);
        } else {
          change('');
        }

        mousePosition.current = undefined;
      } else {
        change('');
      }
    } : noop, onMouseLeave),
    onMouseMove: e => {
      mousePosition.current = {
        x: e.screenX,
        y: e.screenY
      };
    }
  };
  const listHandlers = nestedMenu ? {
    onKeyDown: e => {
      switch (e.key) {
        case 'ArrowLeft':
          closeNestedMenu();
          e.preventDefault();
          break;

        case 'Escape':
          closeModal();
          break;
      }
    },
    onMouseEnter: openNestedMenu
  } : {};

  const _usePopover = (0, _Popover.usePopover)({
    content: _react.default.createElement(_.MenuList, _extends({
      "data-autofocus": "true",
      density: density
    }, listHandlers, {
      closeParentMenu: closeModal
    }), nestedMenu),
    disabled: nestedMenu === undefined,
    isOpen,
    placement: 'right-start',
    scrollLock: false,
    setOpen: closeNestedMenu,
    surface: _NestedMenuSurface.NestedMenuSurface,
    triggerToggle: false
  }),
        popover = _usePopover.popover,
        popperInstanceRef = _usePopover.popperInstanceRef,
        domProps = _usePopover.domProps;

  (0, _react.useEffect)(() => {
    if (isOpen && focusRef.current) {
      const button = focusRef.current.querySelector('a,button');
      button === null || button === void 0 ? void 0 : button.focus();
    }
  }, [isOpen]);

  const combinedDomProps = _objectSpread(_objectSpread({}, itemHandlers), nestedMenu ? (0, _omit.default)(domProps, 'onClick') : {});

  return {
    domProps: combinedDomProps,
    popover
  };
};

exports.useNestedMenu = useNestedMenu;
//# sourceMappingURL=useNestedMenu.js.map
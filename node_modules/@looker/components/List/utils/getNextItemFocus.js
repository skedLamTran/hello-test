import "core-js/modules/es.array.from.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.array.find-index.js";
import { getFallbackElement } from '../../utils/getNextFocus';
export var itemSelector = '[role="treeitem"]:not(:disabled),[role="listitem"]:not(:disabled),[role="menuitem"]:not(:disabled)';
export var getItems = function getItems(ref) {
  return Array.from(ref.querySelectorAll(itemSelector));
};
export var getNextItemFocus = function getNextItemFocus(direction, element, vertical) {
  var items = getItems(element);

  if (items.length > 0) {
    var focusedElement = document.activeElement;
    var isItemFocused = focusedElement && items.includes(focusedElement);
    var closestWrapper = focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.closest('li:not(:disabled)');

    if (vertical) {
      var target = isItemFocused ? focusedElement : closestWrapper.querySelector(itemSelector);
      var next = items.findIndex(function (el) {
        return el === target;
      }) + direction;

      if (next === items.length || !items[next]) {
        return getFallbackElement(direction, element, items);
      }

      return items[next];
    } else if (vertical === false) {
      var tabStops = Array.from(closestWrapper.querySelectorAll('a,input,button:not(:disabled),[tabindex="0"],[tabindex="-1"]:not(:disabled)'));

      var _next = tabStops.findIndex(function (el) {
        return el === focusedElement;
      }) + direction;

      if (_next === tabStops.length || !tabStops[_next]) {
        return getFallbackElement(direction, focusedElement, tabStops);
      }

      return tabStops[_next];
    }
  }

  return getFallbackElement(direction, element, items);
};
//# sourceMappingURL=getNextItemFocus.js.map
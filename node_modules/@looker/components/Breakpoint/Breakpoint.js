import "core-js/modules/es.array.map.js";
import "core-js/modules/es.parse-int.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.replace.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useContext, useState } from 'react';
import { convertRemToPx, BreakpointRamp } from '@looker/design-tokens';
import isArray from 'lodash/isArray';
import { ThemeContext } from 'styled-components';
import { useResize } from '../utils';
export var Breakpoint = function Breakpoint(_ref) {
  var children = _ref.children,
      show = _ref.show;

  var _ref2 = isArray(show) ? show : [show, show],
      _ref3 = _slicedToArray(_ref2, 2),
      _ref3$ = _ref3[0],
      from = _ref3$ === void 0 ? 'mobile' : _ref3$,
      _ref3$2 = _ref3[1],
      to = _ref3$2 === void 0 ? 'xl' : _ref3$2;

  var _useState = useState(typeof document === 'undefined' ? 800 : document.body.clientWidth),
      _useState2 = _slicedToArray(_useState, 2),
      screenWidth = _useState2[0],
      setScreenWidth = _useState2[1];

  var theme = useContext(ThemeContext);
  var breakpointPx = theme.breakpoints.map(function (b) {
    return convertRemToPx(parseInt(b.replace('rem', '')));
  });
  var fromIndex = theme.breakpoints.indexOf(BreakpointRamp[from]);
  var toIndex = theme.breakpoints.indexOf(BreakpointRamp[to]);

  var handleResize = function handleResize() {
    if (document) {
      setScreenWidth(document.body.clientWidth);
    }
  };

  useResize(typeof document === 'undefined' ? null : document.body, handleResize);
  var screenMin = from === 'mobile' ? 0 : breakpointPx[fromIndex - 1];
  var screenMax = to === 'xl' ? Infinity : breakpointPx[toIndex];
  return React.createElement(React.Fragment, null, screenWidth > screenMin && screenWidth <= screenMax ? children : null);
};
//# sourceMappingURL=Breakpoint.js.map
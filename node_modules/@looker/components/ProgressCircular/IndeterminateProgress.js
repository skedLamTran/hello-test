function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import React from 'react';
import styled, { css, keyframes } from 'styled-components';
import { progressCircularSVG } from './size';
import { progressCircularConstants } from './constants';
import { CircleContainer } from './ProgressSvg';
export var IndeterminateProgress = function IndeterminateProgress(_ref) {
  var size = _ref.size;

  var _progressCircularSVG = progressCircularSVG({
    size: size
  }),
      stroke = _progressCircularSVG.stroke,
      half = _progressCircularSVG.half,
      radius = _progressCircularSVG.radius,
      dashArray = _progressCircularSVG.dashArray,
      dashOffset = _progressCircularSVG.dashOffset;

  return React.createElement(IndeterminateContainer, null, React.createElement(IndeterminateSpinner, null, React.createElement(CircleClipper, null, React.createElement(LeftCircleContainer, {
    viewBox: "0 0 ".concat(half * 2, " ").concat(half * 2),
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("circle", {
    cx: half,
    cy: half,
    r: radius,
    strokeDasharray: dashArray,
    strokeDashoffset: dashOffset,
    strokeWidth: stroke
  }))), React.createElement(GapPatch, null, React.createElement(CircleContainer, {
    viewBox: "0 0 ".concat(half * 2, " ").concat(half * 2),
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("circle", {
    cx: half,
    cy: half,
    r: radius,
    strokeDasharray: dashArray,
    strokeDashoffset: dashOffset,
    strokeWidth: stroke - 0.6
  }))), React.createElement(CircleClipper, null, React.createElement(RightCircleContainer, {
    viewBox: "0 0 ".concat(half * 2, " ").concat(half * 2),
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("circle", {
    cx: half,
    cy: half,
    r: radius,
    strokeDasharray: dashArray,
    strokeDashoffset: dashOffset,
    strokeWidth: stroke
  })))));
};
var containerRotate = keyframes(["to{transform:rotate(360deg);}"]);

var spinnerRotateAnimations = function spinnerRotateAnimations() {
  return _toConsumableArray(Array(9)).map(function (_, i) {
    return "".concat(i * 12.5, "% {transform: rotate(").concat(i * 0.5 * progressCircularConstants.arcSize, "deg)}");
  });
};

var spinnerKeyFrames = keyframes(["", ""], spinnerRotateAnimations().join('\n'));

var containerAnimation = function containerAnimation() {
  var duration = 360 * progressCircularConstants.arcTime / (progressCircularConstants.arcStartRotationInterval + (360 - progressCircularConstants.arcSize));
  return css(["animation:", " ", "ms linear infinite;"], containerRotate, duration);
};

var leftSpin = keyframes(["from{transform:rotate(265deg);}50%{transform:rotate(130deg);}to{transform:rotate(265deg);}"]);
var rightSpin = keyframes(["from{transform:rotate(-265deg);}50%{transform:rotate(-130deg);}to{transform:rotate(-265deg);}"]);
var IndeterminateSpinner = styled.div.withConfig({
  displayName: "IndeterminateProgress__IndeterminateSpinner",
  componentId: "sc-1vb6yjx-0"
})(["height:100%;position:absolute;width:100%;"]);
var IndeterminateContainer = styled.div.withConfig({
  displayName: "IndeterminateProgress__IndeterminateContainer",
  componentId: "sc-1vb6yjx-1"
})(["font-size:0;height:100%;letter-spacing:0;position:absolute;white-space:nowrap;width:100%;", " ", "{animation:", " ", "ms ", " infinite both;}"], containerAnimation, IndeterminateSpinner, spinnerKeyFrames, progressCircularConstants.arcTime * 4, progressCircularConstants.timingFunction);
var LeftCircleContainer = styled(CircleContainer).withConfig({
  displayName: "IndeterminateProgress__LeftCircleContainer",
  componentId: "sc-1vb6yjx-2"
})(["animation-name:", ";"], leftSpin);
var RightCircleContainer = styled(CircleContainer).withConfig({
  displayName: "IndeterminateProgress__RightCircleContainer",
  componentId: "sc-1vb6yjx-3"
})(["animation-name:", ";left:-100%;"], rightSpin);
var CircleClipper = styled.div.withConfig({
  displayName: "IndeterminateProgress__CircleClipper",
  componentId: "sc-1vb6yjx-4"
})(["display:inline-flex;height:100%;overflow:hidden;position:relative;width:50%;", "{animation-duration:", "ms;animation-fill-mode:both;animation-iteration-count:infinite;animation-timing-function:", ";width:200%;}"], CircleContainer, progressCircularConstants.arcTime, progressCircularConstants.timingFunction);
var GapPatch = styled.div.withConfig({
  displayName: "IndeterminateProgress__GapPatch",
  componentId: "sc-1vb6yjx-5"
})(["box-sizing:border-box;height:100%;left:47.5%;overflow:hidden;position:absolute;top:0;width:5%;", "{left:-900%;transform:rotate(180deg);width:2000%;}"], CircleContainer);
//# sourceMappingURL=IndeterminateProgress.js.map
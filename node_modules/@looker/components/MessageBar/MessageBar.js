var _excluded = ["id", "children", "intent", "visible", "onPrimaryClick", "onSecondaryClick", "primaryAction", "secondaryAction", "noActions"];
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import { omitStyledProps, variant } from '@looker/design-tokens';
import { Close } from '@styled-icons/material/Close';
import noop from 'lodash/noop';
import isUndefined from 'lodash/isUndefined';
import React, { forwardRef, useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import styled from 'styled-components';
import { IconButton, ButtonTransparent } from '../Button';
import { Space } from '../Layout/Space';
import { simpleLayoutCSS } from '../Layout/utils/simple';
import { useReadOnlyWarn } from '../utils';
import { getIntentLabel, Status } from '../Status';

var NoopComponent = function NoopComponent() {
  return React.createElement(React.Fragment, null);
};

function getPrimaryActionButton(t, primaryAction) {
  switch (_typeof(primaryAction)) {
    case 'string':
      return function (_ref) {
        var onClick = _ref.onClick;
        return React.createElement(ButtonTransparent, {
          onClick: onClick
        }, primaryAction);
      };

    case 'object':
      return function () {
        return primaryAction;
      };

    default:
      return function (_ref2) {
        var intent = _ref2.intent,
            onClick = _ref2.onClick,
            id = _ref2.id;
        return React.createElement(IconButton, {
          id: id ? "".concat(id, "-iconButton") : undefined,
          onClick: onClick,
          icon: React.createElement(Close, null),
          size: "small",
          label: "".concat(t('DismissIntent', {
            intent: getIntentLabel(t, intent)
          }))
        });
      };
  }
}

function getSecondaryActionButton(secondaryAction) {
  switch (_typeof(secondaryAction)) {
    case 'string':
      return function (_ref3) {
        var onClick = _ref3.onClick;
        return React.createElement(ButtonTransparent, {
          onClick: onClick,
          color: "neutral"
        }, secondaryAction);
      };

    case 'object':
      return function () {
        return secondaryAction;
      };

    default:
      return NoopComponent;
  }
}

var MessageBarLayout = forwardRef(function (_ref4, ref) {
  var id = _ref4.id,
      children = _ref4.children,
      _ref4$intent = _ref4.intent,
      intent = _ref4$intent === void 0 ? 'inform' : _ref4$intent,
      visibleProp = _ref4.visible,
      _ref4$onPrimaryClick = _ref4.onPrimaryClick,
      onPrimaryClick = _ref4$onPrimaryClick === void 0 ? noop : _ref4$onPrimaryClick,
      _ref4$onSecondaryClic = _ref4.onSecondaryClick,
      onSecondaryClick = _ref4$onSecondaryClic === void 0 ? noop : _ref4$onSecondaryClic,
      primaryAction = _ref4.primaryAction,
      secondaryAction = _ref4.secondaryAction,
      _ref4$noActions = _ref4.noActions,
      noActions = _ref4$noActions === void 0 ? false : _ref4$noActions,
      props = _objectWithoutProperties(_ref4, _excluded);

  useReadOnlyWarn('MessageBar', visibleProp, onPrimaryClick);

  var _useState = useState(isUndefined(visibleProp) ? true : visibleProp),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var handlePrimaryClick = function handlePrimaryClick() {
    setVisible(visibleProp || false);
    onPrimaryClick();
  };

  var handleSecondaryClick = function handleSecondaryClick() {
    setVisible(visibleProp || false);
    onSecondaryClick();
  };

  useEffect(function () {
    if (!isUndefined(visibleProp)) {
      setVisible(visibleProp);
    }
  }, [visibleProp]);

  var _useTranslation = useTranslation('MessageBar'),
      t = _useTranslation.t;

  var PrimaryButton = getPrimaryActionButton(t, primaryAction);
  var SecondaryButton = getSecondaryActionButton(secondaryAction);
  var messageBarMarkup = React.createElement("div", _extends({
    "aria-live": "polite",
    ref: ref,
    role: "status"
  }, omitStyledProps(props)), React.createElement(Status, {
    intent: intent
  }), React.createElement(MessageBarContent, null, children), !noActions && React.createElement(Space, {
    width: "auto"
  }, React.createElement(SecondaryButton, {
    onClick: handleSecondaryClick
  }), React.createElement(PrimaryButton, {
    intent: intent,
    onClick: handlePrimaryClick,
    id: id
  })));
  return visible ? messageBarMarkup : null;
});
MessageBarLayout.displayName = 'MessageBarLayout';
var MessageBarContent = styled.div.withConfig({
  displayName: "MessageBar__MessageBarContent",
  componentId: "sc-11gt222-0"
})(["flex-grow:1;padding:0 ", ";"], function (_ref5) {
  var space = _ref5.theme.space;
  return space.u5;
});
var backgroundColor = variant({
  prop: 'intent',
  variants: {
    critical: {
      backgroundColor: 'criticalAccent'
    },
    inform: {
      backgroundColor: 'informAccent'
    },
    positive: {
      backgroundColor: 'positiveAccent'
    },
    warn: {
      backgroundColor: 'warnAccent'
    }
  }
});
export var MessageBar = styled(MessageBarLayout).attrs(function (_ref6) {
  var _ref6$intent = _ref6.intent,
      intent = _ref6$intent === void 0 ? 'inform' : _ref6$intent,
      _ref6$px = _ref6.px,
      px = _ref6$px === void 0 ? 'medium' : _ref6$px,
      _ref6$py = _ref6.py,
      py = _ref6$py === void 0 ? 'small' : _ref6$py,
      _ref6$width = _ref6.width,
      width = _ref6$width === void 0 ? '100%' : _ref6$width;
  return {
    intent: intent,
    px: px,
    py: py,
    width: width
  };
}).withConfig({
  displayName: "MessageBar",
  componentId: "sc-11gt222-1"
})(["", " align-items:center;", " border-radius:", ";color:", ";display:flex;font-size:", ";"], simpleLayoutCSS, backgroundColor, function (_ref7) {
  var radii = _ref7.theme.radii;
  return radii.medium;
}, function (_ref8) {
  var colors = _ref8.theme.colors;
  return colors.text5;
}, function (_ref9) {
  var fontSizes = _ref9.theme.fontSizes;
  return fontSizes.small;
});
//# sourceMappingURL=MessageBar.js.map
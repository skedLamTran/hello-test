import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { color, generateIntentShade, intentUIBlend, reset, space, typography, variant } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import styled, { css } from 'styled-components';
var size = variant({
  prop: 'size',
  variants: {
    small: {
      fontSize: 'xxsmall',
      lineHeight: '16px',
      px: 'u2'
    },
    medium: {
      fontSize: 'xsmall',
      lineHeight: '24px',
      px: 'u2'
    },
    large: {
      fontSize: 'medium',
      lineHeight: '32px',
      px: 'u3'
    }
  }
});
var BadgeLayout = forwardRef(function (_ref, ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  return React.createElement("span", _extends({
    ref: ref
  }, props), children);
});
BadgeLayout.displayName = 'BadgeLayout';

var badgeIntent = function badgeIntent(intent) {
  return css(["background:", ";color:", ";"], intentUIBlend(intent, 1), function (_ref2) {
    var colors = _ref2.theme.colors;
    return generateIntentShade(colors[intent]);
  });
};

export var Badge = styled(BadgeLayout).attrs(function (_ref3) {
  var _ref3$intent = _ref3.intent,
      intent = _ref3$intent === void 0 ? 'key' : _ref3$intent,
      _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? 'medium' : _ref3$size;
  return {
    intent: intent,
    size: size
  };
}).withConfig({
  displayName: "Badge",
  componentId: "sc-idhxta-0"
})(["", " border-radius:50px;display:inline-flex;font-weight:", ";", " ", " ", " ", " ", ""], reset, function (_ref4) {
  var theme = _ref4.theme;
  return theme.fontWeights.semiBold;
}, color, space, typography, size, function (_ref5) {
  var intent = _ref5.intent;
  return badgeIntent(intent);
});
//# sourceMappingURL=Badge.js.map
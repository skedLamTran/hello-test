var _excluded = ["children", "className", "disabled", "onItemClick", "options", "value"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/web.timers.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useCallback, useRef, useState } from 'react';
import styled from 'styled-components';
import { inputHeightNumber } from '../Form/Inputs/height';
import { simpleLayoutCSS } from '../Layout/utils/simple';
import { useForkedRef } from '../utils';
import { ButtonSetContext } from './ButtonSetContext';
import { ButtonItem } from './ButtonItem';
export var ButtonSetLayout = forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      onItemClick = _ref.onItemClick,
      options = _ref.options,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  if (children && options) {
    console.warn('Use children or options but not both at the same time.');
  }

  var context = {
    disabled: disabled,
    onItemClick: onItemClick,
    value: value
  };

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isWrapping = _useState2[0],
      setIsWrapping = _useState2[1];

  var timeoutRef = useRef();
  var measureRef = useCallback(function (node) {
    if (node) {
      var _node$getBoundingClie = node.getBoundingClientRect(),
          height = _node$getBoundingClie.height;

      var getIsWrapping = function getIsWrapping() {
        var firstItem = node.childNodes[0];
        var rowHeight = firstItem ? firstItem.getBoundingClientRect().height : inputHeightNumber;

        if (height >= rowHeight * 2) {
          setIsWrapping(true);
        } else {
          setIsWrapping(false);
        }
      };

      if (height > 0) {
        getIsWrapping();
      } else {
        timeoutRef.current = setTimeout(getIsWrapping, 10);
      }
    } else if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  }, [options]);
  var ref = useForkedRef(measureRef, forwardedRef);
  var optionItems = options && options.map(function (_ref2) {
    var disabled = _ref2.disabled,
        label = _ref2.label,
        value = _ref2.value;
    return React.createElement(ButtonItem, {
      key: value,
      disabled: disabled,
      value: value
    }, label || value);
  });
  return React.createElement(ButtonSetContext.Provider, {
    value: context
  }, React.createElement("div", _extends({
    role: "group",
    className: "".concat(isWrapping ? 'wrapping ' : '').concat(className),
    ref: ref
  }, props), children || optionItems));
});
ButtonSetLayout.displayName = 'ButtonSetLayout';
export var ButtonSet = styled(ButtonSetLayout).withConfig({
  displayName: "ButtonSet",
  componentId: "sc-b1ia7f-0"
})(["", " align-items:center;display:inline-flex;flex-wrap:wrap;font-size:", ";text-align:center;"], simpleLayoutCSS, function (_ref3) {
  var theme = _ref3.theme;
  return theme.fontSizes.small;
});
//# sourceMappingURL=ButtonSet.js.map
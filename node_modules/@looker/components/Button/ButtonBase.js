import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "className", "color", "iconBefore", "iconAfter", "rippleBackgroundColor", "size", "style"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import { maxWidth, minWidth, reset, space, shouldForwardProp, width } from '@looker/design-tokens';
import { StyledIconBase } from '@styled-icons/styled-icon';
import styled, { css } from 'styled-components';
import pick from 'lodash/pick';
import { rippleStyle, useRipple, useRippleHandlers, rippleHandlerKeys } from '../Ripple';
import { mergeClassNames, useCallbackRef, useMeasuredElement } from '../utils';
import { buttonSize, buttonIconSizeMap, buttonPadding } from './size';
import { buttonIcon } from './icon';
var buttonCSS = css(["", " ", " ", " ", " align-items:center;border-radius:", ";cursor:pointer;display:inline-flex;flex-shrink:0;font-family:", ";font-weight:", ";justify-content:center;line-height:1;outline:none;transition:border 80ms;vertical-align:middle;white-space:nowrap;&[disabled]{cursor:default;filter:grayscale(0.3);opacity:0.25;}", " ", ""], reset, maxWidth, minWidth, width, function (_ref) {
  var theme = _ref.theme;
  return theme.radii.medium;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.fonts.brand;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.fontWeights.medium;
}, buttonSize, space);
export var buttonIconSize = css(["", "{height:", ";width:", ";}"], StyledIconBase, function (_ref4) {
  var theme = _ref4.theme,
      _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? 'medium' : _ref4$size;
  return theme.sizes[buttonIconSizeMap[size]];
}, function (_ref5) {
  var theme = _ref5.theme,
      _ref5$size = _ref5.size,
      size = _ref5$size === void 0 ? 'medium' : _ref5$size;
  return theme.sizes[buttonIconSizeMap[size]];
});
export var ButtonOuter = styled.button.withConfig({
  shouldForwardProp: shouldForwardProp
}).attrs(function (_ref6) {
  var _ref6$color = _ref6.color,
      color = _ref6$color === void 0 ? 'key' : _ref6$color;
  return {
    color: color
  };
}).withConfig({
  displayName: "ButtonBase__ButtonOuter",
  componentId: "sc-1bpio6j-0"
})(["", " ", ""], buttonCSS, function (_ref7) {
  var fullWidth = _ref7.fullWidth;
  return fullWidth && "width: 100%;";
});
export var ButtonBase = styled(forwardRef(function (props, forwardedRef) {
  var children = props.children,
      className = props.className,
      color = props.color,
      iconBefore = props.iconBefore,
      iconAfter = props.iconAfter,
      rippleBackgroundColor = props.rippleBackgroundColor,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      style = props.style,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useCallbackRef = useCallbackRef(forwardedRef),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      element = _useCallbackRef2[0],
      ref = _useCallbackRef2[1];

  var _useMeasuredElement = useMeasuredElement(element),
      _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
      _useMeasuredElement2$ = _useMeasuredElement2[0],
      height = _useMeasuredElement2$.height,
      width = _useMeasuredElement2$.width;

  var _useRipple = useRipple({
    bounded: true,
    color: rippleBackgroundColor || color || 'key',
    height: height,
    width: width
  }),
      callbacks = _useRipple.callbacks,
      rippleClassName = _useRipple.className,
      rippleStyle = _useRipple.style;

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(restProps, rippleHandlerKeys)), restProps.disabled);
  return React.createElement(ButtonOuter, _extends({
    className: mergeClassNames([className, rippleClassName]),
    px: buttonPadding(!!(iconBefore || iconAfter), size),
    ref: ref
  }, restProps, rippleHandlers, {
    size: size,
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }), iconBefore, children, iconAfter);
})).withConfig({
  displayName: "ButtonBase",
  componentId: "sc-1bpio6j-1"
})(["", " ", " ", ""], buttonIcon, buttonIconSize, rippleStyle);
//# sourceMappingURL=ButtonBase.js.map
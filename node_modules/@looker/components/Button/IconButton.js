import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["aria-expanded", "className", "icon", "id", "size", "label", "toggle", "toggleColor", "tooltipDisabled", "tooltipPlacement", "tooltipTextAlign", "tooltipWidth", "onFocus", "onBlur", "onMouseOver", "onMouseOut", "style", "shape"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import pick from 'lodash/pick';
import some from 'lodash/some';
import isFunction from 'lodash/isFunction';
import styled from 'styled-components';
import { reset, space } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import { Icon } from '../Icon';
import { rippleHandlerKeys, rippleStyle, SQUARE_RIPPLE, useRipple, useRippleHandlers } from '../Ripple';
import { useTooltip } from '../Tooltip';
import { mergeClassNames, useWrapEvent } from '../utils';
import { VisuallyHidden } from '../VisuallyHidden';
import { ButtonOuter } from './ButtonBase';
import { iconButtonColor, ICON_BUTTON_DEFAULT_COLOR } from './iconButtonColor';
import { iconButtonOutline } from './iconButtonOutline';
import { iconButtonIconSizeMap, buttonSizeMap } from './size';
export var IconButton = styled(forwardRef(function (props, forwardedRef) {
  var ariaExpanded = props['aria-expanded'],
      className = props.className,
      icon = props.icon,
      id = props.id,
      _props$size = props.size,
      size = _props$size === void 0 ? 'xsmall' : _props$size,
      label = props.label,
      toggle = props.toggle,
      _props$toggleColor = props.toggleColor,
      toggleColor = _props$toggleColor === void 0 ? ICON_BUTTON_DEFAULT_COLOR : _props$toggleColor,
      tooltipDisabled = props.tooltipDisabled,
      tooltipPlacement = props.tooltipPlacement,
      tooltipTextAlign = props.tooltipTextAlign,
      tooltipWidth = props.tooltipWidth,
      propsOnFocus = props.onFocus,
      propsOnBlur = props.onBlur,
      propsOnMouseOver = props.onMouseOver,
      propsOnMouseOut = props.onMouseOut,
      style = props.style,
      shape = props.shape,
      rest = _objectWithoutProperties(props, _excluded);

  var _useRipple = useRipple({
    bounded: shape === 'square',
    color: toggle ? toggleColor : undefined,
    size: shape === 'square' ? SQUARE_RIPPLE : 1
  }),
      callbacks = _useRipple.callbacks,
      rippleClassName = _useRipple.className,
      rippleStyle = _useRipple.style;

  var hasOuterTooltip = some([propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut], isFunction);

  var _useTooltip = useTooltip({
    content: label,
    disabled: tooltipDisabled || hasOuterTooltip || ariaExpanded === true,
    id: id ? "".concat(id, "-tooltip") : undefined,
    placement: tooltipPlacement,
    textAlign: tooltipTextAlign,
    width: tooltipWidth
  }),
      _useTooltip$domProps = _useTooltip.domProps,
      ariaDescribedBy = _useTooltip$domProps['aria-describedby'],
      _useTooltip$domProps$ = _useTooltip$domProps.className,
      tooltipClassName = _useTooltip$domProps$ === void 0 ? '' : _useTooltip$domProps$,
      onFocus = _useTooltip$domProps.onFocus,
      onBlur = _useTooltip$domProps.onBlur,
      onMouseOver = _useTooltip$domProps.onMouseOver,
      onMouseOut = _useTooltip$domProps.onMouseOut,
      tooltip = _useTooltip.tooltip;

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({
    onBlur: useWrapEvent(onBlur, propsOnBlur),
    onFocus: useWrapEvent(onFocus, propsOnFocus)
  }, pick(rest, rippleHandlerKeys)), rest.disabled);
  var otherHandlers = {
    onMouseOut: useWrapEvent(onMouseOut, propsOnMouseOut),
    onMouseOver: useWrapEvent(onMouseOver, propsOnMouseOver)
  };
  return React.createElement(ButtonOuter, _extends({
    "aria-describedby": ariaDescribedBy,
    "aria-expanded": ariaExpanded,
    "aria-pressed": toggle ? true : undefined,
    ref: forwardedRef,
    p: "none",
    size: size,
    width: buttonSizeMap[size],
    className: mergeClassNames([className, tooltipClassName, rippleClassName]),
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  }, rippleHandlers, otherHandlers, rest), React.createElement(VisuallyHidden, null, label), React.createElement(Icon, {
    icon: icon,
    size: iconButtonIconSizeMap[size]
  }), tooltip);
})).attrs(function (_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type,
      _ref$toggleColor = _ref.toggleColor,
      toggleColor = _ref$toggleColor === void 0 ? ICON_BUTTON_DEFAULT_COLOR : _ref$toggleColor;
  return {
    toggleColor: toggleColor,
    type: type
  };
}).withConfig({
  displayName: "IconButton",
  componentId: "sc-n9jti8-0"
})(["", " ", " ", " background:none;background-color:", ";border:none;border-radius:", ";", " flex-shrink:0;padding:0;", ""], reset, space, rippleStyle, function (_ref2) {
  var theme = _ref2.theme,
      toggle = _ref2.toggle,
      toggleBackground = _ref2.toggleBackground,
      toggleColor = _ref2.toggleColor;
  return toggle && toggleBackground && theme.colors["".concat(toggleColor, "Subtle")];
}, function (_ref3) {
  var shape = _ref3.shape;
  return shape !== 'square' && '100%';
}, iconButtonColor, function (_ref4) {
  var outline = _ref4.outline;
  return outline && iconButtonOutline;
});
//# sourceMappingURL=IconButton.js.map
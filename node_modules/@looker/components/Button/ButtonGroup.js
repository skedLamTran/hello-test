import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["onChange", "value"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import xor from 'lodash/xor';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { ButtonItem } from './ButtonItem';
import { ButtonSet } from './ButtonSet';
var ButtonGroupLayout = forwardRef(function (_ref, ref) {
  var onChange = _ref.onChange,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? [] : _ref$value,
      props = _objectWithoutProperties(_ref, _excluded);

  function handleItemClick(e) {
    var newValue = xor(value, [e.currentTarget.value]);

    if (onChange) {
      onChange(newValue);
    }
  }

  return React.createElement(ButtonSet, _extends({}, props, {
    ref: ref,
    value: value,
    onItemClick: handleItemClick
  }));
});
ButtonGroupLayout.displayName = 'ButtonGroupLayout';
export var ButtonGroup = styled(ButtonGroupLayout).withConfig({
  displayName: "ButtonGroup",
  componentId: "sc-13avdmz-0"
})(["", "{border:1px solid ", ";border-radius:", ";margin-right:", ";&:last-child{margin-right:0;}&[aria-pressed='false']:not(:hover){background:", ";}&[data-focusvisible='true']{border-color:", ";box-shadow:inset 0 0 0 1px ", ";}}&.wrapping{margin:-", ";", "{margin:", ";}}"], ButtonItem, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.ui3;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.radii.medium;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.space.u1;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.background;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.key;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.key;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.space.u05;
}, ButtonItem, function (_ref9) {
  var theme = _ref9.theme;
  return theme.space.u05;
});
//# sourceMappingURL=ButtonGroup.js.map
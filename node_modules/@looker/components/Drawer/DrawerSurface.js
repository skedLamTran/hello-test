import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled, { keyframes } from 'styled-components';
import { variant, system } from '@looker/design-tokens';
import { SurfaceBase, surfaceTransition } from '../Dialog/SurfaceBase';
import { dialogSizes } from '../Dialog/dialogWidth';
import { asideSizes } from '../Layout/Semantics/Aside/asideWidth';
var placement = variant({
  prop: 'placement',
  variants: {
    left: {
      boxShadow: '-18px 0 18px -18px rgba(0, 0, 0, 0.12)',
      left: 0
    },
    right: {
      boxShadow: '-18px 0 18px -18px rgba(0, 0, 0, 0.12)',
      right: 0
    }
  }
});

var drawerWidth = function drawerWidth() {
  var drawerSizes = _objectSpread(_objectSpread({}, asideSizes), dialogSizes);

  return system({
    width: {
      defaultScale: drawerSizes,
      property: 'width',
      scale: 'drawerSizes'
    }
  });
};

var slideIn = keyframes(["from{opacity:0.01;transform:translate(var(--direction-translate,0),0);}to{opacity:1;transform:translate(0);}"]);
var slideOut = keyframes(["from{opacity:1;transform:translate(0);}to{opacity:0.01;transform:translate(var(--direction-translate,0),0);}"]);
export var DrawerSurface = styled(SurfaceBase).attrs(function (_ref) {
  var _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'right' : _ref$placement,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'small' : _ref$width;
  return {
    placement: placement,
    width: width
  };
}).withConfig({
  displayName: "DrawerSurface",
  componentId: "sc-1vwnqjh-0"
})(["--direction-translate:", ";height:100%;position:absolute;", " ", " &.entering{animation:", " ", ";}&.exiting{animation:", " ", ";}"], function (_ref2) {
  var placement = _ref2.placement;
  return placement === 'left' ? '-100%' : '100%';
}, placement, drawerWidth, slideIn, surfaceTransition, slideOut, surfaceTransition);
//# sourceMappingURL=DrawerSurface.js.map
var _excluded = ["children", "className", "selectedIndex"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Children, cloneElement } from 'react';
import styled from 'styled-components';
import { flexbox, layout, space, reset } from '@looker/design-tokens';
import omit from 'lodash/omit';

var Layout = function Layout(_ref) {
  var children = _ref.children,
      className = _ref.className,
      selectedIndex = _ref.selectedIndex,
      props = _objectWithoutProperties(_ref, _excluded);

  var tabPanelsLayoutProps = omit(props, 'onSelectTab');
  var clonedChildren = Children.map(children, function (child, index) {
    return cloneElement(child, {
      selected: index === selectedIndex
    });
  });
  return React.createElement("div", _extends({
    "aria-labelledby": "tab-".concat(selectedIndex),
    className: className,
    id: "panel-".concat(selectedIndex),
    role: "tabpanel"
  }, tabPanelsLayoutProps), clonedChildren);
};

export var TabPanels = styled(Layout).attrs(function (_ref2) {
  var _ref2$pt = _ref2.pt,
      pt = _ref2$pt === void 0 ? 'large' : _ref2$pt;
  return {
    pt: pt
  };
}).withConfig({
  displayName: "TabPanels",
  componentId: "sc-15ef4fm-0"
})(["", " ", " ", " ", ""], reset, flexbox, layout, space);
//# sourceMappingURL=TabPanels.js.map
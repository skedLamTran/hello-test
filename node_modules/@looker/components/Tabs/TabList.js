function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.object.assign.js";
import { useTranslation } from 'react-i18next';
import React, { Children, cloneElement, forwardRef } from 'react';
import styled from 'styled-components';
import { useArrowKeyNav } from '../utils';
import { tabListCSS } from '../Tabs2/TabList2';
export var TabList = styled(forwardRef(function (_ref, ref) {
  var children = _ref.children,
      selectedIndex = _ref.selectedIndex,
      onSelectTab = _ref.onSelectTab,
      className = _ref.className;

  var _useTranslation = useTranslation('TabList'),
      t = _useTranslation.t;

  var clonedChildren = Children.map(children, function (child, index) {
    return cloneElement(child, {
      index: index,
      onSelect: function onSelect() {
        return onSelectTab && onSelectTab(index);
      },
      selected: index === selectedIndex
    });
  });
  var navProps = useArrowKeyNav({
    axis: 'horizontal',
    ref: ref
  });
  return React.createElement("div", _extends({
    "aria-label": t('Tabs'),
    className: className,
    role: "tablist"
  }, navProps), clonedChildren);
})).attrs(function (_ref2) {
  var _ref2$fontSize = _ref2.fontSize,
      fontSize = _ref2$fontSize === void 0 ? 'small' : _ref2$fontSize;
  return {
    fontSize: fontSize
  };
}).withConfig({
  displayName: "TabList",
  componentId: "sc-1xnjj79-0"
})(["", ""], tabListCSS);
//# sourceMappingURL=TabList.js.map
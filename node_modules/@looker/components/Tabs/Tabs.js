import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { Children, cloneElement, useRef, useState } from 'react';
export function useTabs(props) {
  var defaultIndex = props && props.defaultIndex || 0;
  var onChange = props && props.onChange;
  var isControlled = props && props.isControlled || false;

  var _useState = useState(defaultIndex),
      _useState2 = _slicedToArray(_useState, 2),
      selectedIndex = _useState2[0],
      setSelectedIndex = _useState2[1];

  return {
    onSelectTab: function onSelectTab(index) {
      onChange && onChange(index);

      if (!isControlled) {
        setSelectedIndex(index);
      }
    },
    selectedIndex: isControlled && props ? props.controlledIndex : selectedIndex
  };
}
export var Tabs = function Tabs(_ref) {
  var children = _ref.children,
      controlledIndex = _ref.index,
      defaultIndex = _ref.defaultIndex,
      onChange = _ref.onChange;

  var _useRef = useRef(controlledIndex !== undefined),
      isControlled = _useRef.current;

  if (!isControlled && controlledIndex !== undefined) {
    console.warn('Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.');
  }

  if (isControlled && controlledIndex === undefined) {
    console.warn('Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.');
  }

  var tabs = useTabs({
    controlledIndex: controlledIndex,
    defaultIndex: defaultIndex,
    isControlled: isControlled,
    onChange: onChange
  });
  var clonedChildren = Children.map(children, function (child) {
    return cloneElement(child, tabs);
  });
  return React.createElement(React.Fragment, null, clonedChildren);
};
//# sourceMappingURL=Tabs.js.map
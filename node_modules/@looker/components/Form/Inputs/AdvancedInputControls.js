import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
var _excluded = ["disabled", "clearIconLabel", "isVisibleOptions", "onClear", "showCaret", "showClear", "summary", "errorIcon"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useTranslation } from 'react-i18next';
import { Close } from '@styled-icons/material/Close';
import { Error } from '@styled-icons/material/Error';
import { ArrowDropDown } from '@styled-icons/material/ArrowDropDown';
import { ArrowDropUp } from '@styled-icons/material/ArrowDropUp';
import React from 'react';
import styled from 'styled-components';
import { IconButton } from '../../Button';
import { iconButtonColor } from '../../Button/iconButtonColor';
import { Icon } from '../../Icon';
import { Span } from '../../Text';
export var AdvancedInputControls = styled(function (props) {
  var _useTranslation = useTranslation('AdvancedInputControls'),
      t = _useTranslation.t;

  var clearIconLabelText = t('Clear Field');

  var disabled = props.disabled,
      _props$clearIconLabel = props.clearIconLabel,
      clearIconLabel = _props$clearIconLabel === void 0 ? clearIconLabelText : _props$clearIconLabel,
      isVisibleOptions = props.isVisibleOptions,
      onClear = props.onClear,
      showCaret = props.showCaret,
      showClear = props.showClear,
      summary = props.summary,
      errorIcon = props.errorIcon,
      rest = _objectWithoutProperties(props, _excluded);

  return React.createElement("div", rest, summary && React.createElement(Span, {
    color: "text1",
    fontSize: "small",
    style: {
      whiteSpace: 'nowrap'
    },
    pr: "u2"
  }, summary), summary && showClear && React.createElement(SearchControlDivider, null), showClear && React.createElement(IconButton, {
    size: "small",
    icon: React.createElement(Close, null),
    label: clearIconLabel,
    onClick: onClear,
    tooltipDisabled: disabled,
    disabled: disabled,
    mr: "u1"
  }), showClear && showCaret && React.createElement(SearchControlDivider, null), showCaret && React.createElement(CaretIcon, {
    icon: isVisibleOptions ? React.createElement(ArrowDropUp, null) : React.createElement(ArrowDropDown, null),
    "data-testid": "caret",
    mr: "u1"
  }), errorIcon && React.createElement(Icon, {
    icon: React.createElement(Error, null),
    color: "critical",
    mr: "u1"
  }));
}).withConfig({
  displayName: "AdvancedInputControls",
  componentId: "sc-1e7uo3l-0"
})(["align-items:center;display:flex;max-height:1.9rem;padding-right:", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.space.u1;
});
var SearchControlDivider = styled.div.withConfig({
  displayName: "AdvancedInputControls__SearchControlDivider",
  componentId: "sc-1e7uo3l-1"
})(["background:", ";height:", ";margin-right:", ";width:1px;"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.ui2;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.space.u5;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.space.u1;
});
var CaretIcon = styled(Icon).withConfig({
  displayName: "AdvancedInputControls__CaretIcon",
  componentId: "sc-1e7uo3l-2"
})(["", " cursor:default;"], iconButtonColor);
//# sourceMappingURL=AdvancedInputControls.js.map
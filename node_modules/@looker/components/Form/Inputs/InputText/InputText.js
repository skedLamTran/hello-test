var _excluded = ["autoResize", "children", "className", "before", "iconBefore", "after", "iconAfter", "type", "noErrorIcon", "validationType", "onClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver", "onMouseUp"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/web.timers.js";
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import omit from 'lodash/omit';
import { omitStyledProps, space, reset, layout } from '@looker/design-tokens';
import React, { forwardRef, useRef } from 'react';
import styled, { css } from 'styled-components';
import { targetIsButton, useForkedRef, useWrapEvent } from '../../../utils';
import { DISABLED_OPACITY } from '../../constants';
import { InlineInputTextBase } from '../InlineInputText';
import { inputPropKeys, pickInputProps } from '../InputProps';
import { innerInputStyle } from '../innerInputStyle';
import { inputHeight } from '../height';
import { After } from './After';
import { Before } from './Before';
var InputComponent = forwardRef(function (_ref, forwardedRef) {
  var autoResize = _ref.autoResize,
      children = _ref.children,
      className = _ref.className,
      before = _ref.before,
      iconBefore = _ref.iconBefore,
      after = _ref.after,
      iconAfter = _ref.iconAfter,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'text' : _ref$type,
      noErrorIcon = _ref.noErrorIcon,
      validationType = _ref.validationType,
      onClick = _ref.onClick,
      onMouseDown = _ref.onMouseDown,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      onMouseOut = _ref.onMouseOut,
      onMouseOver = _ref.onMouseOver,
      onMouseUp = _ref.onMouseUp,
      props = _objectWithoutProperties(_ref, _excluded);

  var internalRef = useRef(null);
  var ref = useForkedRef(internalRef, forwardedRef);

  var handleMouseDown = function handleMouseDown(e) {
    if (!targetIsButton(e) && e.target !== internalRef.current) {
      if (document.activeElement === internalRef.current) {
        e.preventDefault();
      } else {
        setTimeout(function () {
          internalRef.current && internalRef.current.focus();
        }, 0);
      }
    }
  };

  var onMouseDownWrapped = useWrapEvent(handleMouseDown, onMouseDown);

  if (before && iconBefore) {
    console.warn('Use before or iconBefore, but not both at the same time.');
    return null;
  }

  if (after && iconAfter) {
    console.warn('Use after or iconAfter, but not both at the same time.');
    return null;
  }

  var mouseHandlers = {
    onClick: onClick,
    onMouseDown: onMouseDownWrapped,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseOut: onMouseOut,
    onMouseOver: onMouseOver,
    onMouseUp: onMouseUp
  };

  var inputProps = _objectSpread(_objectSpread({}, pickInputProps(omitStyledProps(props))), {}, {
    'aria-invalid': validationType === 'error' ? true : undefined,
    type: type
  });

  var inner = React.createElement(StyledInput, _extends({}, inputProps, {
    ref: ref
  }));

  if (children) {
    inner = React.createElement("div", {
      className: "inner"
    }, children, React.createElement(StyledInput, _extends({}, inputProps, {
      ref: ref
    })));
  } else if (autoResize) {
    inner = React.createElement(InlineInputTextBase, _extends({}, inputProps, {
      ref: ref
    }));
  }

  return React.createElement("div", _extends({
    className: className
  }, mouseHandlers, omitStyledProps(omit(props, inputPropKeys))), React.createElement(Before, {
    before: before,
    iconBefore: iconBefore
  }), inner, React.createElement(After, {
    after: after,
    iconAfter: iconAfter,
    noErrorIcon: noErrorIcon,
    validationType: validationType
  }));
});
InputComponent.displayName = 'InputComponent';
var StyledInput = styled.input.withConfig({
  displayName: "InputText__StyledInput",
  componentId: "sc-6cvg1f-0"
})(["", " flex:1;font-size:", ";max-width:100%;min-width:2rem;padding:0 ", ";"], innerInputStyle, function (_ref2) {
  var theme = _ref2.theme;
  return theme.fontSizes.small;
}, function (_ref3) {
  var space = _ref3.theme.space;
  return space.u2;
});
export var inputTextHover = css(["border-color:", ";"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.colors.ui4;
});
export var inputTextFocus = css(["border-color:", ";box-shadow:inset 0 0 0 1px ", ";outline:none;"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.key;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.key;
});
export var inputTextDisabled = css(["cursor:default;opacity:", ";&:hover{border-color:", ";}[data-disabled='true'] &{opacity:1;}"], DISABLED_OPACITY, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.ui3;
});
export var inputTextValidation = css(["", ""], function (props) {
  return props.validationType === 'error' ? "\n      border-color: ".concat(props.theme.colors.critical, ";\n      &:hover {\n        border-color: ").concat(props.theme.colors.critical, ";\n      }\n      &:focus,\n      &:focus-within {\n        border-color: ").concat(props.theme.colors.critical, ";\n        box-shadow: inset 0 0 0 1px ").concat(props.theme.colors.critical, ";\n      }\n      input {\n        caret-color: ").concat(props.theme.colors.critical, ";\n      }\n      ") : '';
});
export var inputCSS = css(["background:", ";border:1px solid ", ";border-radius:", ";color:", ";font-size:", ";"], function (_ref8) {
  var colors = _ref8.theme.colors;
  return colors.field;
}, function (_ref9) {
  var colors = _ref9.theme.colors;
  return colors.ui3;
}, function (_ref10) {
  var radii = _ref10.theme.radii;
  return radii.medium;
}, function (_ref11) {
  var colors = _ref11.theme.colors;
  return colors.text5;
}, function (_ref12) {
  var fontSizes = _ref12.theme.fontSizes;
  return fontSizes.small;
});
export var InputText = styled(InputComponent).attrs(function (_ref13) {
  var _ref13$height = _ref13.height,
      height = _ref13$height === void 0 ? inputHeight : _ref13$height,
      _ref13$type = _ref13.type,
      type = _ref13$type === void 0 ? 'text' : _ref13$type;
  return {
    height: height,
    type: type
  };
}).withConfig({
  displayName: "InputText",
  componentId: "sc-6cvg1f-1"
})(["", " align-items:center;color:", ";cursor:text;display:inline-flex;justify-content:space-evenly;padding:", ";width:", ";", " ", " ", " ", "{height:100%;max-width:100%;width:100%;input,span{padding:0 ", ";}}&:hover{", "}&:focus,&:focus-within{", "}", " ", ""], reset, function (_ref14) {
  var theme = _ref14.theme;
  return theme.colors.text;
}, function (_ref15) {
  var space = _ref15.theme.space;
  return "".concat(space.u05, " ").concat(space.u1);
}, function (_ref16) {
  var autoResize = _ref16.autoResize;
  return autoResize ? 'auto' : '100%';
}, layout, space, inputCSS, InlineInputTextBase, function (_ref17) {
  var theme = _ref17.theme;
  return theme.space.u2;
}, inputTextHover, inputTextFocus, function (_ref18) {
  var disabled = _ref18.disabled;
  return disabled ? inputTextDisabled : '';
}, inputTextValidation);
//# sourceMappingURL=InputText.js.map
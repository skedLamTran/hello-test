import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["className", "disabled", "on", "onChange", "readOnly", "validationType"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { reset, space } from '@looker/design-tokens';
import noop from 'lodash/noop';
import pick from 'lodash/pick';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { inputRippleColor, RIPPLE_RATIO, rippleHandlerKeys, useRipple, useRippleHandlers } from '../../../Ripple';
import { DISABLED_OPACITY } from '../../constants';
import { pickInputProps } from '../InputProps';
import { Handle } from './Handle';
import { Track } from './Track';
export var ToggleSwitch = styled(forwardRef(function (_ref, ref) {
  var className = _ref.className,
      disabled = _ref.disabled,
      on = _ref.on,
      onChange = _ref.onChange,
      readOnly = _ref.readOnly,
      validationType = _ref.validationType,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useRipple = useRipple({
    color: inputRippleColor(!!on, validationType === 'error'),
    size: RIPPLE_RATIO
  }),
      callbacks = _useRipple.callbacks,
      rippleClassName = _useRipple.className,
      style = _useRipple.style;

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(props, rippleHandlerKeys)), disabled);
  return React.createElement("div", _extends({
    className: className
  }, rippleHandlers), React.createElement("input", _extends({
    type: "checkbox",
    checked: on,
    disabled: disabled,
    onChange: readOnly ? noop : onChange,
    role: "switch",
    "aria-checked": on,
    "aria-invalid": validationType === 'error' ? 'true' : undefined,
    ref: ref
  }, pickInputProps(props))), React.createElement(Track, {
    on: on,
    validationType: validationType
  }), React.createElement(Handle, {
    on: on,
    validationType: validationType,
    className: rippleClassName,
    style: style
  }));
})).withConfig({
  displayName: "ToggleSwitch",
  componentId: "sc-wcqgi4-0"
})(["", " ", " align-items:center;display:flex;height:", ";justify-content:center;opacity:", ";position:relative;width:", ";input{cursor:", ";height:100%;left:0;margin:0;opacity:0;position:absolute;top:0;width:100%;z-index:1;}"], reset, space, function (_ref2) {
  var theme = _ref2.theme;
  return theme.space.u6;
}, function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled && DISABLED_OPACITY;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.space.u10;
}, function (_ref5) {
  var disabled = _ref5.disabled,
      readOnly = _ref5.readOnly;
  return disabled || readOnly ? 'not-allowed' : 'pointer';
});
//# sourceMappingURL=ToggleSwitch.js.map
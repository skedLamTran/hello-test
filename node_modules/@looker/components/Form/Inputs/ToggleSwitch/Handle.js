import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
var _excluded = ["theme"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { rippleStyle } from '../../../Ripple';

var getColor = function getColor(_ref) {
  var on = _ref.on,
      validationType = _ref.validationType;

  if (on) {
    if (validationType === 'error') return 'critical';
    return 'key';
  }

  return 'field';
};

export var Handle = styled(function (_ref2) {
  var className = _ref2.className,
      style = _ref2.style;
  return React.createElement("div", {
    className: className,
    style: style,
    "data-testid": "handle"
  }, React.createElement("div", null));
}).withConfig({
  displayName: "Handle",
  componentId: "sc-1qvjj89-0"
})(["", " height:", ";left:0;padding:", ";position:absolute;top:0;transform:", ";transition:", "ms;width:", ";div{background:", ";border-radius:50%;box-shadow:", ";height:100%;position:relative;width:100%;}"], rippleStyle, function (_ref3) {
  var theme = _ref3.theme;
  return theme.space.u6;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.space.u05;
}, function (_ref5) {
  var on = _ref5.on,
      theme = _ref5.theme;
  return on ? "translateX(".concat(theme.space.u4, ")") : undefined;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.transitions.rapid;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.space.u6;
}, function (_ref8) {
  var theme = _ref8.theme,
      props = _objectWithoutProperties(_ref8, _excluded);

  return theme.colors[getColor(props)];
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.elevations.plus1;
});
//# sourceMappingURL=Handle.js.map
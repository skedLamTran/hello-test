import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "indicator", "isActive", "isSelected", "isMulti"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { cloneElement, isValidElement, useContext, useMemo } from 'react';
import { Flex } from '../../../Layout';
import { ComboboxContext, ComboboxMultiContext, OptionContext } from './ComboboxContext';

function isIndicatorFunction(children) {
  return typeof children === 'function';
}

export var ComboboxOptionIndicator = function ComboboxOptionIndicator(_ref) {
  var children = _ref.children,
      propsIndicator = _ref.indicator,
      isActive = _ref.isActive,
      isSelected = _ref.isSelected,
      isMulti = _ref.isMulti,
      props = _objectWithoutProperties(_ref, _excluded);

  var context = useContext(ComboboxContext);
  var contextMulti = useContext(ComboboxMultiContext);
  var contextToUse = isMulti ? contextMulti : context;
  var indicatorPropRef = contextToUse.indicatorPropRef;
  var indicatorToUse = propsIndicator !== undefined ? propsIndicator : indicatorPropRef && indicatorPropRef.current;
  var option = useContext(OptionContext) || {
    value: ''
  };
  var label = option.label,
      value = option.value;
  var indicator = useMemo(function () {
    var indicatorProps = {
      isActive: isActive,
      isSelected: isSelected,
      label: label,
      value: value
    };

    if (isValidElement(indicatorToUse)) {
      return cloneElement(indicatorToUse, indicatorProps);
    } else if (isIndicatorFunction(indicatorToUse)) {
      return indicatorToUse(indicatorProps);
    }

    return indicatorToUse;
  }, [indicatorToUse, isActive, isSelected, value, label]);
  var content = indicator === undefined ? children : indicator;
  return React.createElement(Flex, _extends({
    width: content ? 'small' : 'none',
    alignItems: "flex-start",
    flexShrink: 0,
    justifyContent: "center",
    mr: "xsmall"
  }, props), content);
};
//# sourceMappingURL=ComboboxOptionIndicator.js.map
var _excluded = ["autoComplete", "inputReadOnly", "readOnly", "onClear", "onInputChange", "inputValue", "freeInput", "validate", "formatInputValue", "onValidationFail", "onDuplicate", "chipIconLabel", "clearIconLabel"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
import omit from 'lodash/omit';
import React, { forwardRef, useContext, useCallback, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { useForkedRef } from '../../../utils';
import { InputChips, InputChipsBase, joinValues, splitInputValue } from '../InputChips';
import { ComboboxMultiContext } from './ComboboxContext';
import { comboboxStyles } from './ComboboxInput';
import { getComboboxText, formatOptionAsString, parseOption } from './utils';
import { makeHash } from './utils/makeHash';
import { ComboboxActionType, ComboboxState, getOptionsFromValues } from './utils/state';
import { useInputEvents } from './utils/useInputEvents';
import { useInputPropRefs } from './utils/useInputPropRefs';

function parseInputValue(value) {
  try {
    var parsed = JSON.parse(value);

    if (Array.isArray(parsed)) {
      return parsed.map(function (option) {
        return typeof option === 'string' ? option : JSON.stringify(option);
      });
    }

    return splitInputValue(value);
  } catch (e) {
    return splitInputValue(value);
  }
}

function formatTextToCopy(selectedValues) {
  var noJson = true;
  var jsonReadyValues = selectedValues.map(function (value) {
    try {
      JSON.parse(value);
      noJson = false;
      return value;
    } catch (e) {
      return "\"".concat(value, "\"");
    }
  });

  if (noJson) {
    return joinValues(selectedValues);
  }

  return "[".concat(jsonReadyValues.join(','), "]");
}

export var ComboboxMultiInputInternal = forwardRef(function (props, forwardedRef) {
  var _props$autoComplete = props.autoComplete,
      autoComplete = _props$autoComplete === void 0 ? true : _props$autoComplete,
      _props$inputReadOnly = props.inputReadOnly,
      inputReadOnly = _props$inputReadOnly === void 0 ? false : _props$inputReadOnly,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      onClear = props.onClear,
      onInputChange = props.onInputChange,
      controlledInputValue = props.inputValue,
      _props$freeInput = props.freeInput,
      freeInput = _props$freeInput === void 0 ? false : _props$freeInput,
      validate = props.validate,
      formatInputValue = props.formatInputValue,
      onValidationFail = props.onValidationFail,
      onDuplicate = props.onDuplicate,
      chipIconLabel = props.chipIconLabel,
      clearIconLabel = props.clearIconLabel,
      rest = _objectWithoutProperties(props, _excluded);

  var _useContext = useContext(ComboboxMultiContext),
      _useContext$data = _useContext.data,
      navigationOption = _useContext$data.navigationOption,
      options = _useContext$data.options,
      contextInputValue = _useContext$data.inputValue,
      contextOnChange = _useContext.onChange,
      inputCallbackRef = _useContext.inputCallbackRef,
      state = _useContext.state,
      transition = _useContext.transition,
      id = _useContext.id,
      isVisible = _useContext.isVisible;

  useInputPropRefs(props, ComboboxMultiContext);

  function handleClear() {
    transition && transition(ComboboxActionType.CLEAR);
    contextOnChange && contextOnChange([]);
    onClear && onClear();
  }

  function handleChange(values) {
    transition && transition(ComboboxActionType.CHANGE_VALUES, {
      inputValues: values
    });
    var newOptions = getOptionsFromValues(options, values);
    contextOnChange && contextOnChange(newOptions);
  }

  var isInputting = useRef(false);
  var handleInputValueChange = useCallback(function (value) {
    var action = isInputting.current ? ComboboxActionType.CHANGE : ComboboxActionType.CHANGE_SILENT;
    transition === null || transition === void 0 ? void 0 : transition(action, {
      inputValue: value
    });
  }, [transition]);
  var latestInputValueRef = useRef();
  useEffect(function () {
    if (contextInputValue !== undefined && contextInputValue !== latestInputValueRef.current) {
      onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(contextInputValue);
      latestInputValueRef.current = contextInputValue;
    }
  }, [contextInputValue]);
  useEffect(function () {
    if (controlledInputValue !== undefined) {
      handleInputValueChange(controlledInputValue);
      latestInputValueRef.current = controlledInputValue;
    }
  }, [controlledInputValue]);
  var isControlled = controlledInputValue !== undefined;
  var handleInputChange = useCallback(function (value, event) {
    isInputting.current = event !== undefined;

    if (!isControlled) {
      handleInputValueChange(value);
    }

    requestAnimationFrame(function () {
      isInputting.current = false;
    });
  }, [handleInputValueChange, isControlled]);
  var inputValues = options.map(formatOptionAsString);
  var inputValue = contextInputValue || '';

  if (autoComplete && (state === ComboboxState.NAVIGATING || state === ComboboxState.INTERACTING) && navigationOption) {
    inputValue = getComboboxText(navigationOption);
  }

  var wrappedOnInputChange = useCallback(function (value, event) {
    handleInputChange(value, event);
    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(value, event);
    latestInputValueRef.current = value;
  }, [handleInputChange, onInputChange]);
  var inputEvents = useInputEvents(props, ComboboxMultiContext);

  function formatChip(value) {
    var option = parseOption(value);
    return option.label || option.value;
  }

  var commonProps = _objectSpread(_objectSpread(_objectSpread({}, omit(rest, 'selectOnClick')), inputEvents), {}, {
    'aria-activedescendant': navigationOption ? String(makeHash(navigationOption ? navigationOption.value : '')) : undefined,
    'aria-autocomplete': 'both',
    autoComplete: 'off',
    chipIconLabel: chipIconLabel,
    clearIconLabel: clearIconLabel,
    formatChip: formatChip,
    formatTextToCopy: formatTextToCopy,
    id: "listbox-input-".concat(id),
    inputReadOnly: inputReadOnly,
    inputValue: inputValue,
    isVisibleOptions: isVisible,
    onChange: handleChange,
    onClear: handleClear,
    onInputChange: wrappedOnInputChange,
    readOnly: readOnly,
    showCaret: true,
    values: inputValues
  });

  var ref = useForkedRef(inputCallbackRef, forwardedRef);
  return freeInput ? React.createElement(InputChips, _extends({}, commonProps, {
    validate: validate,
    formatInputValue: formatInputValue,
    onValidationFail: onValidationFail,
    onDuplicate: onDuplicate,
    parseInputValue: parseInputValue,
    ref: ref
  })) : React.createElement(InputChipsBase, _extends({}, commonProps, {
    ref: ref
  }));
});
ComboboxMultiInputInternal.displayName = 'ComboboxMultiInputInternal';
export var ComboboxMultiInput = styled(ComboboxMultiInputInternal).attrs(function (_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width;
  return {
    width: width
  };
}).withConfig({
  displayName: "ComboboxMultiInput",
  componentId: "sc-17k5d0g-0"
})(["", " padding-right:0;"], comboboxStyles);
//# sourceMappingURL=ComboboxMultiInput.js.map
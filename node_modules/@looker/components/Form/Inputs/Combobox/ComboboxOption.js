import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "label", "value"],
    _excluded2 = ["children", "indicator", "highlightText", "scrollIntoView"],
    _excluded3 = ["highlightText"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { color, flexbox, layout, reset, space, typography, omitStyledProps } from '@looker/design-tokens';
import React, { forwardRef, useContext } from 'react';
import styled, { css } from 'styled-components';
import omit from 'lodash/omit';
import { ReplaceText, Span } from '../../../Text';
import { useForkedRef } from '../../../utils';
import { makeHash } from './utils/makeHash';
import { OptionContext, ComboboxContext, ComboboxMultiContext } from './ComboboxContext';
import { ComboboxOptionIndicator } from './ComboboxOptionIndicator';
import { getComboboxText } from './utils/getComboboxText';
import { useOptionEvents } from './utils/useOptionEvents';
import { useOptionStatus } from './utils/useOptionStatus';
import { useAddOptionToContext } from './utils/useAddOptionToContext';
import { useOptionScroll } from './utils/useOptionScroll';
var ComboboxOptionWrapperInternal = forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      label = _ref.label,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, _excluded);

  return React.createElement(OptionContext.Provider, {
    value: {
      label: label,
      value: value
    }
  }, React.createElement("li", _extends({}, omit(omitStyledProps(rest), 'isSelected'), {
    ref: forwardedRef,
    id: String(makeHash(value)),
    role: "option",
    tabIndex: -1
  }), children));
});
ComboboxOptionWrapperInternal.displayName = 'ComboboxOptionWrapper';
export var ComboboxOptionWrapper = styled(ComboboxOptionWrapperInternal).withConfig({
  displayName: "ComboboxOption__ComboboxOptionWrapper",
  componentId: "sc-w994y4-0"
})(["background-color:", ";&[aria-selected='true']{background-color:", ";}"], function (_ref2) {
  var isSelected = _ref2.isSelected,
      theme = _ref2.theme;
  return isSelected && theme.colors.keySubtle;
}, function (_ref3) {
  var isSelected = _ref3.isSelected,
      theme = _ref3.theme;
  return isSelected ? theme.colors.keyAccent : theme.colors.ui1;
});
var ComboboxOptionInternal = forwardRef(function (_ref4, forwardedRef) {
  var children = _ref4.children,
      indicator = _ref4.indicator,
      _ref4$highlightText = _ref4.highlightText,
      highlightText = _ref4$highlightText === void 0 ? true : _ref4$highlightText,
      scrollIntoView = _ref4.scrollIntoView,
      props = _objectWithoutProperties(_ref4, _excluded2);

  var label = props.label,
      value = props.value;
  useAddOptionToContext(ComboboxContext, value, label, scrollIntoView);
  var optionEvents = useOptionEvents(props, ComboboxContext);

  var _useOptionStatus = useOptionStatus(ComboboxContext, value),
      isActive = _useOptionStatus.isActive,
      isSelected = _useOptionStatus.isSelected;

  var scrollRef = useOptionScroll(ComboboxContext, value, label, scrollIntoView, isActive);
  var ref = useForkedRef(scrollRef, forwardedRef);
  return React.createElement(ComboboxOptionWrapper, _extends({}, props, optionEvents, {
    ref: ref,
    "aria-selected": isActive,
    isSelected: isSelected
  }), React.createElement(ComboboxOptionIndicator, {
    indicator: indicator,
    isActive: isActive,
    isSelected: isSelected
  }), children || React.createElement(ComboboxOptionText, {
    highlightText: highlightText
  }));
});
ComboboxOptionInternal.displayName = 'ComboboxOptionInternal';
export var comboboxOptionStyle = css(["", " ", " ", " ", " ", " ", " align-items:stretch;cursor:default;outline:none;"], reset, color, flexbox, layout, space, typography);
export var ComboboxOption = styled(ComboboxOptionInternal).attrs(function (_ref5) {
  var _ref5$color = _ref5.color,
      color = _ref5$color === void 0 ? 'text4' : _ref5$color,
      _ref5$display = _ref5.display,
      display = _ref5$display === void 0 ? 'flex' : _ref5$display,
      _ref5$fontSize = _ref5.fontSize,
      fontSize = _ref5$fontSize === void 0 ? 'small' : _ref5$fontSize,
      _ref5$lineHeight = _ref5.lineHeight,
      lineHeight = _ref5$lineHeight === void 0 ? 'small' : _ref5$lineHeight,
      _ref5$px = _ref5.px,
      px = _ref5$px === void 0 ? 'xsmall' : _ref5$px,
      _ref5$py = _ref5.py,
      py = _ref5$py === void 0 ? 'xxsmall' : _ref5$py;
  return {
    color: color,
    display: display,
    fontSize: fontSize,
    lineHeight: lineHeight,
    px: px,
    py: py
  };
}).withConfig({
  displayName: "ComboboxOption",
  componentId: "sc-w994y4-1"
})(["", ""], comboboxOptionStyle);
export function ComboboxOptionTextInternal(_ref6) {
  var _ref6$highlightText = _ref6.highlightText,
      highlightText = _ref6$highlightText === void 0 ? true : _ref6$highlightText,
      props = _objectWithoutProperties(_ref6, _excluded3);

  var context = useContext(ComboboxContext);
  var contextMulti = useContext(ComboboxMultiContext);
  var contextToUse = context.transition ? context : contextMulti;
  var data = contextToUse.data;
  var inputValue = data.inputValue;
  var contextOption = data.option;
  var option = useContext(OptionContext);
  var text = getComboboxText(option);

  if (!highlightText || !inputValue || inputValue === '' || inputValue === getComboboxText(contextOption)) {
    return React.createElement("span", props, text);
  }

  return React.createElement("span", props, React.createElement(ReplaceText, {
    match: inputValue,
    replace: function replace(str, index) {
      return React.createElement(Span, {
        fontWeight: "semiBold",
        fontSize: "small",
        textDecoration: "underline",
        key: index
      }, str);
    }
  }, text));
}
export var ComboboxOptionText = styled(ComboboxOptionTextInternal).withConfig({
  displayName: "ComboboxOption__ComboboxOptionText",
  componentId: "sc-w994y4-2"
})([""]);
//# sourceMappingURL=ComboboxOption.js.map
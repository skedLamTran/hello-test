var _excluded = ["persistSelection", "closeOnSelect", "windowing", "cancelClickOutside", "indicator", "isMulti", "minWidth", "width"];
import "core-js/modules/web.timers.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { layout, reset, space, shouldForwardProp, typography } from '@looker/design-tokens';
import React, { forwardRef, useCallback, useContext, useEffect } from 'react';
import styled from 'styled-components';
import once from 'lodash/once';
import throttle from 'lodash/throttle';
import { usePopover } from '../../../Popover';
import { listPadding } from '../../../List/utils';
import { useResize, useSafeLayoutEffect } from '../../../utils';
import { ComboboxContext, ComboboxMultiContext } from './ComboboxContext';
import { useBlur } from './utils/useBlur';
import { useKeyDown } from './utils/useKeyDown';
import { useListWidths } from './utils/useListWidths';
var ComboboxListInternal = forwardRef(function (_ref, ref) {
  var _ref$persistSelection = _ref.persistSelection,
      persistSelection = _ref$persistSelection === void 0 ? false : _ref$persistSelection,
      _ref$closeOnSelect = _ref.closeOnSelect,
      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,
      _ref$windowing = _ref.windowing,
      windowing = _ref$windowing === void 0 ? false : _ref$windowing,
      _ref$cancelClickOutsi = _ref.cancelClickOutside,
      cancelClickOutside = _ref$cancelClickOutsi === void 0 ? false : _ref$cancelClickOutsi,
      indicator = _ref.indicator,
      isMulti = _ref.isMulti,
      minWidth = _ref.minWidth,
      width = _ref.width,
      props = _objectWithoutProperties(_ref, _excluded);

  var context = useContext(ComboboxContext);
  var contextMulti = useContext(ComboboxMultiContext);
  var contextToUse = isMulti ? contextMulti : context;
  var persistSelectionPropRef = contextToUse.persistSelectionPropRef,
      closeOnSelectPropRef = contextToUse.closeOnSelectPropRef,
      windowingPropRef = contextToUse.windowingPropRef,
      indicatorPropRef = contextToUse.indicatorPropRef,
      wrapperElement = contextToUse.wrapperElement,
      isVisible = contextToUse.isVisible,
      optionsRef = contextToUse.optionsRef,
      listRef = contextToUse.listRef,
      setListScrollPosition = contextToUse.setListScrollPosition,
      setListClientRect = contextToUse.setListClientRect,
      isScrollingRef = contextToUse.isScrollingRef,
      id = contextToUse.id;
  if (persistSelectionPropRef) persistSelectionPropRef.current = persistSelection;
  if (closeOnSelectPropRef) closeOnSelectPropRef.current = closeOnSelect;
  if (indicatorPropRef) indicatorPropRef.current = indicator;
  useSafeLayoutEffect(function () {
    if (windowingPropRef) windowingPropRef.current = windowing;
    if (optionsRef) optionsRef.current = [];
    return function () {
      if (optionsRef) optionsRef.current = [];
    };
  }, [optionsRef, isVisible, windowing, windowingPropRef]);
  var handleKeyDown = useKeyDown();
  var useBlurSingle = useBlur(ComboboxContext);
  var useBlurMulti = useBlur(ComboboxMultiContext);
  var handleBlur = isMulti ? useBlurMulti : useBlurSingle;
  var widthProps = useListWidths({
    isVisible: isVisible,
    minWidth: minWidth,
    width: width,
    wrapperElement: wrapperElement
  });
  var content = React.createElement(ComboboxUl, _extends({}, props, widthProps, {
    isMulti: isMulti,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur,
    ref: ref,
    role: "listbox",
    id: "listbox-".concat(id),
    tabIndex: -1
  }));

  var setOpen = function setOpen(isOpen) {
    if (!isOpen) {
      handleBlur();
    }
  };

  var _usePopover = usePopover({
    cancelClickOutside: cancelClickOutside,
    content: content,
    focusTrap: false,
    isOpen: isVisible,
    placement: 'bottom-start',
    setOpen: setOpen,
    triggerElement: wrapperElement,
    triggerToggle: false
  }),
      popover = _usePopover.popover,
      contentContainer = _usePopover.contentContainer,
      popperInstanceRef = _usePopover.popperInstanceRef;

  if (popperInstanceRef.current && listRef) {
    listRef.current = popperInstanceRef.current.state.elements.popper;
  }

  var valueLength = isMulti ? contextMulti.data.options.length : 1;
  useEffect(function () {
    popperInstanceRef.current && popperInstanceRef.current.update();
  }, [popperInstanceRef, valueLength]);
  var resizeListener = useCallback(function () {
    setListClientRect === null || setListClientRect === void 0 ? void 0 : setListClientRect(contentContainer === null || contentContainer === void 0 ? void 0 : contentContainer.getBoundingClientRect());
  }, [setListClientRect, contentContainer]);
  useResize(contentContainer, resizeListener);
  useEffect(function () {
    var setListClientRectOnce = once(function (containerElement) {
      setListClientRect && setListClientRect(containerElement.getBoundingClientRect());
    });

    var updateScrollState = function updateScrollState(containerElement) {
      setListClientRectOnce(containerElement);
      setListScrollPosition === null || setListScrollPosition === void 0 ? void 0 : setListScrollPosition(containerElement.scrollTop);
    };

    var timeoutValue = 50;
    var t;
    var scrollListener = throttle(function () {
      if (contentContainer) {
        updateScrollState(contentContainer);
        if (isScrollingRef) isScrollingRef.current = true;
        clearTimeout(t);
        t = setTimeout(function () {
          if (isScrollingRef) isScrollingRef.current = false;
        }, timeoutValue + 1);
      }
    }, timeoutValue);

    if (contentContainer) {
      contentContainer.addEventListener('scroll', scrollListener);
      updateScrollState(contentContainer);
    }

    return function () {
      contentContainer && contentContainer.removeEventListener('scroll', scrollListener);
      setListScrollPosition && setListScrollPosition(0);
      setListClientRect && setListClientRect(undefined);
    };
  }, [contentContainer]);
  return popover || null;
});
ComboboxListInternal.displayName = 'ComboboxListInternal';
export var ComboboxUl = styled.ul.withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "ComboboxList__ComboboxUl",
  componentId: "sc-1ban10u-0"
})(["", " ", " ", " list-style-type:none;margin:0;max-height:30rem;outline:none;position:relative;", " ", ""], reset, typography, space, layout, listPadding);
export var ComboboxList = function ComboboxList(props) {
  return React.createElement(ComboboxListInternal, _extends({}, props, {
    isMulti: false
  }));
};
export var ComboboxMultiList = function ComboboxMultiList(props) {
  return React.createElement(ComboboxListInternal, _extends({}, props, {
    isMulti: true
  }));
};
//# sourceMappingURL=ComboboxList.js.map
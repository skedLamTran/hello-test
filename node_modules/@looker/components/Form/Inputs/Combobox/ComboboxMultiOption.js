import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "indicator", "highlightText", "scrollIntoView"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useForkedRef } from '../../../utils';
import { FauxCheckbox } from '../Checkbox/FauxCheckbox';
import { CheckMark } from '../Checkbox/CheckMark';
import { ComboboxMultiContext } from './ComboboxContext';
import { comboboxOptionStyle, ComboboxOptionWrapper, ComboboxOptionText } from './ComboboxOption';
import { ComboboxOptionIndicator } from './ComboboxOptionIndicator';
import { useAddOptionToContext } from './utils/useAddOptionToContext';
import { useOptionEvents } from './utils/useOptionEvents';
import { useOptionStatus } from './utils/useOptionStatus';
import { useOptionScroll } from './utils/useOptionScroll';
export var ComboboxMultiOption = styled(forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      indicator = _ref.indicator,
      _ref$highlightText = _ref.highlightText,
      highlightText = _ref$highlightText === void 0 ? true : _ref$highlightText,
      scrollIntoView = _ref.scrollIntoView,
      props = _objectWithoutProperties(_ref, _excluded);

  var label = props.label,
      value = props.value;
  useAddOptionToContext(ComboboxMultiContext, value, label, scrollIntoView);
  var optionEvents = useOptionEvents(props, ComboboxMultiContext);

  var _useOptionStatus = useOptionStatus(ComboboxMultiContext, value),
      isActive = _useOptionStatus.isActive,
      isSelected = _useOptionStatus.isSelected;

  var scrollRef = useOptionScroll(ComboboxMultiContext, value, label, scrollIntoView, isActive);
  var ref = useForkedRef(scrollRef, forwardedRef);
  return React.createElement(ComboboxOptionWrapper, _extends({}, props, optionEvents, {
    ref: ref,
    "aria-selected": isActive,
    isSelected: isSelected
  }), React.createElement(ComboboxOptionIndicator, {
    indicator: indicator,
    isActive: isActive,
    isSelected: isSelected,
    isMulti: true
  }, React.createElement(FauxCheckbox, {
    isSelected: isSelected
  }, React.createElement(CheckMark, null))), children || React.createElement(ComboboxOptionText, {
    highlightText: highlightText
  }));
})).attrs(function (_ref2) {
  var _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? 'text4' : _ref2$color,
      _ref2$display = _ref2.display,
      display = _ref2$display === void 0 ? 'flex' : _ref2$display,
      _ref2$fontSize = _ref2.fontSize,
      fontSize = _ref2$fontSize === void 0 ? 'small' : _ref2$fontSize,
      _ref2$lineHeight = _ref2.lineHeight,
      lineHeight = _ref2$lineHeight === void 0 ? 'small' : _ref2$lineHeight,
      _ref2$px = _ref2.px,
      px = _ref2$px === void 0 ? 'xsmall' : _ref2$px,
      _ref2$py = _ref2.py,
      py = _ref2$py === void 0 ? 'xxsmall' : _ref2$py;
  return {
    color: color,
    display: display,
    fontSize: fontSize,
    lineHeight: lineHeight,
    px: px,
    py: py
  };
}).withConfig({
  displayName: "ComboboxMultiOption",
  componentId: "sc-t8w536-0"
})(["", " ", "{margin-top:1px;}"], comboboxOptionStyle, FauxCheckbox);
//# sourceMappingURL=ComboboxMultiOption.js.map
var _excluded = ["openOnFocus", "openOnClick", "onChange", "values", "defaultValues", "onClose", "onOpen", "id"],
    _excluded2 = ["ref"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.array.find.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
import every from 'lodash/every';
import isMatch from 'lodash/isMatch';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useID } from '../../../utils';
import { useFocusManagement } from './utils/useFocusManagement';
import { reducerMulti, useReducerMachine, ComboboxActionType } from './utils/state';
import { ComboboxMultiContext, defaultMultiData } from './ComboboxContext';
import { ComboboxWrapper } from './Combobox';
import { useComboboxRefs } from './utils/useComboboxRefs';
import { useComboboxToggle } from './utils/useComboboxToggle';
import { useScrollState } from './utils/useScrollState';

function compareOptions(optionsA, optionsB) {
  return every(optionsA, function (optionA) {
    return optionsB.find(function (optionB) {
      return isMatch(optionA, optionB);
    });
  });
}

export var ComboboxMultiInternal = forwardRef(function (_ref, forwardedRef) {
  var _ref$openOnFocus = _ref.openOnFocus,
      openOnFocus = _ref$openOnFocus === void 0 ? false : _ref$openOnFocus,
      _ref$openOnClick = _ref.openOnClick,
      openOnClick = _ref$openOnClick === void 0 ? true : _ref$openOnClick,
      onChange = _ref.onChange,
      values = _ref.values,
      defaultValues = _ref.defaultValues,
      onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      propsID = _ref.id,
      rest = _objectWithoutProperties(_ref, _excluded);

  var initialValues = values || defaultValues;
  var initialData = {
    options: initialValues || []
  };

  var _useReducerMachine = useReducerMachine(reducerMulti, _objectSpread(_objectSpread({}, defaultMultiData), initialData), {
    inputValues: [],
    options: []
  }),
      _useReducerMachine2 = _slicedToArray(_useReducerMachine, 3),
      state = _useReducerMachine2[0],
      data = _useReducerMachine2[1],
      transition = _useReducerMachine2[2];

  var lastActionType = data.lastActionType,
      options = data.options;

  if (values !== undefined && (options.length !== values.length || !compareOptions(options, values))) {
    transition && transition(ComboboxActionType.SELECT_SILENT, {
      options: values
    });
  }

  var focusManagement = useFocusManagement(lastActionType);
  var id = useID(propsID);
  var isVisible = useComboboxToggle(state, options, onOpen, onClose);

  var _useComboboxRefs = useComboboxRefs(forwardedRef),
      ref = _useComboboxRefs.ref,
      commonRefs = _objectWithoutProperties(_useComboboxRefs, _excluded2);

  var scrollState = useScrollState();

  var context = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, commonRefs), focusManagement), scrollState), {}, {
    data: data,
    id: id,
    isVisible: isVisible,
    onChange: onChange,
    openOnClick: openOnClick,
    openOnFocus: openOnFocus,
    state: state,
    transition: transition
  });

  return React.createElement(ComboboxMultiContext.Provider, {
    value: context
  }, React.createElement(ComboboxWrapper, _extends({
    id: id
  }, rest, {
    isVisible: isVisible,
    ref: ref
  })));
});
ComboboxMultiInternal.displayName = 'ComboboxMultiInternal';
export var ComboboxMulti = styled(ComboboxMultiInternal).attrs(function (_ref2) {
  var _ref2$display = _ref2.display,
      display = _ref2$display === void 0 ? 'flex' : _ref2$display;
  return {
    display: display
  };
}).withConfig({
  displayName: "ComboboxMulti",
  componentId: "sc-1okouq3-0"
})([""]);
//# sourceMappingURL=ComboboxMulti.js.map
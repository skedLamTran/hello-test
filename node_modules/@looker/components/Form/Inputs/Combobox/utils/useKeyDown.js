import findIndex from 'lodash/findIndex';
import throttle from 'lodash/throttle';
import xorWith from 'lodash/xorWith';
import { useContext } from 'react';
import { ComboboxContext, ComboboxMultiContext } from '../ComboboxContext';
import { ComboboxActionType, ComboboxState } from './state';
export function useKeyDown() {
  var context = useContext(ComboboxContext);
  var contextMulti = useContext(ComboboxMultiContext);
  var contextToUse = context.transition ? context : contextMulti;
  var data = contextToUse.data,
      onChange = contextToUse.onChange,
      optionsRef = contextToUse.optionsRef,
      state = contextToUse.state,
      transition = contextToUse.transition,
      autoCompletePropRef = contextToUse.autoCompletePropRef,
      persistSelectionPropRef = contextToUse.persistSelectionPropRef,
      inputReadOnlyPropRef = contextToUse.inputReadOnlyPropRef,
      closeOnSelectPropRef = contextToUse.closeOnSelectPropRef;
  var navigationOption = data.navigationOption;

  function checkOnChange() {
    if (onChange) {
      if (context.transition) {
        ;
        onChange(navigationOption);
      } else {
        var newOptions = xorWith(data.options, navigationOption ? [navigationOption] : [], function (o1, o2) {
          return o1.value === o2.value;
        });
        onChange(newOptions);
      }
    }
  }

  function selectOption() {
    checkOnChange();
    transition && transition(ComboboxActionType.SELECT_WITH_KEYBOARD, {
      persistSelection: persistSelectionPropRef && persistSelectionPropRef.current
    });

    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {
      transition && transition(ComboboxActionType.ESCAPE);
    }
  }

  return throttle(function handleKeyDown(event) {
    event.persist();
    var options = optionsRef ? optionsRef.current : [];

    switch (event.key) {
      case 'ArrowDown':
        {
          event.preventDefault();

          if (state === ComboboxState.IDLE) {
            transition && transition(ComboboxActionType.NAVIGATE, {
              persistSelection: persistSelectionPropRef && persistSelectionPropRef.current
            });
          } else {
            var index = navigationOption ? findIndex(options, ['value', navigationOption.value]) : -1;
            var atBottom = index === options.length - 1;

            if (atBottom) {
              if (autoCompletePropRef && autoCompletePropRef.current) {
                transition && transition(ComboboxActionType.NAVIGATE, {
                  option: undefined
                });
              } else {
                var firstOption = options[0];
                transition && transition(ComboboxActionType.NAVIGATE, {
                  option: firstOption
                });
              }
            } else {
              var nextOption = options[(index + 1) % options.length];
              transition && transition(ComboboxActionType.NAVIGATE, {
                option: nextOption
              });
            }
          }

          break;
        }

      case 'ArrowUp':
        {
          event.preventDefault();

          if (state === ComboboxState.IDLE) {
            transition && transition(ComboboxActionType.NAVIGATE, {
              persistSelection: persistSelectionPropRef && persistSelectionPropRef.current
            });
          } else {
            var _index = navigationOption ? findIndex(options, ['value', navigationOption.value]) : -1;

            if (_index === 0) {
              if (autoCompletePropRef && autoCompletePropRef.current) {
                transition && transition(ComboboxActionType.NAVIGATE, {
                  option: undefined
                });
              } else {
                var lastOption = options[options.length - 1];
                transition && transition(ComboboxActionType.NAVIGATE, {
                  option: lastOption
                });
              }
            } else if (_index === -1) {
              var option = options[options.length - 1];
              transition && transition(ComboboxActionType.NAVIGATE, {
                option: option
              });
            } else {
              var _nextOption = options[(_index - 1 + options.length) % options.length];
              transition && transition && transition(ComboboxActionType.NAVIGATE, {
                option: _nextOption
              });
            }
          }

          break;
        }

      case ' ':
      case 'Spacebar':
        {
          if (inputReadOnlyPropRef && inputReadOnlyPropRef.current && state === ComboboxState.NAVIGATING && navigationOption !== undefined) {
            selectOption();
          }

          break;
        }

      case 'Enter':
        {
          if (state === ComboboxState.NAVIGATING && navigationOption !== undefined) {
            event.preventDefault();
            selectOption();
          }

          break;
        }
    }
  }, 50);
}
//# sourceMappingURL=useKeyDown.js.map
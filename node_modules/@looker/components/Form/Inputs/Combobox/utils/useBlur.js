import { useContext } from 'react';
import { getNextFocusTarget } from '../../../../utils';
import { ComboboxActionType, ComboboxState } from './state';
export function useBlur(context) {
  var _useContext = useContext(context),
      inputValue = _useContext.data.inputValue,
      state = _useContext.state,
      transition = _useContext.transition,
      listRef = _useContext.listRef,
      inputElement = _useContext.inputElement,
      freeInputPropRef = _useContext.freeInputPropRef;

  function closeList(action) {
    var payload = freeInputPropRef && freeInputPropRef.current ? {
      inputValue: inputValue
    } : undefined;
    transition && transition(action, payload);
  }

  return function handleBlur(e) {
    if (!e) {
      if (state !== ComboboxState.IDLE) {
        closeList(ComboboxActionType.ESCAPE);
      }

      return;
    }

    var nextFocusTarget = getNextFocusTarget(e);
    var popoverCurrent = listRef ? listRef.current : null;

    if (popoverCurrent) {
      var focusInList = popoverCurrent && popoverCurrent.contains(nextFocusTarget);

      if (focusInList && state !== ComboboxState.INTERACTING) {
        transition && transition(ComboboxActionType.INTERACT);
      } else if (!focusInList && nextFocusTarget !== inputElement) {
        closeList(ComboboxActionType.BLUR);
      }

      focusInList && freeInputPropRef && freeInputPropRef.current && e.preventDefault();
    }
  };
}
//# sourceMappingURL=useBlur.js.map
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["autoComplete", "disabled", "freeInput", "clearIconLabel", "inputReadOnly", "isClearable", "onChange", "noErrorIcon", "readOnly", "summary", "validationType", "value"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import omit from 'lodash/omit';
import React, { forwardRef, useRef, useContext } from 'react';
import styled, { css } from 'styled-components';
import { useForkedRef, useSafeLayoutEffect, useWrapEvent } from '../../../utils';
import { InputText } from '../InputText';
import { AdvancedInputControls } from '../AdvancedInputControls';
import { ComboboxContext } from './ComboboxContext';
import { getComboboxText } from './utils/getComboboxText';
import { makeHash } from './utils/makeHash';
import { ComboboxActionType, ComboboxState } from './utils/state';
import { useInputEvents } from './utils/useInputEvents';
import { useInputPropRefs } from './utils/useInputPropRefs';
export var ComboboxInputInternal = forwardRef(function (props, forwardedRef) {
  var _props$autoComplete = props.autoComplete,
      autoComplete = _props$autoComplete === void 0 ? true : _props$autoComplete,
      disabled = props.disabled,
      freeInput = props.freeInput,
      clearIconLabel = props.clearIconLabel,
      _props$inputReadOnly = props.inputReadOnly,
      inputReadOnly = _props$inputReadOnly === void 0 ? false : _props$inputReadOnly,
      isClearable = props.isClearable,
      onChange = props.onChange,
      noErrorIcon = props.noErrorIcon,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      summary = props.summary,
      validationType = props.validationType,
      controlledValue = props.value,
      rest = _objectWithoutProperties(props, _excluded);

  var _useContext = useContext(ComboboxContext),
      _useContext$data = _useContext.data,
      navigationOption = _useContext$data.navigationOption,
      option = _useContext$data.option,
      contextInputValue = _useContext$data.inputValue,
      contextOnChange = _useContext.onChange,
      inputCallbackRef = _useContext.inputCallbackRef,
      inputElement = _useContext.inputElement,
      state = _useContext.state,
      transition = _useContext.transition,
      id = _useContext.id,
      isVisible = _useContext.isVisible;

  useInputPropRefs(props, ComboboxContext);
  var ref = useForkedRef(inputCallbackRef, forwardedRef);
  var isControlled = controlledValue !== undefined;

  function handleClear() {
    contextOnChange && contextOnChange(undefined);
    transition && transition(ComboboxActionType.CLEAR);
    inputElement === null || inputElement === void 0 ? void 0 : inputElement.focus();
  }

  function handleValueChange(value) {
    transition && transition(ComboboxActionType.CHANGE, {
      inputValue: value
    });
  }

  var isInputting = useRef(false);
  useSafeLayoutEffect(function () {
    if (controlledValue !== undefined) {
      if (isInputting.current) {
        handleValueChange(controlledValue);
      } else {
        transition && transition(ComboboxActionType.CHANGE_SILENT, {
          inputValue: controlledValue
        });
      }
    }
  }, [controlledValue]);

  function handleChange(event) {
    isInputting.current = true;

    if (!isControlled) {
      handleValueChange(event.currentTarget.value);
    }

    requestAnimationFrame(function () {
      isInputting.current = false;
    });
  }

  var inputOption = contextInputValue !== undefined ? contextInputValue : option;

  if (autoComplete && (state === ComboboxState.NAVIGATING || state === ComboboxState.INTERACTING)) {
    inputOption = navigationOption || option;
  }

  var inputValue = controlledValue !== undefined ? controlledValue : getComboboxText(inputOption);
  var wrappedOnChange = useWrapEvent(handleChange, onChange);
  var inputEvents = useInputEvents(props, ComboboxContext);
  return React.createElement(InputText, _extends({}, omit(rest, 'selectOnClick'), inputEvents, {
    disabled: disabled,
    after: React.createElement(AdvancedInputControls, {
      disabled: disabled,
      clearIconLabel: clearIconLabel,
      isVisibleOptions: isVisible,
      onClear: handleClear,
      showCaret: !freeInput,
      showClear: !!(isClearable && inputValue) && !disabled && !readOnly,
      summary: summary,
      errorIcon: !noErrorIcon && validationType === 'error'
    }),
    ref: ref,
    value: inputValue,
    readOnly: inputReadOnly || readOnly,
    onChange: wrappedOnChange,
    id: "listbox-input-".concat(id),
    autoComplete: "off",
    "aria-autocomplete": "both",
    validationType: validationType,
    "aria-activedescendant": navigationOption ? String(makeHash(navigationOption ? navigationOption.value : '')) : undefined
  }));
});
ComboboxInputInternal.displayName = 'ComboboxInputInternal';
export var comboboxStyles = css(["", ""], function (_ref) {
  var inputReadOnly = _ref.inputReadOnly;
  return inputReadOnly ? css(["cursor:default;input{cursor:default;}"]) : '';
});
export var ComboboxInput = styled(ComboboxInputInternal).attrs(function (_ref2) {
  var _ref2$width = _ref2.width,
      width = _ref2$width === void 0 ? '100%' : _ref2$width;
  return {
    width: width
  };
}).withConfig({
  displayName: "ComboboxInput",
  componentId: "sc-kxdvwm-0"
})(["", ""], comboboxStyles);
//# sourceMappingURL=ComboboxInput.js.map
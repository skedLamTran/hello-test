import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
var _excluded = ["className", "filters", "hideFilterIcon", "onChange"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.some.js";
import "core-js/modules/es.object.values.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.find.js";
import "core-js/modules/es.array.find-index.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useTranslation } from 'react-i18next';
import omit from 'lodash/omit';
import styled from 'styled-components';
import React, { useMemo, useState, useRef } from 'react';
import { Close } from '@styled-icons/material/Close';
import { FilterList } from '@styled-icons/material/FilterList';
import { Select } from '../Select';
import { InputText, inputTextFocus, inputCSS } from '../InputText';
import { Icon } from '../../../Icon';
import { IconButton } from '../../../Button';
import { Chip } from '../../../Chip';
import { Text } from '../../../Text';
import { Popover, PopoverContent } from '../../../Popover';
import { InputFiltersChip } from './InputFiltersChip';
import { inputFilterEditor } from './inputFilterEditor';

var InputFiltersLayout = function InputFiltersLayout(_ref) {
  var className = _ref.className,
      filters = _ref.filters,
      _ref$hideFilterIcon = _ref.hideFilterIcon,
      hideFilterIcon = _ref$hideFilterIcon === void 0 ? false : _ref$hideFilterIcon,
      onChange = _ref.onChange,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useTranslation = useTranslation('InputFilters'),
      t = _useTranslation.t;

  var placeholder = props.placeholder || t('Filter List');

  var _useState = useState(undefined),
      _useState2 = _slicedToArray(_useState, 2),
      fieldEditing = _useState2[0],
      setFieldEditing = _useState2[1];

  var assignedFilters = filters.filter(function (filter) {
    return filter.value || filter.field === fieldEditing;
  }).sort(function (a, b) {
    if (a.value === undefined) {
      return 1;
    } else if (b.value === undefined) {
      return -1;
    } else {
      return 0;
    }
  });
  var unassignedFilters = filters.filter(function (filter) {
    return !assignedFilters.map(function (assigned) {
      return assigned.field;
    }).includes(filter.field);
  });

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      filterTerm = _useState4[0],
      setFilterTerm = _useState4[1];

  var options = useMemo(function () {
    return unassignedFilters.reduce(function (acc, filter) {
      var option = {
        label: filter.label || filter.field,
        value: filter.field
      };
      var optionMatchesFilter = Object.values(option).some(function (value) {
        return value.toLocaleLowerCase().indexOf(filterTerm.toLocaleLowerCase()) > -1;
      });

      if (optionMatchesFilter) {
        acc = [].concat(_toConsumableArray(acc), [option]);
      }

      return acc;
    }, []);
  }, [filterTerm, unassignedFilters]);
  var inputRef = useRef(null);
  var isClearable = assignedFilters.length > 0;

  var clearFilters = function clearFilters() {
    onChange(filters.map(function (filter) {
      return omit(filter, 'value');
    }));
  };

  var focusInput = function focusInput() {
    return inputRef.current && inputRef.current.focus();
  };

  var handleFilterLookupChange = function handleFilterLookupChange(field) {
    var filter = filters.find(function (option) {
      return option.field === field;
    });

    if (filter) {
      setFieldEditing(filter.field);
    }
  };

  return React.createElement("div", {
    className: className,
    onClick: focusInput
  }, !hideFilterIcon && React.createElement(Icon, {
    color: "ui4",
    mr: "xsmall",
    mt: "xxsmall",
    icon: React.createElement(FilterList, null),
    size: 20
  }), React.createElement(ChipWrapper, null, assignedFilters.map(function (filter, i) {
    var editor = filter.editor,
        field = filter.field,
        value = filter.value;

    var editFilter = function editFilter() {
      return setFieldEditing(field);
    };

    var handleDelete = function handleDelete() {
      return onChange(filters.map(function (currentFilter) {
        return currentFilter.field !== field ? currentFilter : omit(currentFilter, 'value');
      }));
    };

    var setFieldEditingValue = function setFieldEditingValue(value) {
      var filterIndex = assignedFilters.findIndex(function (f) {
        return f.field === fieldEditing;
      });
      var newFilters = [].concat(_toConsumableArray(assignedFilters), _toConsumableArray(unassignedFilters));

      var updateFilter = _objectSpread(_objectSpread({}, newFilters[filterIndex]), {}, {
        value: value
      });

      newFilters[filterIndex] = updateFilter;
      onChange(newFilters);
    };

    var closeEditor = function closeEditor() {
      return setFieldEditing(undefined);
    };

    var filterToken = value ? React.createElement(InputFiltersChip, {
      filter: filter,
      key: i,
      onClick: editFilter,
      onDelete: handleDelete
    }) : React.createElement(Text, {
      fontSize: "small",
      lineHeight: "xlarge"
    }, (filter === null || filter === void 0 ? void 0 : filter.label) || filter.field, ":");
    return filter.field === fieldEditing ? React.createElement(Popover, {
      content: React.createElement(PopoverContent, null, editor ? editor({
        closeEditor: closeEditor,
        filterOptions: filter,
        onChange: setFieldEditingValue,
        value: value
      }) : inputFilterEditor({
        closeEditor: closeEditor,
        filterOptions: filter,
        onChange: setFieldEditingValue,
        value: value
      })),
      isOpen: fieldEditing !== undefined,
      key: i,
      placement: t('bottom-start'),
      setOpen: closeEditor
    }, filterToken) : filterToken;
  }), !fieldEditing && React.createElement(Select, {
    autoResize: true,
    openOnFocus: true,
    indicator: false,
    onFilter: setFilterTerm,
    isFilterable: true,
    onChange: handleFilterLookupChange,
    options: options,
    placeholder: placeholder,
    ref: inputRef
  })), isClearable && React.createElement(IconButton, {
    icon: React.createElement(Close, null),
    label: t('Clear Filters'),
    ml: "auto",
    mt: "xxsmall",
    mr: "xsmall",
    onClick: clearFilters,
    size: "xsmall"
  }));
};

var ChipWrapper = styled.div.withConfig({
  displayName: "InputFilters__ChipWrapper",
  componentId: "sc-1eligs2-0"
})(["display:inline-flex;flex:1;flex-wrap:wrap;@supports (gap:4px){gap:", ";", "{margin:0;}}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.space.u1;
}, Chip);
export var InputFilters = styled(InputFiltersLayout).withConfig({
  displayName: "InputFilters",
  componentId: "sc-1eligs2-1"
})(["", " align-items:start;display:flex;flex-wrap:wrap;padding:", " 0;padding-left:", ";width:100%;&:focus-within{", "}", "{margin-left:", ";}", " ", "{display:none;}", "{border:none;height:30px;padding:0;&:focus-within{box-shadow:none;}input{padding:0;}}"], inputCSS, function (_ref3) {
  var space = _ref3.theme.space;
  return space.u05;
}, function (_ref4) {
  var space = _ref4.theme.space;
  return space.u2;
}, inputTextFocus, Select, function (_ref5) {
  var space = _ref5.theme.space;
  return space.u1;
}, Select, Icon, InputText);
//# sourceMappingURL=InputFilters.js.map
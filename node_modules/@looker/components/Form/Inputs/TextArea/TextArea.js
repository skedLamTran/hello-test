var _excluded = ["className", "validationType"];
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled, { css } from 'styled-components';
import { ErrorIcon } from '../ErrorIcon';
import { inputTextHover, inputTextFocus, inputTextDisabled, inputTextValidation, inputCSS } from '../InputText';
import { simpleLayoutCSS } from '../../../Layout/utils/simple';
import { pickInputProps } from '../InputProps';

var TextAreaLayout = function TextAreaLayout(_ref) {
  var className = _ref.className,
      validationType = _ref.validationType,
      props = _objectWithoutProperties(_ref, _excluded);

  var textareaProps = pickInputProps(props);
  return React.createElement("div", {
    className: className
  }, React.createElement("textarea", _extends({
    "aria-invalid": validationType === 'error' ? 'true' : undefined
  }, textareaProps)), validationType && React.createElement(ErrorIcon, null));
};

var textAreaResize = function textAreaResize(_ref2) {
  var resize = _ref2.resize;

  if (resize === false) {
    resize = 'none';
  } else if (resize === true) {
    resize = 'vertical';
  }

  return css(["resize:", ";"], resize);
};

export var TextArea = styled(TextAreaLayout).attrs(function (_ref3) {
  var _ref3$resize = _ref3.resize,
      resize = _ref3$resize === void 0 ? 'vertical' : _ref3$resize,
      _ref3$minHeight = _ref3.minHeight,
      minHeight = _ref3$minHeight === void 0 ? '6.25rem' : _ref3$minHeight;
  return {
    minHeight: minHeight,
    resize: resize
  };
}).withConfig({
  displayName: "TextArea",
  componentId: "sc-10ezzv1-0"
})(["height:fit-content;position:relative;width:100%;", "{pointer-events:none;position:absolute;right:calc(", " + 1px);top:calc(", " / 2);}textarea{font-family:inherit;margin:0;", " ", " padding:", ";padding-right:", ";", " vertical-align:top;width:100%;::placeholder{color:", ";}&:hover{", "}&:focus,:focus-within{", "}", " ", "}"], ErrorIcon, function (_ref4) {
  var theme = _ref4.theme;
  return theme.space.u3;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.space.u3;
}, simpleLayoutCSS, inputCSS, function (_ref6) {
  var theme = _ref6.theme;
  return "".concat(theme.space.u2, " ").concat(theme.space.u3);
}, function (_ref7) {
  var theme = _ref7.theme,
      validationType = _ref7.validationType;
  return validationType === 'error' && theme.space.u10;
}, textAreaResize, function (_ref8) {
  var theme = _ref8.theme;
  return theme.colors.text2;
}, inputTextHover, inputTextFocus, function (_ref9) {
  var disabled = _ref9.disabled;
  return disabled ? inputTextDisabled : '';
}, inputTextValidation);
TextArea.displayName = 'TextArea';
//# sourceMappingURL=TextArea.js.map
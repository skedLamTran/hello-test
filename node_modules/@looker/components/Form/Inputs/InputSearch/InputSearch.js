var _excluded = ["autoResize", "autoFocus", "changeOnSelect", "clearOnClose", "defaultValue", "disabled", "hideSearchIcon", "clearIconLabel", "indicator", "isClearable", "isLoading", "listLayout", "name", "noOptionsLabel", "onChange", "onSelectOption", "options", "placeholder", "readOnly", "summary", "value", "windowing"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import { Search } from '@styled-icons/material-outlined/Search';
import { useControlWarn } from '../../../utils';
import { Combobox, ComboboxInput, ComboboxList } from '../Combobox';
import { SelectOptions } from '../Select';
import { omitAriaAndValidationProps, pickAriaAndValidationProps } from '../ariaProps';
import { getMatchingOption } from '../Select/utils/options';
import { useShouldWindowOptions } from '../Select/utils/useWindowedOptions';
import { useFlatOptions } from '../Select/utils/useFlatOptions';
var InputSearchLayout = forwardRef(function (_ref, ref) {
  var autoResize = _ref.autoResize,
      autoFocus = _ref.autoFocus,
      _ref$changeOnSelect = _ref.changeOnSelect,
      changeOnSelect = _ref$changeOnSelect === void 0 ? true : _ref$changeOnSelect,
      _ref$clearOnClose = _ref.clearOnClose,
      clearOnClose = _ref$clearOnClose === void 0 ? !changeOnSelect : _ref$clearOnClose,
      defaultValue = _ref.defaultValue,
      disabled = _ref.disabled,
      hideSearchIcon = _ref.hideSearchIcon,
      clearIconLabel = _ref.clearIconLabel,
      indicator = _ref.indicator,
      _ref$isClearable = _ref.isClearable,
      isClearable = _ref$isClearable === void 0 ? true : _ref$isClearable,
      isLoading = _ref.isLoading,
      listLayout = _ref.listLayout,
      name = _ref.name,
      noOptionsLabel = _ref.noOptionsLabel,
      onChange = _ref.onChange,
      onSelectOption = _ref.onSelectOption,
      options = _ref.options,
      placeholder = _ref.placeholder,
      readOnly = _ref.readOnly,
      summary = _ref.summary,
      controlledValue = _ref.value,
      windowingProp = _ref.windowing,
      props = _objectWithoutProperties(_ref, _excluded);

  var isControlled = useControlWarn({
    controllingProps: ['value'],
    isControlledCheck: function isControlledCheck() {
      return controlledValue !== undefined;
    },
    name: 'InputSearch'
  });

  var _useState = useState(defaultValue || ''),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var valueToUse = isControlled ? controlledValue : value;

  var _useFlatOptions = useFlatOptions(options),
      flatOptions = _useFlatOptions.flatOptions,
      navigationOptions = _useFlatOptions.navigationOptions;

  var matchingOption = getMatchingOption(valueToUse, navigationOptions);
  var optionValue = matchingOption || {
    value: ''
  };

  function updateValue(newValue) {
    if (onChange) {
      onChange(newValue);
    }

    if (!isControlled) {
      setValue(newValue);
    }
  }

  function handleChange(option) {
    onSelectOption && onSelectOption(option);

    if (changeOnSelect) {
      updateValue((option === null || option === void 0 ? void 0 : option.value) || '');
    }
  }

  function handleInputChange(e) {
    updateValue(e.currentTarget.value);
  }

  function handleClose() {
    if (clearOnClose) {
      updateValue('');
    }
  }

  var ariaProps = pickAriaAndValidationProps(props);
  var windowing = useShouldWindowOptions(flatOptions, windowingProp);
  return React.createElement(Combobox, _extends({
    value: optionValue,
    onChange: handleChange,
    onClose: handleClose,
    openOnClick: false,
    width: autoResize ? 'auto' : '100%',
    display: autoResize ? 'inline-flex' : undefined
  }, omitAriaAndValidationProps(props)), React.createElement(ComboboxInput, _extends({}, ariaProps, {
    autoComplete: false,
    autoFocus: autoFocus,
    autoResize: autoResize,
    disabled: disabled,
    freeInput: true,
    iconBefore: hideSearchIcon ? undefined : React.createElement(Search, {
      "data-testid": "search-icon"
    }),
    clearIconLabel: clearIconLabel,
    name: name,
    isClearable: isClearable,
    onChange: handleInputChange,
    placeholder: placeholder,
    readOnly: readOnly,
    ref: ref,
    summary: summary,
    validationType: props.validationType,
    value: valueToUse
  })), !disabled && ((options === null || options === void 0 ? void 0 : options.length) || noOptionsLabel) && React.createElement(ComboboxList, _extends({
    persistSelection: true,
    windowing: windowing,
    indicator: indicator,
    width: autoResize ? 'auto' : undefined,
    "aria-busy": isLoading
  }, ariaProps, listLayout), React.createElement(SelectOptions, {
    flatOptions: flatOptions,
    navigationOptions: navigationOptions,
    windowing: windowing,
    isFilterable: true,
    noOptionsLabel: noOptionsLabel,
    isLoading: isLoading
  })));
});
InputSearchLayout.displayName = 'InputSearch';
export var InputSearch = styled(InputSearchLayout).withConfig({
  displayName: "InputSearch",
  componentId: "sc-c2e1s0-0"
})([""]);
//# sourceMappingURL=InputSearch.js.map
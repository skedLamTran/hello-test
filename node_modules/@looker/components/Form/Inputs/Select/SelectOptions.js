var _excluded = ["description", "detail", "preface"],
    _excluded2 = ["option"];

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.function.name.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useTranslation } from 'react-i18next';
import React, { createContext, useContext, useEffect, useMemo } from 'react';
import styled from 'styled-components';
import { Icon, IconPlaceholder } from '../../../Icon';
import { Spinner } from '../../../Spinner';
import { ListDivider } from '../../../List/ListDivider';
import { ListItemPreface } from '../../../ListItem/ListItemPreface';
import { Heading, Paragraph, Text } from '../../../Text';
import { useID } from '../../../utils';
import { ComboboxContext, ComboboxMultiContext, ComboboxMultiOption, ComboboxOption, ComboboxOptionIndicator, ComboboxOptionText } from '../Combobox';
import { optionsHaveIcons, notInOptions } from './utils/options';
import { useWindowedOptions } from './utils/useWindowedOptions';
import { SelectOptionDetail } from './SelectOptionDetail';
export var SelectOptionsContext = createContext({
  hasIcons: false
});

var OptionLayoutBase = function OptionLayoutBase(_ref) {
  var isMulti = _ref.isMulti,
      option = _ref.option,
      scrollIntoView = _ref.scrollIntoView;

  var description = option.description,
      detail = option.detail,
      preface = option.preface,
      rest = _objectWithoutProperties(option, _excluded);

  var Component = isMulti ? ComboboxMultiOption : ComboboxOption;

  if (description || detail || preface) {
    return React.createElement(Component, _extends({}, rest, {
      py: preface || description ? 'xsmall' : 'xxsmall',
      scrollIntoView: scrollIntoView
    }), React.createElement(SelectOptionWithDescription, _extends({
      description: description,
      preface: preface
    }, rest)), detail && React.createElement(SelectOptionDetail, null, detail));
  }

  return React.createElement(Component, rest);
};

var OptionIcon = function OptionIcon(_ref2) {
  var preface = _ref2.preface,
      icon = _ref2.icon;
  return icon ? React.createElement(Icon, {
    size: "small",
    mt: preface ? 'medium' : 'none',
    color: "text1",
    icon: icon,
    "data-testid": "option-icon"
  }) : null;
};

var OptionLayout = function OptionLayout(_ref3) {
  var option = _ref3.option,
      rest = _objectWithoutProperties(_ref3, _excluded2);

  var _useContext = useContext(SelectOptionsContext),
      hasIcons = _useContext.hasIcons;

  var _useContext2 = useContext(ComboboxContext),
      indicatorPropRef = _useContext2.indicatorPropRef;

  var iconPlaceholder = hasIcons ? React.createElement(IconPlaceholder, {
    mr: "xsmall",
    size: "small",
    "data-testid": "option-icon-placeholder"
  }) : undefined;
  var indicator = option.icon ? React.createElement(OptionIcon, option) : option.indicator || (indicatorPropRef === null || indicatorPropRef === void 0 ? void 0 : indicatorPropRef.current) || iconPlaceholder;
  useEffect(function () {
    if (option.icon && option.indicator) {
      console.warn('Use icon or indicator but not both at the same time.');
    }
  }, [option.icon, option.indicator]);
  return React.createElement(OptionLayoutBase, _extends({}, rest, {
    option: _objectSpread(_objectSpread({}, option), {}, {
      indicator: indicator
    })
  }));
};

var MultiOptionLayout = function MultiOptionLayout(props) {
  return React.createElement(OptionLayoutBase, _extends({}, props, {
    isMulti: true
  }));
};

export var SelectOptionWithDescription = function SelectOptionWithDescription(_ref4) {
  var description = _ref4.description,
      preface = _ref4.preface;
  return description || preface ? React.createElement("div", null, preface && React.createElement(ListItemPreface, null, preface), React.createElement(Paragraph, {
    fontSize: "small",
    lineHeight: "small"
  }, React.createElement(ComboboxOptionText, null)), description && React.createElement(Paragraph, {
    color: "text2",
    fontSize: "xsmall",
    lineHeight: "xsmall"
  }, description)) : React.createElement(ComboboxOptionText, null);
};
var SelectOptionGroupTitle = styled(Heading).attrs(function () {
  return {
    color: 'text1',
    fontFamily: 'body',
    fontSize: 'xxsmall',
    fontWeight: 'semiBold',
    px: 'u2',
    py: 'u1'
  };
}).withConfig({
  displayName: "SelectOptions__SelectOptionGroupTitle",
  componentId: "sc-8zhrcr-0"
})(["display:flex;padding-top:", ";"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.space.u1;
});
export var SelectOptions = function SelectOptions(props) {
  var _useTranslation = useTranslation('SelectOptions'),
      t = _useTranslation.t;

  var noOptionsLabelText = t('No options');
  var flatOptions = props.flatOptions,
      navigationOptions = props.navigationOptions,
      isFilterable = props.isFilterable,
      showCreate = props.showCreate,
      formatCreateLabel = props.formatCreateLabel,
      isMulti = props.isMulti,
      _props$noOptionsLabel = props.noOptionsLabel,
      noOptionsLabel = _props$noOptionsLabel === void 0 ? noOptionsLabelText : _props$noOptionsLabel,
      windowing = props.windowing,
      isLoading = props.isLoading;

  var _useWindowedOptions = useWindowedOptions(windowing, flatOptions, navigationOptions, isMulti),
      start = _useWindowedOptions.start,
      end = _useWindowedOptions.end,
      before = _useWindowedOptions.before,
      after = _useWindowedOptions.after,
      scrollToFirst = _useWindowedOptions.scrollToFirst,
      scrollToLast = _useWindowedOptions.scrollToLast;

  var keyPrefix = useID(flatOptions === null || flatOptions === void 0 ? void 0 : flatOptions.length.toString());
  var hasIcons = useMemo(function () {
    return optionsHaveIcons(navigationOptions);
  }, [navigationOptions]);

  if (isLoading) {
    return React.createElement(EmptyListItem, null, React.createElement(Spinner, {
      size: 30,
      "aria-label": t('Loading')
    }));
  }

  var optionsToRender = flatOptions ? flatOptions.slice(start, end + 1) : [];
  var OptionLayoutToUse = isMulti ? MultiOptionLayout : OptionLayout;
  var noOptions = React.createElement(EmptyListItem, null, React.createElement(Text, {
    color: "text1"
  }, noOptionsLabel));
  var createOption = isFilterable && showCreate && React.createElement(SelectCreateOption, {
    options: navigationOptions,
    formatLabel: formatCreateLabel,
    noOptions: noOptions,
    isMulti: isMulti,
    key: "create"
  });
  return React.createElement(SelectOptionsContext.Provider, {
    value: {
      hasIcons: hasIcons
    }
  }, navigationOptions && scrollToFirst ? React.createElement(OptionLayoutToUse, {
    option: navigationOptions[0],
    key: "".concat(keyPrefix, "-0"),
    scrollIntoView: true
  }) : null, before, optionsToRender && optionsToRender.length > 0 ? [].concat(_toConsumableArray(optionsToRender.map(function (option, index) {
    var key = "".concat(keyPrefix, "-").concat(start + index);

    if (option.value !== undefined) {
      var _OptionLayoutToUse = isMulti ? MultiOptionLayout : OptionLayout;

      return React.createElement(_OptionLayoutToUse, {
        option: option,
        key: key
      });
    } else if (option.label !== undefined) {
      return React.createElement(SelectOptionGroupTitle, {
        isMulti: isMulti,
        key: key
      }, React.createElement(ComboboxOptionIndicator, {
        indicator: isMulti && ' '
      }), option.label);
    }

    return React.createElement(ListDivider, {
      key: key
    });
  })), [createOption]) : createOption || noOptions, after, navigationOptions && scrollToLast ? React.createElement(OptionLayoutToUse, {
    option: navigationOptions[navigationOptions.length - 1],
    key: "".concat(keyPrefix, "-").concat(navigationOptions.length - 1),
    scrollIntoView: true
  }) : null);
};

var SelectCreateOption = function SelectCreateOption(_ref6) {
  var options = _ref6.options,
      noOptions = _ref6.noOptions,
      formatLabel = _ref6.formatLabel,
      isMulti = _ref6.isMulti;

  var _useContext3 = useContext(ComboboxContext),
      data = _useContext3.data;

  var _useContext4 = useContext(ComboboxMultiContext),
      dataMulti = _useContext4.data;

  var inputValue = isMulti ? dataMulti.inputValue : data.inputValue;
  var shouldShow = useMemo(function () {
    var currentOptions = [];

    if (isMulti) {
      currentOptions = dataMulti.options;
    } else if (data.option) {
      currentOptions = [data.option];
    }

    return notInOptions(currentOptions, options, inputValue);
  }, [isMulti, data.option, dataMulti.options, options, inputValue]);

  if (!shouldShow || !inputValue) {
    if (!options || options.length === 0) return React.createElement(React.Fragment, null, noOptions);
    return null;
  }

  var OptionComponent = isMulti ? ComboboxMultiOption : ComboboxOption;
  return React.createElement(OptionComponent, {
    value: inputValue,
    highlightText: false,
    indicator: false
  }, formatLabel ? formatLabel(inputValue) : "Create \"".concat(inputValue, "\""));
};

var EmptyListItem = styled.li.withConfig({
  displayName: "SelectOptions__EmptyListItem",
  componentId: "sc-8zhrcr-1"
})(["display:flex;justify-content:center;padding:", ";"], function (_ref7) {
  var theme = _ref7.theme;
  return "".concat(theme.space.u8, " ").concat(theme.space.u4);
});
//# sourceMappingURL=SelectOptions.js.map
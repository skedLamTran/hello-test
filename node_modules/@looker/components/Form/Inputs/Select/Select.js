var _excluded = ["options", "disabled", "autoFocus", "isFilterable", "isClearable", "placeholder", "name", "onFilter", "onChange", "value", "defaultValue", "noOptionsLabel", "indicator", "listLayout", "autoResize", "windowing", "showCreate", "formatCreateLabel", "isLoading", "noErrorIcon"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { omitAriaAndValidationProps, pickAriaAndValidationProps } from '../ariaProps';
import { Combobox, ComboboxInput, ComboboxList } from '../Combobox';
import { SelectOptions } from './SelectOptions';
import { SelectInputIcon } from './SelectInputIcon';
import { getOption, getFirstOption } from './utils/options';
import { useFlatOptions } from './utils/useFlatOptions';
import { useShouldWindowOptions } from './utils/useWindowedOptions';
var SelectComponent = forwardRef(function (_ref, ref) {
  var options = _ref.options,
      disabled = _ref.disabled,
      autoFocus = _ref.autoFocus,
      isFilterable = _ref.isFilterable,
      isClearable = _ref.isClearable,
      placeholder = _ref.placeholder,
      name = _ref.name,
      onFilter = _ref.onFilter,
      onChange = _ref.onChange,
      value = _ref.value,
      defaultValue = _ref.defaultValue,
      noOptionsLabel = _ref.noOptionsLabel,
      indicator = _ref.indicator,
      listLayout = _ref.listLayout,
      autoResize = _ref.autoResize,
      windowingProp = _ref.windowing,
      _ref$showCreate = _ref.showCreate,
      showCreate = _ref$showCreate === void 0 ? false : _ref$showCreate,
      formatCreateLabel = _ref.formatCreateLabel,
      isLoading = _ref.isLoading,
      noErrorIcon = _ref.noErrorIcon,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useFlatOptions = useFlatOptions(options),
      flatOptions = _useFlatOptions.flatOptions,
      navigationOptions = _useFlatOptions.navigationOptions;

  var optionValue = getOption(value, navigationOptions);
  var nullDefault = (isClearable || placeholder) && !defaultValue;
  var defaultOptionValue = nullDefault ? undefined : getOption(defaultValue, navigationOptions) || options && getFirstOption(options);

  function handleChange(option) {
    var newValue = option ? option.value : '';
    onChange && onChange(newValue);
    onFilter && onFilter('');
  }

  function handleInputChange(e) {
    onFilter && onFilter(e.currentTarget.value);
  }

  function handleClose() {
    onFilter && onFilter('');
  }

  var ariaProps = pickAriaAndValidationProps(props);
  var windowing = useShouldWindowOptions(flatOptions, windowingProp);
  return React.createElement(Combobox, _extends({
    value: optionValue,
    defaultValue: defaultOptionValue,
    onChange: handleChange,
    onClose: handleClose,
    width: autoResize ? 'auto' : '100%',
    display: autoResize ? 'inline-flex' : undefined
  }, omitAriaAndValidationProps(props)), React.createElement(ComboboxInput, _extends({}, ariaProps, {
    before: React.createElement(SelectInputIcon, {
      options: navigationOptions
    }),
    disabled: disabled,
    autoFocus: autoFocus,
    placeholder: placeholder,
    name: name,
    noErrorIcon: noErrorIcon,
    validationType: props.validationType,
    isClearable: isClearable,
    autoComplete: false,
    autoResize: autoResize,
    inputReadOnly: !isFilterable,
    onChange: handleInputChange,
    selectOnClick: isFilterable,
    ref: ref
  })), !disabled && React.createElement(ComboboxList, _extends({
    persistSelection: true,
    windowing: windowing,
    indicator: indicator,
    width: autoResize ? 'auto' : undefined,
    "aria-busy": isLoading
  }, ariaProps, listLayout), React.createElement(SelectOptions, {
    flatOptions: flatOptions,
    navigationOptions: navigationOptions,
    windowing: windowing,
    isFilterable: isFilterable,
    noOptionsLabel: noOptionsLabel,
    showCreate: showCreate,
    formatCreateLabel: formatCreateLabel,
    isLoading: isLoading
  })));
});
SelectComponent.displayName = 'SelectComponent';
export var Select = styled(SelectComponent).withConfig({
  displayName: "Select",
  componentId: "sc-1grg5v4-0"
})([""]);
//# sourceMappingURL=Select.js.map
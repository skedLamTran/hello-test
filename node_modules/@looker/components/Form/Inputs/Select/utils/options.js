function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.find.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.some.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import { getComboboxText } from '../../Combobox';
export function getMatchingOption(value, options) {
  return options === null || options === void 0 ? void 0 : options.find(function (option) {
    return option.value === value;
  });
}
export function getOption(value, options) {
  var matchingOption = getMatchingOption(value, options);
  var label = matchingOption === null || matchingOption === void 0 ? void 0 : matchingOption.label;
  var labelProps = label ? {
    label: label
  } : {};
  return value !== undefined ? _objectSpread(_objectSpread({}, labelProps), {}, {
    value: value
  }) : undefined;
}
export function getOptions(values, options) {
  if (!values) return undefined;
  return values.map(function (value) {
    return {
      label: getComboboxText(value, options),
      value: value
    };
  });
}
export function compareOption(option, value) {
  return getComboboxText(option).toLowerCase() === value.toLowerCase();
}
export function getFirstOption(options) {
  var optionAsGroup = options[0];
  if (optionAsGroup && optionAsGroup.options) return optionAsGroup.options[0];
  return options[0];
}
export function notInOptions(currentOptions, options, inputValue) {
  if (!inputValue) return false;

  if (currentOptions.find(function (option) {
    return compareOption(option, inputValue);
  })) {
    return false;
  }

  if (!options) return true;
  return options.find(function (option) {
    return compareOption(option, inputValue);
  }) === undefined;
}

var checkForIcon = function checkForIcon(option) {
  return option.icon !== undefined;
};

export var optionsHaveIcons = function optionsHaveIcons(options) {
  if (!options || options.length === 0) return false;
  return options.some(function (option) {
    return checkForIcon(option);
  });
};
//# sourceMappingURL=options.js.map
var _excluded = ["autoFocus", "closeOnSelect", "defaultValues", "disabled", "formatCreateLabel", "freeInput", "chipIconLabel", "clearIconLabel", "indicator", "isFilterable", "isLoading", "listLayout", "noOptionsLabel", "onChange", "onDuplicate", "onFilter", "onValidationFail", "noErrorIcon", "options", "placeholder", "removeOnBackspace", "showCreate", "formatInputValue", "validate", "values", "windowing"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { omitAriaAndValidationProps, pickAriaAndValidationProps } from '../ariaProps';
import { ComboboxMulti, ComboboxMultiInput, ComboboxMultiList } from '../Combobox';
import { SelectOptions } from './SelectOptions';
import { getOptions } from './utils/options';
import { useFlatOptions } from './utils/useFlatOptions';
import { useShouldWindowOptions } from './utils/useWindowedOptions';
var SelectMultiComponent = forwardRef(function (_ref, ref) {
  var autoFocus = _ref.autoFocus,
      _ref$closeOnSelect = _ref.closeOnSelect,
      closeOnSelect = _ref$closeOnSelect === void 0 ? false : _ref$closeOnSelect,
      defaultValues = _ref.defaultValues,
      disabled = _ref.disabled,
      formatCreateLabel = _ref.formatCreateLabel,
      _ref$freeInput = _ref.freeInput,
      freeInput = _ref$freeInput === void 0 ? false : _ref$freeInput,
      chipIconLabel = _ref.chipIconLabel,
      clearIconLabel = _ref.clearIconLabel,
      indicator = _ref.indicator,
      _ref$isFilterable = _ref.isFilterable,
      isFilterable = _ref$isFilterable === void 0 ? false : _ref$isFilterable,
      isLoading = _ref.isLoading,
      listLayout = _ref.listLayout,
      noOptionsLabel = _ref.noOptionsLabel,
      onChange = _ref.onChange,
      onDuplicate = _ref.onDuplicate,
      onFilter = _ref.onFilter,
      onValidationFail = _ref.onValidationFail,
      noErrorIcon = _ref.noErrorIcon,
      options = _ref.options,
      placeholder = _ref.placeholder,
      _ref$removeOnBackspac = _ref.removeOnBackspace,
      removeOnBackspace = _ref$removeOnBackspac === void 0 ? true : _ref$removeOnBackspac,
      _ref$showCreate = _ref.showCreate,
      showCreate = _ref$showCreate === void 0 ? false : _ref$showCreate,
      formatInputValue = _ref.formatInputValue,
      validate = _ref.validate,
      values = _ref.values,
      windowingProp = _ref.windowing,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useFlatOptions = useFlatOptions(options),
      flatOptions = _useFlatOptions.flatOptions,
      navigationOptions = _useFlatOptions.navigationOptions;

  var optionValues = getOptions(values, navigationOptions);
  var defaultOptionValues = getOptions(defaultValues, navigationOptions);

  function handleChange() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var newValues = options && options.map(function (option) {
      return option.value;
    });
    onChange && onChange(newValues);
  }

  function handleInputChange(value) {
    onFilter === null || onFilter === void 0 ? void 0 : onFilter(value);
  }

  var ariaProps = pickAriaAndValidationProps(props);
  var windowing = useShouldWindowOptions(flatOptions, windowingProp);
  return React.createElement(ComboboxMulti, _extends({}, omitAriaAndValidationProps(props), {
    values: optionValues,
    defaultValues: defaultOptionValues,
    onChange: handleChange
  }), React.createElement(ComboboxMultiInput, _extends({}, ariaProps, {
    disabled: disabled,
    autoFocus: autoFocus,
    placeholder: placeholder,
    chipIconLabel: chipIconLabel,
    clearIconLabel: clearIconLabel,
    removeOnBackspace: removeOnBackspace,
    validationType: props.validationType,
    autoComplete: false,
    inputReadOnly: !isFilterable && !freeInput,
    onInputChange: handleInputChange,
    selectOnClick: isFilterable,
    freeInput: freeInput,
    validate: validate,
    formatInputValue: formatInputValue,
    noErrorIcon: noErrorIcon,
    onValidationFail: onValidationFail,
    onDuplicate: onDuplicate,
    ref: ref
  })), !disabled && React.createElement(ComboboxMultiList, _extends({
    persistSelection: true,
    closeOnSelect: closeOnSelect,
    windowing: windowing,
    indicator: indicator,
    "aria-busy": isLoading
  }, ariaProps, listLayout), React.createElement(SelectOptions, {
    isMulti: true,
    flatOptions: flatOptions,
    navigationOptions: navigationOptions,
    windowing: windowing,
    isFilterable: isFilterable,
    noOptionsLabel: noOptionsLabel,
    showCreate: showCreate,
    formatCreateLabel: formatCreateLabel,
    isLoading: isLoading
  })));
});
SelectMultiComponent.displayName = 'SelectMultiComponent';
export var SelectMulti = styled(SelectMultiComponent).withConfig({
  displayName: "SelectMulti",
  componentId: "sc-176rl8-0"
})([""]);
//# sourceMappingURL=SelectMulti.js.map
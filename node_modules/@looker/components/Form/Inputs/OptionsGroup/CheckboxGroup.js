var _excluded = ["autoFocus", "disabled", "inline", "name", "options", "defaultValue", "value", "onChange", "validationType"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
import xor from 'lodash/xor';
import React, { forwardRef, useCallback, useRef } from 'react';
import styled from 'styled-components';
import { useID } from '../../../utils';
import { Fieldset } from '../../Fieldset';
import { FieldCheckbox } from '../../Fields/FieldCheckbox';
import { inputHeight } from '../height';

function getCheckedProps(optionValue, value, defaultValue) {
  var key = value ? 'checked' : 'defaultChecked';
  var valueToUse = value || defaultValue || [];
  return _defineProperty({}, key, valueToUse.includes(optionValue));
}

var CheckboxGroupLayout = forwardRef(function (_ref2, ref) {
  var autoFocus = _ref2.autoFocus,
      disabled = _ref2.disabled,
      inline = _ref2.inline,
      propsName = _ref2.name,
      options = _ref2.options,
      _ref2$defaultValue = _ref2.defaultValue,
      defaultValue = _ref2$defaultValue === void 0 ? [] : _ref2$defaultValue,
      value = _ref2.value,
      onChange = _ref2.onChange,
      validationType = _ref2.validationType,
      rest = _objectWithoutProperties(_ref2, _excluded);

  var name = useID(propsName);
  var uncontrolledValueRef = useRef(defaultValue);
  var getChangeHandler = useCallback(function (optionValue) {
    return onChange ? function () {
      var oldValue = value || uncontrolledValueRef.current;
      var newValue = xor(oldValue, [optionValue]);
      onChange(newValue);
      uncontrolledValueRef.current = newValue;
    } : undefined;
  }, [onChange, value]);
  var checkboxes = options.map(function (option, index) {
    var checkedProps = getCheckedProps(option.value, value, defaultValue);
    var autoFocusProps = index === 0 && autoFocus ? {
      autoFocus: autoFocus
    } : {};
    var handleChange = getChangeHandler(option.value);
    return React.createElement(FieldCheckbox, _extends({
      onChange: handleChange,
      disabled: option.disabled || disabled,
      key: option.value,
      label: option.label,
      detail: option.detail,
      name: name,
      validationType: validationType,
      value: option.value
    }, checkedProps, autoFocusProps));
  });
  return React.createElement(Fieldset, _extends({
    "data-testid": "checkbox-list",
    inline: inline,
    wrap: inline,
    gap: !inline ? 'u1' : undefined,
    width: inline ? 'auto' : undefined,
    ref: ref
  }, rest), checkboxes);
});
CheckboxGroupLayout.displayName = 'CheckboxGroupLayout';
export var CheckboxGroup = styled(CheckboxGroupLayout).withConfig({
  displayName: "CheckboxGroup",
  componentId: "sc-kl6hc5-0"
})(["", "{", "}"], FieldCheckbox, function (_ref3) {
  var inline = _ref3.inline;
  return inline ? "line-height: ".concat(inputHeight, ";") : '';
});
//# sourceMappingURL=CheckboxGroup.js.map
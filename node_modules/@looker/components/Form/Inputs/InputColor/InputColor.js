var _excluded = ["hideInput", "id", "name", "onChange", "onFocus", "onBlur", "placeholder", "value", "defaultValue", "disabled", "readOnly", "validationType"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, forwardRef, useEffect } from 'react';
import styled from 'styled-components';
import { useWrapEvent } from '../../../utils';
import { PopoverLayout } from '../../../Popover';
import { Combobox, ComboboxInput, ComboboxList } from '../Combobox';
import { omitAriaAndValidationProps, pickAriaAndValidationProps } from '../ariaProps';
import { Swatch } from './Swatch';
import { isValidColor, hsvToHex, simpleHsvToHex, stringToSimpleHsv } from './utils';
import { ColorPicker } from './ColorPicker';
import { DEFAULT_INPUT_COLOR_WIDTH } from './dimensions';

var createEventWithHSVValue = function createEventWithHSVValue(color, name) {
  return {
    currentTarget: {
      name: name,
      value: typeof color === 'string' ? color : simpleHsvToHex(color)
    },
    target: {
      name: name,
      value: typeof color === 'string' ? color : simpleHsvToHex(color)
    }
  };
};

function getColorFromText(text) {
  return text && isValidColor(text) ? stringToSimpleHsv(text) : undefined;
}

var InputColorInternal = forwardRef(function (_ref, ref) {
  var hideInput = _ref.hideInput,
      id = _ref.id,
      name = _ref.name,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      placeholder = _ref.placeholder,
      value = _ref.value,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
      disabled = _ref.disabled,
      readOnly = _ref.readOnly,
      validationType = _ref.validationType,
      props = _objectWithoutProperties(_ref, _excluded);

  var initialColor = getColorFromText(value || defaultValue);

  var _useState = useState(initialColor),
      _useState2 = _slicedToArray(_useState, 2),
      color = _useState2[0],
      setColor = _useState2[1];

  var _useState3 = useState(value || defaultValue),
      _useState4 = _slicedToArray(_useState3, 2),
      inputTextValue = _useState4[0],
      setInputTextValue = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isFocused = _useState6[0],
      setIsFocused = _useState6[1];

  var handleFocus = function handleFocus() {
    return setIsFocused(true);
  };

  var handleBlur = function handleBlur() {
    return setIsFocused(false);
  };

  var wrappedOnFocus = useWrapEvent(handleFocus, onFocus);
  var wrappedOnBlur = useWrapEvent(handleBlur, onBlur);
  useEffect(function () {
    if (value && value !== inputTextValue) {
      setColor(stringToSimpleHsv(value));
      !isFocused && setInputTextValue(value);
    }
  }, [isFocused, value, inputTextValue]);

  var callOnChange = function callOnChange(newColor) {
    onChange === null || onChange === void 0 ? void 0 : onChange(createEventWithHSVValue(newColor, name));
  };

  var setColorState = function setColorState(newColor) {
    setColor(newColor);
    var newTextValue = newColor ? simpleHsvToHex(newColor) : '';
    setInputTextValue(newTextValue);
    callOnChange(newColor || '');
  };

  var handleInputTextChange = function handleInputTextChange(e) {
    var newValue = e.currentTarget.value;
    setInputTextValue(newValue);
    var isValid = isValidColor(newValue) || newValue === '';

    if (isValid) {
      callOnChange(newValue);
    }

    setColor(getColorFromText(newValue));
  };

  var handleClear = function handleClear(value) {
    if (!value) {
      setColorState();
    }
  };

  var ariaProps = pickAriaAndValidationProps(props);
  return React.createElement(Combobox, _extends({}, omitAriaAndValidationProps(props), {
    onChange: handleClear
  }), React.createElement(ComboboxInput, _extends({
    before: React.createElement(Swatch, {
      color: color ? hsvToHex(color) : undefined,
      disabled: disabled,
      readOnly: readOnly,
      ml: "u2"
    }),
    "aria-describedby": "describedby-".concat(id),
    ref: ref,
    disabled: disabled,
    readOnly: readOnly,
    validationType: validationType,
    onChange: handleInputTextChange,
    value: inputTextValue,
    onFocus: wrappedOnFocus,
    onBlur: wrappedOnBlur,
    placeholder: placeholder,
    isClearable: true
  }, ariaProps)), !disabled && !readOnly && React.createElement(ComboboxList, _extends({
    width: "fit-content"
  }, ariaProps), React.createElement(PopoverLayout, null, React.createElement(ColorPicker, {
    hsv: color || {
      h: 0,
      s: 1,
      v: 1
    },
    setHsv: setColorState,
    width: DEFAULT_INPUT_COLOR_WIDTH
  }))));
});
InputColorInternal.displayName = 'InputColorInternal';
export var InputColor = styled(InputColorInternal).withConfig({
  displayName: "InputColor",
  componentId: "sc-s77c8w-0"
})([""]);
//# sourceMappingURL=InputColor.js.map
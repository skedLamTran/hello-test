import React from 'react';
import type { InputChipsCommonProps, InputChipsControlProps, InputChipsInputControlProps } from './InputChipsBase';
export declare type FormatInputValue = ((value: string) => string) | false;
export interface InputChipsValidationProps {
    validate?: (value: string) => boolean;
    formatInputValue?: FormatInputValue;
    onValidationFail?: (values: string[]) => void;
    onDuplicate?: (values: string[]) => void;
}
export declare const splitInputValue: (inputValue: string) => string[];
export interface InputChipsProps extends Omit<InputChipsCommonProps, 'onValidationFail'>, InputChipsControlProps, Partial<InputChipsInputControlProps>, InputChipsValidationProps {
    parseInputValue?: (value: string) => string[];
}
export declare const validateValues: (newValues: string[], currentValues: string[], validate?: ((value: string) => boolean) | undefined, formatInputValue?: FormatInputValue | undefined) => {
    duplicateValues: string[];
    invalidValues: string[];
    unusedValues: string[];
    validValues: string[];
};
export declare const InputChips: import("styled-components").StyledComponent<React.ForwardRefExoticComponent<InputChipsProps & React.RefAttributes<HTMLInputElement>>, import("styled-components").DefaultTheme, {}, never>;

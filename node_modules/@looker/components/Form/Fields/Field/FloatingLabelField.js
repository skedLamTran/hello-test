var _excluded = ["className", "externalLabel"],
    _excluded2 = ["ariaLabelOnly", "children", "detail", "disabled", "hideLabel", "id", "inline", "label", "required", "labelOffset", "hasValue", "checkValueOnBlur"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { width } from '@looker/design-tokens';
import React, { useContext } from 'react';
import styled, { ThemeContext } from 'styled-components';
import { Space } from '../../../Layout';
import { DISABLED_OPACITY } from '../../constants';
import { FieldsetContext } from '../../Fieldset';
import { Field } from './Field';
import { FieldDetail } from './FieldDetail';
import { FieldLabel } from './FieldLabel';
import { HelperText } from './HelperText';
import { InputArea } from './InputArea';
import { useFloatingLabel } from './useFloatingLabel';

var getLabelColor = function getLabelColor(isFocused, validationMessage) {
  if ((validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type) === 'error') return 'critical';
  if (isFocused) return 'key';
  return undefined;
};

export var FloatingLabelField = styled(function (_ref) {
  var className = _ref.className,
      propsExternalLabel = _ref.externalLabel,
      props = _objectWithoutProperties(_ref, _excluded);

  var ariaLabelOnly = props.ariaLabelOnly,
      children = props.children,
      detail = props.detail,
      disabled = props.disabled,
      hideLabel = props.hideLabel,
      id = props.id,
      inline = props.inline,
      label = props.label,
      required = props.required,
      labelOffset = props.labelOffset,
      hasValue = props.hasValue,
      checkValueOnBlur = props.checkValueOnBlur,
      rest = _objectWithoutProperties(props, _excluded2);

  var _useFloatingLabel = useFloatingLabel({
    checkValueOnBlur: checkValueOnBlur,
    hasValue: hasValue,
    labelOffset: labelOffset
  }),
      labelPositionClass = _useFloatingLabel.className,
      isFocused = _useFloatingLabel.isFocused,
      handlers = _useFloatingLabel.handlers,
      style = _useFloatingLabel.style;

  var _useContext = useContext(ThemeContext),
      externalLabel = _useContext.defaults.externalLabel;

  var _useContext2 = useContext(FieldsetContext),
      fieldsHideLabel = _useContext2.fieldsHideLabel;

  if (externalLabel || propsExternalLabel || !label || hideLabel || fieldsHideLabel || inline) {
    return React.createElement(Field, props);
  }

  return React.createElement("div", {
    className: "".concat(className, " ").concat(labelPositionClass),
    style: style,
    "data-disabled": disabled
  }, React.createElement(InputArea, handlers, children), React.createElement(FieldLabel, {
    ariaLabelOnly: ariaLabelOnly,
    id: id,
    label: label,
    hideLabel: hideLabel,
    required: required,
    fontWeight: "normal",
    color: getLabelColor(isFocused, props.validationMessage)
  }), React.createElement(Space, {
    width: "auto",
    align: "start"
  }, React.createElement(HelperText, _extends({
    id: id
  }, rest)), detail && React.createElement(FieldDetail, {
    pt: "u2",
    color: "text2"
  }, detail)));
}).withConfig({
  displayName: "FloatingLabelField",
  componentId: "sc-1sw05so-0"
})(["display:", ";opacity:", ";padding-top:calc(", " / 2);position:relative;width:", ";", " label{background:", ";border-radius:", ";font-size:", ";left:calc(", " + 1px);line-height:initial;padding:0 ", ";position:absolute;top:0;transition:", "ms;}&.label-down{label{font-size:", ";pointer-events:none;transform:translate(var(--label-translate,0));}input::placeholder,textarea::placeholder{color:", ";}}& > ", "{margin:0 calc(", " + 1px);}"], function (_ref2) {
  var autoResize = _ref2.autoResize;
  return autoResize ? 'inline-block' : 'block';
}, function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled ? DISABLED_OPACITY : '1';
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.fontSizes.xsmall;
}, function (_ref5) {
  var autoResize = _ref5.autoResize;
  return autoResize ? 'fit-content' : '100%';
}, width, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.field;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.radii.small;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.fontSizes.xsmall;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.space.u2;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.space.u1;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.transitions.rapid;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.fontSizes.small;
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.colors.field;
}, Space, function (_ref14) {
  var theme = _ref14.theme;
  return theme.space.u3;
});
//# sourceMappingURL=FloatingLabelField.js.map
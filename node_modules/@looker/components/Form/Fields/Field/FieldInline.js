import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.string.small.js";
import React, { isValidElement } from 'react';
import styled from 'styled-components';
import { Label } from '../../Label/Label';
import { Paragraph, Span } from '../../../Text';
import { ValidationMessage } from '../../ValidationMessage/ValidationMessage';
import { Truncate } from '../../../Truncate';
import { RequiredStar } from './RequiredStar';

var FieldInlineLayout = function FieldInlineLayout(_ref) {
  var className = _ref.className,
      children = _ref.children,
      description = _ref.description,
      detail = _ref.detail,
      label = _ref.label,
      id = _ref.id,
      required = _ref.required,
      validationMessage = _ref.validationMessage;
  var describedbyId = "describedby-".concat(id);
  var inputWithAriaDescribed = isValidElement(children) ? React.cloneElement(children, {
    'aria-describedby': describedbyId
  }) : children;
  return React.createElement("div", {
    className: className
  }, React.createElement(InputArea, null, inputWithAriaDescribed), React.createElement(Label, {
    htmlFor: id
  }, React.createElement(Truncate, null, label), required && React.createElement(RequiredStar, null)), detail && React.createElement(FieldDetail, null, detail), React.createElement(MessageArea, {
    id: describedbyId
  }, description && React.createElement(FieldDescription, null, description), validationMessage && React.createElement(ValidationMessage, validationMessage)));
};

var FieldDetail = styled(Span).withConfig({
  displayName: "FieldInline__FieldDetail",
  componentId: "sc-1gab50g-0"
})(["color:", ";font-size:", ";grid-column:3;grid-row:1;-ms-grid-column:3;-ms-grid-column-span:2;-ms-grid-row:1;padding-left:", ";"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.text2;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.fontSizes.xsmall;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.space.u2;
});
var FieldDescription = styled(Paragraph).withConfig({
  displayName: "FieldInline__FieldDescription",
  componentId: "sc-1gab50g-1"
})(["color:", ";font-size:", ";line-height:", ";padding-bottom:", ";padding-top:", ";"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.text2;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.fontSizes.xsmall;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.lineHeights.xsmall;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.space.u05;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.space.u05;
});
var InputArea = styled.div.withConfig({
  displayName: "FieldInline__InputArea",
  componentId: "sc-1gab50g-2"
})(["grid-column:1;grid-row:1;padding-right:", ";-ms-grid-column:1;-ms-grid-column-span:1;-ms-grid-row:1;"], function (_ref10) {
  var theme = _ref10.theme;
  return theme.space.u1;
});
var MessageArea = styled.div.withConfig({
  displayName: "FieldInline__MessageArea",
  componentId: "sc-1gab50g-3"
})(["grid-column:2;grid-column-end:span 2;grid-row:2;-ms-grid-column:2;-ms-grid-column-end:span 2;-ms-grid-column-span:2;-ms-grid-row:2;"]);
export var FieldInline = styled(FieldInlineLayout).withConfig({
  displayName: "FieldInline",
  componentId: "sc-1gab50g-4"
})(["align-items:center;display:grid;grid-template-columns:auto auto auto auto;justify-content:start;line-height:", ";display:-ms-grid;-ms-grid-columns:auto auto auto auto;", "{align-items:center;color:", ";display:flex;font-size:", ";font-weight:normal;grid-column:2;grid-row:1;overflow:hidden;width:100%;-ms-grid-column:2;-ms-grid-column-span:1;-ms-grid-row:1;}"], function (_ref11) {
  var theme = _ref11.theme;
  return theme.lineHeights.small;
}, Label, function (_ref12) {
  var theme = _ref12.theme,
      disabled = _ref12.disabled;
  return disabled && theme.colors.text1;
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.fontSizes.small;
});
//# sourceMappingURL=FieldInline.js.map
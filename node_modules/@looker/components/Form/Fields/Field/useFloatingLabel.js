function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useState, useContext } from 'react';
import { ThemeContext } from 'styled-components';
import { getPortalRoot } from '../../../Portal';
import { useSyncedState, getNextFocusTarget } from '../../../utils';

var defaultCheckValueOnBlur = function defaultCheckValueOnBlur(e) {
  var target = e.currentTarget;
  var input = target.querySelector('input') || target.querySelector('textarea');
  return (input === null || input === void 0 ? void 0 : input.value) !== undefined && input.value !== '';
};

var getIsInSelectList = function getIsInSelectList(nextFocusTarget, inputArea) {
  var portalRoot = getPortalRoot();

  if (!portalRoot.contains(nextFocusTarget)) {
    return false;
  }

  if (portalRoot.contains(inputArea)) {
    return (nextFocusTarget === null || nextFocusTarget === void 0 ? void 0 : nextFocusTarget.closest('portal-child')) !== inputArea.closest('portal-child');
  }

  return true;
};

export var getHasValue = function getHasValue(_ref) {
  var value = _ref.value,
      defaultValue = _ref.defaultValue;
  if (value !== undefined) return value !== '';
  if (defaultValue !== undefined) return defaultValue !== '';
  return false;
};
export var useFloatingLabel = function useFloatingLabel(_ref2) {
  var _ref2$checkValueOnBlu = _ref2.checkValueOnBlur,
      checkValueOnBlur = _ref2$checkValueOnBlu === void 0 ? defaultCheckValueOnBlur : _ref2$checkValueOnBlu,
      propsHasValue = _ref2.hasValue,
      _ref2$labelOffset = _ref2.labelOffset,
      labelOffset = _ref2$labelOffset === void 0 ? '0rem' : _ref2$labelOffset;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var _useSyncedState = useSyncedState(propsHasValue),
      _useSyncedState2 = _slicedToArray(_useSyncedState, 2),
      hasValue = _useSyncedState2[0],
      setHasValue = _useSyncedState2[1];

  var theme = useContext(ThemeContext);

  var style = _defineProperty({}, '--label-translate', "".concat(labelOffset, ", ").concat(theme.space.u4));

  return {
    className: hasValue || isFocused ? 'label-up' : 'label-down',
    handlers: {
      onBlur: function onBlur(e) {
        if (checkValueOnBlur) {
          setHasValue(checkValueOnBlur(e));
        }

        var nextFocusTarget = getNextFocusTarget(e);
        var isInSelectList = getIsInSelectList(nextFocusTarget, e.currentTarget);

        if (nextFocusTarget && !e.currentTarget.contains(nextFocusTarget) && !isInSelectList) {
          setIsFocused(false);
        }
      },
      onFocus: function onFocus() {
        setIsFocused(true);
      }
    },
    isFocused: isFocused,
    style: style
  };
};
//# sourceMappingURL=useFloatingLabel.js.map
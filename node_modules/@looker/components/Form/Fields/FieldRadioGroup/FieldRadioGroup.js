var _excluded = ["id", "options", "name", "inputsInline"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { useID } from '../../../utils';
import { useFormContext } from '../../Form';
import { Field, omitFieldProps, pickFieldProps } from '../Field';
import { RadioGroup } from '../../Inputs/OptionsGroup';

var FieldRadioGroupLayout = function FieldRadioGroupLayout(_ref) {
  var propsID = _ref.id,
      options = _ref.options,
      name = _ref.name,
      inputsInline = _ref.inputsInline,
      props = _objectWithoutProperties(_ref, _excluded);

  var validationMessage = useFormContext(props);
  var id = useID(propsID);
  return React.createElement(Field, _extends({}, pickFieldProps(props), {
    id: id
  }), React.createElement(RadioGroup, _extends({}, omitFieldProps(props), {
    "aria-describedby": "describedby-".concat(id),
    "aria-labelledby": "labelledby-".concat(id),
    id: id,
    inline: props.inline || inputsInline,
    name: name || id,
    options: options,
    validationType: validationMessage && validationMessage.type
  })));
};

FieldRadioGroupLayout.displayName = 'FieldRadioGroupLayout';
export var FieldRadioGroup = styled(FieldRadioGroupLayout).withConfig({
  displayName: "FieldRadioGroup",
  componentId: "sc-4fiozu-0"
})([""]);
//# sourceMappingURL=FieldRadioGroup.js.map
var _excluded = ["accordion", "className", "inline", "gap", "legend", "fieldsHideLabel", "children", "wrap", "defaultOpen", "isOpen", "toggleOpen", "onClose", "onOpen"];
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { createContext, forwardRef } from 'react';
import styled from 'styled-components';
import { omitStyledProps } from '@looker/design-tokens';
import { Space, SpaceVertical } from '../../Layout';
import { simpleLayoutCSS } from '../../Layout/utils/simple';
import { Legend } from '../Legend';
import { Accordion2 } from '../../Accordion2';
import { accordionDimensions } from '../../Accordion2/accordionDimensions';
export var FieldsetContext = createContext({});
var FieldsetLayout = forwardRef(function (props, ref) {
  var accordion = props.accordion,
      className = props.className,
      inline = props.inline,
      _props$gap = props.gap,
      gap = _props$gap === void 0 ? 'u4' : _props$gap,
      legend = props.legend,
      fieldsHideLabel = props.fieldsHideLabel,
      children = props.children,
      wrap = props.wrap,
      defaultOpen = props.defaultOpen,
      isOpen = props.isOpen,
      toggleOpen = props.toggleOpen,
      onClose = props.onClose,
      onOpen = props.onOpen,
      restProps = _objectWithoutProperties(props, _excluded);

  var LayoutComponent = inline ? Space : SpaceVertical;
  var content = React.createElement(LayoutComponent, {
    gap: gap,
    ref: ref,
    role: "group",
    align: "start",
    flexWrap: wrap ? 'wrap' : undefined
  }, children);
  !legend && accordion && console.warn('Please provide a value for the "legend" prop if using accordion mode');
  var LegendComponent = accordion ? FieldsetAccordionLegend : Legend;
  var legendRender = typeof legend === 'string' ? React.createElement(LegendComponent, null, legend) : legend;
  var accordionProps = {
    defaultOpen: defaultOpen,
    indicatorPosition: 'left',
    label: legendRender,
    onClose: onClose,
    onOpen: onOpen
  };

  if (isOpen && toggleOpen) {
    accordionProps = _objectSpread(_objectSpread({}, accordionProps), {}, {
      isOpen: isOpen,
      toggleOpen: toggleOpen
    });
  }

  var renderedFieldset = content;

  if (legend) {
    if (accordion) {
      renderedFieldset = React.createElement(Accordion2, accordionProps, React.createElement(FieldsetAccordionContent, null, content));
    } else {
      renderedFieldset = React.createElement(SpaceVertical, null, legendRender, content);
    }
  }

  return React.createElement(FieldsetContext.Provider, {
    value: {
      fieldsHideLabel: fieldsHideLabel || false
    }
  }, React.createElement("div", _extends({}, omitStyledProps(restProps), {
    className: className
  }), renderedFieldset));
});

var FieldsetAccordionLegend = function FieldsetAccordionLegend(props) {
  return React.createElement(Legend, _extends({
    py: "xxsmall",
    fontSize: "small"
  }, props));
};

FieldsetLayout.displayName = 'FieldsetLayout';
var FieldsetAccordionContent = styled.div.withConfig({
  displayName: "Fieldset__FieldsetAccordionContent",
  componentId: "sc-fc4a60-0"
})(["padding-left:", ";padding-top:", ";"], function (_ref) {
  var theme = _ref.theme;
  return "calc(".concat(theme.sizes[accordionDimensions().indicatorSize], " + ").concat(theme.space[accordionDimensions().indicatorGap], ")");
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.space.u4;
});
export var Fieldset = styled(FieldsetLayout).attrs(function (_ref3) {
  var _ref3$width = _ref3.width,
      width = _ref3$width === void 0 ? '100%' : _ref3$width;
  return {
    width: width
  };
}).withConfig({
  displayName: "Fieldset",
  componentId: "sc-fc4a60-1"
})(["", ""], simpleLayoutCSS);
//# sourceMappingURL=Fieldset.js.map
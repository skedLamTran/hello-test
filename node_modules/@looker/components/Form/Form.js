import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useContext, createContext } from 'react';
import omit from 'lodash/omit';
import { SpaceVertical } from '../Layout';
export var FormContext = createContext({});
export var Form = forwardRef(function (props, ref) {
  return React.createElement(FormContext.Provider, {
    value: {
      validationMessages: props.validationMessages
    }
  }, React.createElement(SpaceVertical, _extends({
    as: "form"
  }, omit(props, 'validationMessages'), {
    ref: ref
  })));
});
Form.displayName = 'Form';
export function useFormContext(_ref) {
  var name = _ref.name,
      validationMessage = _ref.validationMessage;
  var context = useContext(FormContext);
  var vMessage;

  if (context.validationMessages && name) {
    vMessage = context.validationMessages[name];
  } else if (validationMessage) {
    vMessage = validationMessage;
  }

  return vMessage;
}
//# sourceMappingURL=Form.js.map
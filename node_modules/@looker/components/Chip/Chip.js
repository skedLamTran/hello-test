var _excluded = ["children", "disabled", "iconLabel", "onBlur", "onClick", "onDelete", "onKeyUp", "onKeyDown", "readOnly", "prefix", "truncate"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
import { useTranslation } from 'react-i18next';
import { maxWidth, reset } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { Close } from '@styled-icons/material/Close';
import { useClickable, useWrapEvent } from '../utils';
import { IconButton } from '../Button/IconButton';
import { Span } from '../Text';
import { truncateCSS } from '../Text/truncate';
var ChipStyle = styled.span.withConfig({
  displayName: "Chip__ChipStyle",
  componentId: "sc-1stj55z-0"
})(["", " ", " align-items:center;background:", ";border:1px solid transparent;border-radius:4px;color:", ";display:inline-flex;font-size:", ";font-weight:", ";height:28px;min-width:44px;padding:", ";&:hover,&:active,&:focus,&[aria-selected='true']{background:", ";}&.focus,&:focus{border-color:", ";outline:none;}&[disabled]{background:", ";border-color:", ";color:", ";&:hover{background:", ";}}"], reset, maxWidth, function (_ref) {
  var theme = _ref.theme;
  return theme.colors.keySubtle;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.keyInteractive;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.fontSizes.xsmall;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.fontWeights.semiBold;
}, function (_ref5) {
  var space = _ref5.theme.space;
  return "".concat(space.u1, " ").concat(space.u2);
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.keyAccent;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.key;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.colors.neutralAccent;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.colors.ui2;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.colors.text1;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.colors.neutralAccent;
});
var ChipLabel = styled(Span).withConfig({
  displayName: "Chip__ChipLabel",
  componentId: "sc-1stj55z-1"
})(["", ""], truncateCSS);
var ChipJSX = forwardRef(function (props, ref) {
  var _useTranslation = useTranslation('Chip'),
      t = _useTranslation.t;

  var iconLabelText = t('Delete');

  var children = props.children,
      disabled = props.disabled,
      _props$iconLabel = props.iconLabel,
      iconLabel = _props$iconLabel === void 0 ? iconLabelText : _props$iconLabel,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onDelete = props.onDelete,
      onKeyUp = props.onKeyUp,
      onKeyDown = props.onKeyDown,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      prefix = props.prefix,
      _props$truncate = props.truncate,
      truncate = _props$truncate === void 0 ? true : _props$truncate,
      rest = _objectWithoutProperties(props, _excluded);

  var clickableProps = useClickable({
    disabled: disabled,
    onBlur: onBlur,
    onClick: onClick,
    onKeyUp: onKeyUp
  });

  var handleKeyDown = function handleKeyDown(event) {
    if (event.key === 'Backspace') {
      onDelete && onDelete(event);
    }
  };

  var handleDelete = function handleDelete(e) {
    if (!disabled) {
      onDelete && onDelete(e);
    }

    e.stopPropagation();
  };

  return React.createElement(ChipStyle, _extends({}, clickableProps, {
    onKeyDown: useWrapEvent(handleKeyDown, onKeyDown),
    ref: ref
  }, rest), React.createElement(ChipLabel, {
    truncate: truncate
  }, prefix && React.createElement(ChipLabel, {
    fontWeight: "normal"
  }, prefix, ": "), children), readOnly || disabled || onDelete && React.createElement(IconButton, {
    disabled: disabled,
    icon: React.createElement(Close, null),
    label: iconLabel,
    ml: "xsmall",
    onClick: handleDelete,
    size: "xxsmall"
  }));
});
ChipJSX.displayName = 'ChipJSX';
export var Chip = styled(ChipJSX).withConfig({
  displayName: "Chip",
  componentId: "sc-1stj55z-2"
})([""]);
//# sourceMappingURL=Chip.js.map
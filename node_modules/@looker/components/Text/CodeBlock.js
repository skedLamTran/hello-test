import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "className"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { border } from '@looker/design-tokens';
import React from 'react';
import styled from 'styled-components';
import { TextBase } from './TextBase';

var CodeBlockLayout = function CodeBlockLayout(_ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, _excluded);

  return React.createElement(TextBase, _extends({
    className: className,
    as: "pre",
    fontFamily: "code"
  }, props), React.createElement("code", null, children));
};

export var CodeBlock = styled(CodeBlockLayout).attrs(function (_ref2) {
  var _ref2$border = _ref2.border,
      border = _ref2$border === void 0 ? '1px solid' : _ref2$border,
      _ref2$borderColor = _ref2.borderColor,
      borderColor = _ref2$borderColor === void 0 ? 'ui2' : _ref2$borderColor,
      _ref2$fontSize = _ref2.fontSize,
      fontSize = _ref2$fontSize === void 0 ? 'small' : _ref2$fontSize,
      _ref2$p = _ref2.p,
      p = _ref2$p === void 0 ? 'medium' : _ref2$p;
  return {
    border: border,
    borderColor: borderColor,
    fontSize: fontSize,
    p: p
  };
}).withConfig({
  displayName: "CodeBlock",
  componentId: "sc-yes8xf-0"
})(["", " color:", ";overflow-y:auto;code{font-family:inherit;}"], border, function (_ref3) {
  var theme = _ref3.theme;
  return theme.colors.text;
});
//# sourceMappingURL=CodeBlock.js.map
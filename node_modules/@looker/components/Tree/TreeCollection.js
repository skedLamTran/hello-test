import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef } from 'react';
import styled from 'styled-components';
import { getNextItemFocus, getItems } from '../List/utils';
import { useArrowKeyNav, useForkedRef } from '../utils';
var TreeCollectionInternal = forwardRef(function (props, forwardedRef) {
  var internalRef = useRef(null);

  var handleKeyDown = function handleKeyDown(event) {
    var treeItems = getItems(internalRef.current);

    if (event.key === 'Home') {
      var firstItem = treeItems[0];
      firstItem && firstItem.focus();
    } else if (event.key === 'End') {
      var lastItem = treeItems[treeItems.length - 1];
      lastItem && lastItem.focus();
    }
  };

  var navProps = useArrowKeyNav({
    axis: 'both',
    getNextFocus: getNextItemFocus,
    onKeyDown: handleKeyDown,
    ref: useForkedRef(internalRef, forwardedRef)
  });
  return React.createElement("ul", _extends({
    role: "tree"
  }, props, navProps));
});
export var TreeCollection = styled(TreeCollectionInternal).withConfig({
  displayName: "TreeCollection",
  componentId: "sc-l1fxxy-0"
})(["list-style-type:none;margin:0;padding:0;"]);
//# sourceMappingURL=TreeCollection.js.map
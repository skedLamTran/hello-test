import type { ReactNode } from 'react';
import type { ControlledLoosely } from '../Accordion2/controlTypes';
import type { ListItemProps } from '../ListItem';
import type { GenericClickProps } from '../utils/useClickable';
export declare const treeItemInnerPropKeys: readonly ["color", "density", "description", "detail", "disabled", "hovered", "icon", "selected", "truncate", "download", "href", "rel", "target"];
declare type AssumeIconAlignment = {
    assumeIconAlignment?: boolean;
    forceLabelPadding?: never;
};
declare type ForceLabelPadding = {
    forceLabelPadding?: boolean;
    assumeIconAlignment?: never;
};
export declare type TreeProps = ControlledLoosely & GenericClickProps<HTMLElement> & Pick<ListItemProps, typeof treeItemInnerPropKeys[number]> & (AssumeIconAlignment | ForceLabelPadding) & {
    border?: boolean;
    branchFontWeight?: boolean;
    dividers?: boolean;
    itemRole?: 'link' | 'none';
    label: ReactNode;
    labelBackgroundOnly?: boolean;
};
export declare type WindowedTreeNodeProps = {
    content: JSX.Element;
    isOpen?: boolean;
    items?: WindowedTreeNodeProps[];
};
export declare type WindowedTreeNodeIDProps = Omit<WindowedTreeNodeProps, 'items'> & {
    content: JSX.Element;
    id: number;
    items?: WindowedTreeNodeIDProps[];
};
export declare type ToggleStateMap = {
    [id: number]: {
        isOpen: boolean;
        length: number;
    };
};
export {};

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.every.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useCallback, useEffect, useReducer } from 'react';
import { listItemDimensions } from '../../ListItem';
import { useWindow } from '../../utils';
import { WindowedTreeNode } from '../WindowedTreeNode';
import { windowedTreeReducer } from './windowedTreeReducer';
import { getWindowedTreeNodeFilterer } from './getWindowedTreeNodeFilterer';
export var useWindowedTree = function useWindowedTree(_ref) {
  var density = _ref.density,
      trees = _ref.trees;

  var _useReducer = useReducer(windowedTreeReducer, {
    map: {},
    shownIDs: [],
    treesWithIDs: []
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      map = _useReducer2$.map,
      shownIDs = _useReducer2$.shownIDs,
      treesWithIDs = _useReducer2$.treesWithIDs,
      dispatch = _useReducer2[1];

  useEffect(function () {
    dispatch({
      payload: trees,
      type: 'RESET'
    });
  }, [trees]);
  var toggleNode = useCallback(function (id, isOpen) {
    if (isOpen) {
      dispatch({
        payload: id,
        type: 'OPEN'
      });
    } else {
      dispatch({
        payload: id,
        type: 'CLOSE'
      });
    }
  }, []);

  var _listItemDimensions = listItemDimensions(density || 0),
      height = _listItemDimensions.height;

  var _useWindow = useWindow({
    enabled: shownIDs.length > 100,
    itemCount: shownIDs.length,
    itemHeight: height
  }),
      after = _useWindow.after,
      before = _useWindow.before,
      end = _useWindow.end,
      ref = _useWindow.ref,
      start = _useWindow.start;

  var content = null;

  if (treesWithIDs) {
    var firstIDinWindow = shownIDs[start];
    var lastIDinWindow = shownIDs[end];
    var nodesInWindow = [];
    treesWithIDs.every(getWindowedTreeNodeFilterer(nodesInWindow, firstIDinWindow, lastIDinWindow));
    content = React.createElement(React.Fragment, null, before, nodesInWindow.map(function (tree) {
      return React.createElement(WindowedTreeNode, _extends({}, tree, {
        firstIDinWindow: firstIDinWindow,
        key: tree.id
      }));
    }), after);
  }

  return {
    content: content,
    contextValue: {
      density: density,
      toggleNode: toggleNode,
      toggleStateMap: map
    },
    ref: ref
  };
};
//# sourceMappingURL=useWindowedTree.js.map
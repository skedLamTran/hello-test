import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["assumeIconAlignment", "border", "children", "dividers", "forceLabelPadding", "isOpen", "itemRole", "label", "labelBackgroundOnly", "defaultOpen", "onBlur", "onClose", "onFocus", "onOpen", "onMouseEnter", "onMouseLeave", "toggleOpen"],
    _excluded2 = ["indicator", "children"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled, { css } from 'styled-components';
import React, { useContext } from 'react';
import { useAccordion2 } from '../Accordion2';
import { Flex } from '../Layout';
import { createSafeRel, HoverDisclosureContext, partitionAriaProps, undefinedCoalesce } from '../utils';
import { List } from '../List';
import { ListItemContext } from '../ListItem';
import { createListItemPartitions } from '../ListItem/utils';
import { TreeContext } from './TreeContext';
import { generateTreeBorder, indicatorDefaults, partitionTreeProps, useTreeHandlers } from './utils';
import { WindowedTreeContext } from './WindowedTreeNode';
import { TreeItem } from './TreeItem';
import { TreeItemContent } from './TreeItemContent';
import { TreeItemLabel } from './TreeItemLabel';

var TreeLayout = function TreeLayout(_ref) {
  var assumeIconAlignment = _ref.assumeIconAlignment,
      propsBorder = _ref.border,
      children = _ref.children,
      dividers = _ref.dividers,
      forceLabelPadding = _ref.forceLabelPadding,
      propsIsOpen = _ref.isOpen,
      _ref$itemRole = _ref.itemRole,
      itemRole = _ref$itemRole === void 0 ? 'none' : _ref$itemRole,
      label = _ref.label,
      propsLabelBackgroundOnly = _ref.labelBackgroundOnly,
      defaultOpen = _ref.defaultOpen,
      onBlur = _ref.onBlur,
      onClose = _ref.onClose,
      onFocus = _ref.onFocus,
      onOpen = _ref.onOpen,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      propsToggleOpen = _ref.toggleOpen,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _partitionTreeProps = partitionTreeProps(restProps),
      _partitionTreeProps2 = _slicedToArray(_partitionTreeProps, 2),
      treeItemInnerProps = _partitionTreeProps2[0],
      accordionInnerProps = _partitionTreeProps2[1];

  var _useTreeHandlers = useTreeHandlers({
    onFocus: onFocus,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }),
      hovered = _useTreeHandlers.hovered,
      contentHandlers = _useTreeHandlers.contentHandlers,
      wrapperHandlers = _useTreeHandlers.wrapperHandlers;

  var _ref2 = treeItemInnerProps,
      propsColor = _ref2.color,
      propsDensity = _ref2.density,
      disabled = _ref2.disabled,
      href = _ref2.href,
      icon = _ref2.icon,
      rel = _ref2.rel,
      selected = _ref2.selected,
      target = _ref2.target;

  var _partitionAriaProps = partitionAriaProps(restProps),
      _partitionAriaProps2 = _slicedToArray(_partitionAriaProps, 1),
      ariaProps = _partitionAriaProps2[0];

  var listContext = useContext(ListItemContext);
  var treeContext = useContext(TreeContext);

  var _useContext = useContext(WindowedTreeContext),
      collectionDensity = _useContext.density,
      contextIsOpen = _useContext.isOpen,
      toggleNode = _useContext.toggleNode,
      partialRender = _useContext.partialRender;

  var isOpen = contextIsOpen !== null && contextIsOpen !== void 0 ? contextIsOpen : propsIsOpen;
  var toggleOpen = toggleNode !== null && toggleNode !== void 0 ? toggleNode : propsToggleOpen;
  var border = undefinedCoalesce([propsBorder, treeContext.border]);
  var color = undefinedCoalesce([propsColor, treeContext.color, listContext.color]);
  var hasLabelBackgroundOnly = undefinedCoalesce([propsLabelBackgroundOnly, treeContext.labelBackgroundOnly]);
  var startingDepth = 0;
  var depth = treeContext.depth ? treeContext.depth : startingDepth;
  var density = collectionDensity || propsDensity || treeContext.density || 0;
  var indicatorIcons = indicatorDefaults.indicatorIcons,
      indicatorPosition = indicatorDefaults.indicatorPosition;

  var _createListItemPartit = createListItemPartitions(_objectSpread(_objectSpread({}, treeItemInnerProps), {}, {
    children: label,
    color: color,
    density: density,
    icon: icon
  })),
      _createListItemPartit2 = _slicedToArray(_createListItemPartit, 2),
      inside = _createListItemPartit2[0],
      outside = _createListItemPartit2[1];

  var accordionProps = _objectSpread({
    defaultOpen: defaultOpen,
    onClose: onClose,
    onOpen: onOpen
  }, accordionInnerProps);

  if (isOpen !== undefined && toggleOpen) {
    accordionProps = _objectSpread(_objectSpread({}, accordionProps), {}, {
      isOpen: isOpen,
      toggleOpen: toggleOpen
    });
  }

  var _useAccordion = useAccordion2(_objectSpread({
    'aria-selected': selected,
    children: React.createElement(List, {
      disableKeyboardNav: true,
      role: "group",
      windowing: false
    }, children),
    density: density,
    disabled: disabled,
    indicatorIcons: indicatorIcons,
    indicatorPosition: indicatorPosition,
    label: inside,
    onBlur: onBlur,
    role: 'treeitem',
    tabIndex: -1
  }, accordionProps)),
      contentDomProps = _useAccordion.contentDomProps,
      domProps = _useAccordion.domProps,
      disclosureProps = _useAccordion.disclosureProps,
      accordionIsOpen = _useAccordion.isOpen;

  var indicator = disclosureProps.indicator,
      disclosureLabel = disclosureProps.children,
      disclosureDomProps = _objectWithoutProperties(disclosureProps, _excluded2);

  var statefulProps = {
    color: color,
    disabled: disabled,
    hovered: hovered,
    selected: selected
  };
  var content = React.createElement(TreeItemContent, _extends({
    "aria-selected": selected,
    depth: depth,
    href: href,
    itemRole: itemRole,
    labelBackgroundOnly: hasLabelBackgroundOnly
  }, contentHandlers, {
    rel: createSafeRel(rel, target),
    target: target
  }, ariaProps, disclosureDomProps, statefulProps), indicator, hasLabelBackgroundOnly ? React.createElement(TreeItemLabel, statefulProps, disclosureLabel) : disclosureLabel);
  return React.createElement(HoverDisclosureContext.Provider, {
    value: {
      visible: hovered
    }
  }, React.createElement(TreeContext.Provider, {
    value: {
      border: border,
      color: color,
      density: density,
      depth: depth + 1,
      labelBackgroundOnly: hasLabelBackgroundOnly
    }
  }, React.createElement("div", domProps, !partialRender && React.createElement(Flex, _extends({
    as: "li",
    color: "text5"
  }, wrapperHandlers), content, outside), accordionIsOpen && React.createElement(TreeAccordionContent, _extends({
    border: border,
    density: density,
    depth: depth
  }, contentDomProps)))));
};

var TreeAccordionContent = styled.div.withConfig({
  displayName: "Tree__TreeAccordionContent",
  componentId: "sc-umxml-0"
})(["", ""], generateTreeBorder);
var dividersCSS = css(["", "{margin-top:1px;}& &{margin-top:1px;}"], TreeItem);
export var Tree = styled(TreeLayout).withConfig({
  displayName: "Tree",
  componentId: "sc-umxml-1"
})(["", ""], function (_ref3) {
  var dividers = _ref3.dividers;
  return dividers && dividersCSS;
});
//# sourceMappingURL=Tree.js.map
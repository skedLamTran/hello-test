import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["className", "color", "density", "disabled", "href", "itemRole", "labelBackgroundOnly", "onBlur", "onClick", "onFocus", "onKeyDown", "onKeyUp", "onMouseEnter", "onMouseLeave", "rel", "selected", "target"],
    _excluded2 = ["focusVisible"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useState } from 'react';
import styled from 'styled-components';
import { Flex } from '../Layout';
import { createListItemPartitions } from '../ListItem/utils';
import { createSafeRel, getNextFocusTarget, HoverDisclosureContext, partitionAriaProps, undefinedCoalesce, useFocusVisible, useWrapEvent } from '../utils';
import { TreeContext } from './TreeContext';
import { TreeItemContent } from './TreeItemContent';
import { TreeItemLabel } from './TreeItemLabel';
export var TreeItem = styled(function (_ref) {
  var className = _ref.className,
      propsColor = _ref.color,
      propsDensity = _ref.density,
      disabled = _ref.disabled,
      href = _ref.href,
      itemRole = _ref.itemRole,
      propsLabelBackgroundOnly = _ref.labelBackgroundOnly,
      onBlur = _ref.onBlur,
      onClick = _ref.onClick,
      onFocus = _ref.onFocus,
      onKeyDown = _ref.onKeyDown,
      onKeyUp = _ref.onKeyUp,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      rel = _ref.rel,
      selected = _ref.selected,
      target = _ref.target,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useContext = useContext(TreeContext),
      contextDensity = _useContext.density,
      depth = _useContext.depth,
      contextColor = _useContext.color,
      contextLabelBackgroundOnly = _useContext.labelBackgroundOnly;

  var hasLabelBackgroundOnly = contextLabelBackgroundOnly || propsLabelBackgroundOnly;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hovered = _useState2[0],
      setHovered = _useState2[1];

  var handleWrapperMouseEnter = useWrapEvent(function () {
    return setHovered(true);
  }, onMouseEnter);
  var handleWrapperMouseLeave = useWrapEvent(function () {
    return setHovered(false);
  }, onMouseLeave);

  var handleWrapperFocus = function handleWrapperFocus() {
    return setHovered(true);
  };

  var handleWrapperBlur = function handleWrapperBlur(event) {
    var nextFocusTarget = getNextFocusTarget(event);

    if (nextFocusTarget && !event.currentTarget.contains(nextFocusTarget)) {
      setHovered(false);
    }
  };

  var _useFocusVisible = useFocusVisible({
    onBlur: onBlur,
    onKeyUp: onKeyUp
  }),
      focusVisible = _useFocusVisible.focusVisible,
      focusVisibleHandlers = _objectWithoutProperties(_useFocusVisible, _excluded2);

  if (hasLabelBackgroundOnly && itemRole !== 'none') console.warn('TreeItems should use itemRole="none" when a parent Tree has labelBackgroundOnly=true for visualize purposes.');
  var density = undefinedCoalesce([propsDensity, contextDensity]);
  var color = undefinedCoalesce([propsColor, contextColor]);
  var statefulProps = {
    color: color,
    disabled: disabled,
    hovered: hovered,
    selected: selected
  };

  var _partitionAriaProps = partitionAriaProps(restProps),
      _partitionAriaProps2 = _slicedToArray(_partitionAriaProps, 2),
      ariaProps = _partitionAriaProps2[0],
      wrapperProps = _partitionAriaProps2[1];

  var _createListItemPartit = createListItemPartitions(_objectSpread(_objectSpread({
    density: density
  }, restProps), statefulProps)),
      _createListItemPartit2 = _slicedToArray(_createListItemPartit, 2),
      inside = _createListItemPartit2[0],
      outside = _createListItemPartit2[1];

  return React.createElement(HoverDisclosureContext.Provider, {
    value: {
      visible: hovered
    }
  }, React.createElement(Flex, _extends({
    as: "li",
    className: className,
    onBlur: handleWrapperBlur,
    onFocus: handleWrapperFocus,
    onMouseEnter: handleWrapperMouseEnter,
    onMouseLeave: handleWrapperMouseLeave
  }, wrapperProps), React.createElement(TreeItemContent, _extends({
    "aria-selected": selected,
    density: density,
    depth: depth + 1,
    focusVisible: focusVisible,
    href: href,
    itemRole: itemRole,
    labelBackgroundOnly: hasLabelBackgroundOnly,
    onClick: onClick,
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    rel: createSafeRel(rel, target),
    tabIndex: -1,
    target: target
  }, ariaProps, focusVisibleHandlers, statefulProps), hasLabelBackgroundOnly ? React.createElement(TreeItemLabel, statefulProps, inside) : inside), outside));
}).withConfig({
  displayName: "TreeItem",
  componentId: "sc-1dl3fv3-0"
})([""]);
//# sourceMappingURL=TreeItem.js.map
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.every.js";
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import { useTranslation } from 'react-i18next';
import React from 'react';
import styled from 'styled-components';
import { Select } from '../Form';
var defaultPageSizes = [10, 25, 50, 100];

var stringToSelectOption = function stringToSelectOption(option) {
  return {
    label: String(option),
    value: String(option)
  };
};

var arrayToSelectOptions = function arrayToSelectOptions(options) {
  return options.map(function (option) {
    return stringToSelectOption(String(option));
  });
};

export var PageSizeLayout = function PageSizeLayout(_ref) {
  var _ref$alwaysVisible = _ref.alwaysVisible,
      alwaysVisible = _ref$alwaysVisible === void 0 ? false : _ref$alwaysVisible,
      value = _ref.value,
      total = _ref.total,
      className = _ref.className,
      onChange = _ref.onChange,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? defaultPageSizes : _ref$options;

  var _useTranslation = useTranslation('PageSize'),
      t = _useTranslation.t;

  var handleOnChange = function handleOnChange(newValue) {
    return onChange(Number(newValue));
  };

  return alwaysVisible || Math.min.apply(Math, _toConsumableArray(options)) < total ? React.createElement("div", {
    className: className
  }, t('Display'), React.createElement(Select, {
    width: "5rem",
    mx: "xsmall",
    options: arrayToSelectOptions(options),
    value: String(value > total ? total : value),
    onChange: handleOnChange,
    disabled: options.every(function (option) {
      return option > total;
    })
  }), React.createElement("span", null, t('of'), " ", total)) : null;
};
export var PageSize = styled(PageSizeLayout).withConfig({
  displayName: "PageSize",
  componentId: "sc-lmdbtc-0"
})(["align-items:center;display:flex;font-size:", ";"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.fontSizes.small;
});
//# sourceMappingURL=PageSize.js.map
"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TrapStackProvider = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TrapStackProvider = ({
  activate,
  context,
  children
}) => {
  const registeredTrapsRef = (0, _react.useRef)({});
  const activeTrapRef = (0, _react.useRef)();
  const deactivateRef = (0, _react.useRef)();
  const value = (0, _react.useMemo)(() => {
    const getTrap = id => {
      const registeredTraps = registeredTrapsRef.current;
      return id ? registeredTraps[id] : (0, _utils.getActiveTrap)(registeredTraps);
    };

    const enableCurrentTrap = () => {
      const newTrap = getTrap();

      if ((newTrap === null || newTrap === void 0 ? void 0 : newTrap.element) !== activeTrapRef.current) {
        var _deactivateRef$curren;

        activeTrapRef.current = newTrap === null || newTrap === void 0 ? void 0 : newTrap.element;
        (_deactivateRef$curren = deactivateRef.current) === null || _deactivateRef$curren === void 0 ? void 0 : _deactivateRef$curren.call(deactivateRef);
        deactivateRef.current = undefined;

        if (newTrap) {
          deactivateRef.current = activate(newTrap);
        }
      }
    };

    const disableCurrentTrap = () => {
      var _deactivateRef$curren2;

      (_deactivateRef$curren2 = deactivateRef.current) === null || _deactivateRef$curren2 === void 0 ? void 0 : _deactivateRef$curren2.call(deactivateRef);
      deactivateRef.current = undefined;
      activeTrapRef.current = undefined;
    };

    const addTrap = (id, trap) => {
      registeredTrapsRef.current[id] = trap;
      enableCurrentTrap();
    };

    const removeTrap = id => {
      const existingTrap = getTrap(id);

      if (existingTrap) {
        const registeredTraps = registeredTrapsRef.current;
        delete registeredTraps[id];
        enableCurrentTrap();
      }
    };

    return {
      activeTrapRef,
      addTrap,
      disableCurrentTrap,
      enableCurrentTrap,
      getTrap,
      removeTrap
    };
  }, [activate]);
  return _react.default.createElement(context.Provider, {
    value: value
  }, children);
};

exports.TrapStackProvider = TrapStackProvider;
//# sourceMappingURL=TrapStackProvider.js.map
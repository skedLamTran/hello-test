"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FontFaceLoader = exports.fontFace = exports.importFont = exports.fontFacesCSS = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireWildcard(require("react"));

var _reactHelmetAsync = require("react-helmet-async");

var _styledComponents = require("styled-components");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const fontFacesCSS = fontSources => fontSources.map(({
  face,
  url
}) => face ? fontFace(face, url) : importFont(url)).join('\n');

exports.fontFacesCSS = fontFacesCSS;

const importFont = url => `
@import url(${url});`;

exports.importFont = importFont;

const fontFace = (face, url) => `
@font-face {
  font-family: ${face};
  src: url('${url}');
}`;

exports.fontFace = fontFace;

const FontFaceLoader = () => {
  const _useContext = (0, _react.useContext)(_styledComponents.ThemeContext),
        fontSources = _useContext.fontSources;

  const css = (0, _react.useMemo)(() => {
    if (fontSources && fontSources.length > 0) {
      return fontFacesCSS(fontSources);
    } else {
      return null;
    }
  }, [fontSources]);
  return css === null ? null : _react.default.createElement(_reactHelmetAsync.Helmet, null, _react.default.createElement("style", {
    type: "text/css"
  }, css));
};

exports.FontFaceLoader = FontFaceLoader;
//# sourceMappingURL=FontFaceLoader.js.map
var _excluded = ["children", "loadFontSources", "loadGoogleFonts", "disableStyleDefender", "dateLocale", "locale", "resources", "themeCustomizations"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.assign.js";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { generateTheme, googleFontUrl, theme as defaultTheme } from '@looker/design-tokens';
import React, { Fragment, useMemo } from 'react';
import { HelmetProvider } from 'react-helmet-async';
import { FocusTrapProvider } from './FocusTrap';
import { ScrollLockProvider } from './ScrollLock';
import { useI18n } from './I18n';
import { ThemeProvider } from './ThemeProvider';
import { FontFaceLoader } from './FontFaceLoader';
import { StyleDefender } from './StyleDefender';
export var ComponentsProvider = function ComponentsProvider(_ref) {
  var children = _ref.children,
      _ref$loadFontSources = _ref.loadFontSources,
      loadFontSources = _ref$loadFontSources === void 0 ? true : _ref$loadFontSources,
      _ref$loadGoogleFonts = _ref.loadGoogleFonts,
      loadGoogleFonts = _ref$loadGoogleFonts === void 0 ? false : _ref$loadGoogleFonts,
      _ref$disableStyleDefe = _ref.disableStyleDefender,
      disableStyleDefender = _ref$disableStyleDefe === void 0 ? false : _ref$disableStyleDefe,
      dateLocale = _ref.dateLocale,
      locale = _ref.locale,
      resources = _ref.resources,
      themeCustomizations = _ref.themeCustomizations,
      props = _objectWithoutProperties(_ref, _excluded);

  var theme = useMemo(function () {
    var draft = generateTheme(props.theme || defaultTheme, themeCustomizations);

    if (loadGoogleFonts) {
      draft.fontSources = [].concat(_toConsumableArray(draft.fontSources || []), [{
        url: googleFontUrl(draft)
      }]);
    }

    return draft;
  }, [props.theme, loadGoogleFonts, themeCustomizations]);
  useI18n({
    dateLocale: dateLocale,
    locale: locale,
    resources: resources
  });
  var ConditionalStyleDefender = disableStyleDefender ? Fragment : StyleDefender;
  return React.createElement(HelmetProvider, null, React.createElement(ThemeProvider, _extends({}, props, {
    theme: theme
  }), React.createElement(ConditionalStyleDefender, null, loadFontSources && React.createElement(FontFaceLoader, null), React.createElement(FocusTrapProvider, null, React.createElement(ScrollLockProvider, null, children)))));
};
//# sourceMappingURL=ComponentsProvider.js.map
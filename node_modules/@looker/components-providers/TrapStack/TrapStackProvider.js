import React, { useRef, useMemo } from 'react';
import { getActiveTrap } from './utils';
export var TrapStackProvider = function TrapStackProvider(_ref) {
  var activate = _ref.activate,
      context = _ref.context,
      children = _ref.children;
  var registeredTrapsRef = useRef({});
  var activeTrapRef = useRef();
  var deactivateRef = useRef();
  var value = useMemo(function () {
    var getTrap = function getTrap(id) {
      var registeredTraps = registeredTrapsRef.current;
      return id ? registeredTraps[id] : getActiveTrap(registeredTraps);
    };

    var enableCurrentTrap = function enableCurrentTrap() {
      var newTrap = getTrap();

      if ((newTrap === null || newTrap === void 0 ? void 0 : newTrap.element) !== activeTrapRef.current) {
        var _deactivateRef$curren;

        activeTrapRef.current = newTrap === null || newTrap === void 0 ? void 0 : newTrap.element;
        (_deactivateRef$curren = deactivateRef.current) === null || _deactivateRef$curren === void 0 ? void 0 : _deactivateRef$curren.call(deactivateRef);
        deactivateRef.current = undefined;

        if (newTrap) {
          deactivateRef.current = activate(newTrap);
        }
      }
    };

    var disableCurrentTrap = function disableCurrentTrap() {
      var _deactivateRef$curren2;

      (_deactivateRef$curren2 = deactivateRef.current) === null || _deactivateRef$curren2 === void 0 ? void 0 : _deactivateRef$curren2.call(deactivateRef);
      deactivateRef.current = undefined;
      activeTrapRef.current = undefined;
    };

    var addTrap = function addTrap(id, trap) {
      registeredTrapsRef.current[id] = trap;
      enableCurrentTrap();
    };

    var removeTrap = function removeTrap(id) {
      var existingTrap = getTrap(id);

      if (existingTrap) {
        var registeredTraps = registeredTrapsRef.current;
        delete registeredTraps[id];
        enableCurrentTrap();
      }
    };

    return {
      activeTrapRef: activeTrapRef,
      addTrap: addTrap,
      disableCurrentTrap: disableCurrentTrap,
      enableCurrentTrap: enableCurrentTrap,
      getTrap: getTrap,
      removeTrap: removeTrap
    };
  }, [activate]);
  return React.createElement(context.Provider, {
    value: value
  }, children);
};
//# sourceMappingURL=TrapStackProvider.js.map
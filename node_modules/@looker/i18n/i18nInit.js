import "regenerator-runtime/runtime.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.promise.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import i18next from 'i18next';
export var i18nInitOptions = {
  fallbackLng: 'en',
  interpolation: {
    escapeValue: false
  },
  keySeparator: false,
  lng: 'en',
  missingKeyHandler: function missingKeyHandler(languages, ns, key) {
    if (process.env.NODE_ENV !== 'production') {
      throw new Error("Missing i18n key (".concat(languages.join(', '), "): \"").concat(key, "\" in ").concat(ns));
    }
  },
  nsSeparator: false,
  saveMissing: true
};
export var i18nUpdate = function i18nUpdate(_ref) {
  var resources = _ref.resources,
      locale = _ref.locale;

  if (resources) {
    Object.keys(resources).forEach(function (lng) {
      var allNamespaces = resources[lng];
      Object.keys(allNamespaces).forEach(function (ns) {
        i18next.addResourceBundle(lng, ns, allNamespaces[ns]);
      });
    });
  }

  if (locale && locale !== i18next.language) {
    i18next.changeLanguage(locale);
  }
};
export function i18nInit(_x) {
  return _i18nInit.apply(this, arguments);
}

function _i18nInit() {
  _i18nInit = _asyncToGenerator(regeneratorRuntime.mark(function _callee(options) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (i18next.isInitialized) {
              i18nUpdate(options);
            }

            i18next.init(_objectSpread(_objectSpread({}, i18nInitOptions), {}, {
              lng: options.locale,
              resources: options.resources
            }));
            return _context.abrupt("return", i18next);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _i18nInit.apply(this, arguments);
}
//# sourceMappingURL=i18nInit.js.map
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { generateColors } from '../../color';
import { defaultFontFallbacks } from '../../tokens';
import { generateDefaults } from '../../defaults';
import { generateFontFamilies } from '../../utils/typography';
export var generateTheme = function generateTheme(theme, customizations) {
  if (!customizations) {
    return theme;
  }

  var fontSources = customizations.fontSources;
  var fonts = customizations.fontFamilies ? generateFontFamilies(theme.fonts, defaultFontFallbacks, customizations.fontFamilies) : theme.fonts;
  var colors = customizations.colors ? generateColors(theme.colors, customizations.colors) : theme.colors;
  var defaults = customizations.defaults ? generateDefaults(theme.defaults, customizations.defaults) : theme.defaults;
  return _objectSpread(_objectSpread({}, theme), {}, {
    colors: colors,
    defaults: defaults,
    fontSources: fontSources,
    fonts: fonts
  });
};
//# sourceMappingURL=generateTheme.js.map
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export var paddingDefaultsHelper = function paddingDefaultsHelper(props, defaults) {
  var merged = _objectSpread(_objectSpread({}, defaults), props);

  var p = merged.p,
      px = merged.px,
      py = merged.py,
      pt = merged.pt,
      pr = merged.pr,
      pb = merged.pb,
      pl = merged.pl;
  pt = pt || py || p;
  pb = pb || py || p;
  py = pb === pt ? pb : undefined;
  pr = pr || px || p;
  pl = pl || px || p;
  px = pr === pl ? pr : undefined;

  if (px && px === py) {
    return {
      p: p
    };
  } else {
    p = undefined;
  }

  var response = {
    pb: py ? undefined : pb,
    pl: px ? undefined : pl,
    pr: px ? undefined : pr,
    pt: py ? undefined : pt,
    px: px,
    py: py
  };
  Object.keys(response).forEach(function (key) {
    if (typeof response[key] === 'undefined') {
      delete response[key];
    }
  });
  return response;
};
//# sourceMappingURL=paddingDefaultsHelper.js.map
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import pickBy from 'lodash/pickBy';
import identity from 'lodash/identity';
import { generateBlendColors } from './generateBlendColors';
import { generateDerivativeColors } from './generateDerivativeColors';
import { generateStatefulColors } from './generateStatefulColors';
export var generateColors = function generateColors(themeColors, customColors) {
  var specifiable = _objectSpread(_objectSpread({}, themeColors), pickBy(customColors, identity));

  if (customColors && customColors.text) {
    if (!customColors.body) {
      specifiable.body = undefined;
    }

    if (!customColors.title) {
      specifiable.title = undefined;
    }
  }

  var blends = generateBlendColors(specifiable);
  var derivatives = generateDerivativeColors(specifiable, blends);
  var statefulColors = generateStatefulColors(specifiable, derivatives);
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, specifiable), derivatives), blends), statefulColors);
};
//# sourceMappingURL=generateColors.js.map
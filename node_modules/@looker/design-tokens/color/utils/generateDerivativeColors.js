function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.string.link.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import { textBlends } from '../blendPoints';
import { accentBlendScale, generateInteractive } from './generateStatefulColors';
import { mixColors } from './mixColors';
import { mixScaledColors } from './mixScaledColors';
export var generateDerivativeColors = function generateDerivativeColors(_ref, _ref2) {
  var background = _ref.background,
      inform = _ref.inform,
      link = _ref.link,
      positive = _ref.positive,
      text = _ref.text,
      warn = _ref.warn,
      title = _ref.title,
      body = _ref.body;
  var text5 = _ref2.text5;
  var accents = {
    informAccent: mixScaledColors(accentBlendScale, inform, background),
    positiveAccent: mixScaledColors(accentBlendScale, positive, background),
    warnAccent: mixScaledColors(accentBlendScale, warn, background)
  };
  return _objectSpread({
    body: body || text5,
    field: background,
    inverse: text,
    inverseOn: background,
    linkInteractive: generateInteractive(link),
    neutral: mixColors(textBlends[1], text, background),
    title: title || text5
  }, accents);
};
//# sourceMappingURL=generateDerivativeColors.js.map
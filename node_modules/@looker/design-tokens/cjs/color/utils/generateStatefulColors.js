"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateStatefulColors = exports.generateExtendedStatefulColors = exports.generateStatefulColor = exports.accentBlendScale = exports.generatePressed = exports.generateInteractive = void 0;

var _darken = _interopRequireDefault(require("polished/lib/color/darken"));

var _lighten = _interopRequireDefault(require("polished/lib/color/lighten"));

var _mixScaledColors = require("./mixScaledColors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const generateInteractive = color => (0, _lighten.default)(0.04, color);

exports.generateInteractive = generateInteractive;

const generatePressed = color => (0, _darken.default)(0.07, color);

exports.generatePressed = generatePressed;
const accentBlendScale = 16;
exports.accentBlendScale = accentBlendScale;

const generateStatefulColor = (background, color) => {
  return {
    subtle: (0, _mixScaledColors.mixScaledColors)(10, color, background),
    accent: (0, _mixScaledColors.mixScaledColors)(accentBlendScale, color, background),
    focus: (0, _mixScaledColors.mixScaledColors)(60, color, background),
    interactive: generateInteractive(color),
    pressed: generatePressed(color),
    text: background,
    border: color
  };
};

exports.generateStatefulColor = generateStatefulColor;

const generateExtendedStatefulColors = specifiable => {
  const background = specifiable.background,
        calculation = specifiable.calculation,
        dimension = specifiable.dimension,
        measure = specifiable.measure;
  const calculationColors = generateStatefulColor(background, calculation);
  const dimensionColors = generateStatefulColor(background, dimension);
  const measureColors = generateStatefulColor(background, measure);
  return {
    calculationSubtle: calculationColors.subtle,
    calculationAccent: calculationColors.accent,
    calculationFocus: calculationColors.focus,
    calculationInteractive: calculationColors.interactive,
    calculationPressed: calculationColors.pressed,
    calculationText: calculationColors.text,
    calculationBorder: calculationColors.border,
    dimensionSubtle: dimensionColors.subtle,
    dimensionAccent: dimensionColors.accent,
    dimensionFocus: dimensionColors.focus,
    dimensionInteractive: dimensionColors.interactive,
    dimensionPressed: dimensionColors.pressed,
    dimensionText: dimensionColors.text,
    dimensionBorder: dimensionColors.border,
    measureSubtle: measureColors.subtle,
    measureAccent: measureColors.accent,
    measureFocus: measureColors.focus,
    measureInteractive: measureColors.interactive,
    measurePressed: measureColors.pressed,
    measureText: measureColors.text,
    measureBorder: measureColors.border
  };
};

exports.generateExtendedStatefulColors = generateExtendedStatefulColors;

const generateStatefulColors = (specifiable, derivatives) => {
  const background = specifiable.background,
        key = specifiable.key,
        critical = specifiable.critical;
  const neutral = derivatives.neutral;
  const extendedStatefulColors = generateExtendedStatefulColors(specifiable);
  const keyColors = generateStatefulColor(background, key);
  const criticalColors = generateStatefulColor(background, critical);
  const neutralColors = generateStatefulColor(background, neutral);
  return _objectSpread({
    keySubtle: keyColors.subtle,
    keyAccent: keyColors.accent,
    keyFocus: keyColors.focus,
    keyInteractive: keyColors.interactive,
    keyPressed: keyColors.pressed,
    keyText: keyColors.text,
    keyBorder: keyColors.border,
    criticalSubtle: criticalColors.subtle,
    criticalAccent: criticalColors.accent,
    criticalFocus: criticalColors.focus,
    criticalInteractive: criticalColors.interactive,
    criticalPressed: criticalColors.pressed,
    criticalText: criticalColors.text,
    criticalBorder: criticalColors.border,
    neutralSubtle: neutralColors.subtle,
    neutralAccent: neutralColors.accent,
    neutralFocus: neutralColors.focus,
    neutralInteractive: neutralColors.interactive,
    neutralPressed: neutralColors.pressed,
    neutralText: neutralColors.text,
    neutralBorder: neutralColors.border
  }, extendedStatefulColors);
};

exports.generateStatefulColors = generateStatefulColors;
//# sourceMappingURL=generateStatefulColors.js.map
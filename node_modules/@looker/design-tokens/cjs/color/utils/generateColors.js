"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateColors = void 0;

var _pickBy = _interopRequireDefault(require("lodash/pickBy"));

var _identity = _interopRequireDefault(require("lodash/identity"));

var _generateBlendColors = require("./generateBlendColors");

var _generateDerivativeColors = require("./generateDerivativeColors");

var _generateStatefulColors = require("./generateStatefulColors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const generateColors = (themeColors, customColors) => {
  const specifiable = _objectSpread(_objectSpread({}, themeColors), (0, _pickBy.default)(customColors, _identity.default));

  if (customColors && customColors.text) {
    if (!customColors.body) {
      specifiable.body = undefined;
    }

    if (!customColors.title) {
      specifiable.title = undefined;
    }
  }

  const blends = (0, _generateBlendColors.generateBlendColors)(specifiable);
  const derivatives = (0, _generateDerivativeColors.generateDerivativeColors)(specifiable, blends);
  const statefulColors = (0, _generateStatefulColors.generateStatefulColors)(specifiable, derivatives);
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, specifiable), derivatives), blends), statefulColors);
};

exports.generateColors = generateColors;
//# sourceMappingURL=generateColors.js.map
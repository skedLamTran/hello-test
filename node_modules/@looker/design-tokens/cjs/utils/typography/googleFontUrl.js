"use strict";

require("core-js/modules/es.array.index-of.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.googleFontUrl = exports.googleFontParam = void 0;

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/web.url.js");

require("core-js/modules/es.object.values.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.string.search.js");

const _excluded = ["family", "italic"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const googleFontsBaseUrl = 'https://fonts.googleapis.com/css2';

const googleFontParam = _ref => {
  let family = _ref.family,
      _ref$italic = _ref.italic,
      italic = _ref$italic === void 0 ? true : _ref$italic,
      font = _objectWithoutProperties(_ref, _excluded);

  let uri = `${family.replace(/"/g, '').replace(/ /g, '+')}:`;
  let weights = font.weights.map(weight => `0,${weight}`);

  if (italic) {
    const italicizedWeights = font.weights.map(weight => `1,${weight}`);
    weights = [...weights, ...italicizedWeights];
    uri += 'ital,';
  }

  uri += `wght@${weights.join(';')}`;
  return uri;
};

exports.googleFontParam = googleFontParam;

const googleFontUrl = theme => {
  const url = new URL(googleFontsBaseUrl);
  const weights = Object.values(theme.fontWeights);
  const fonts = Object.values(theme.fonts).map(family => {
    return {
      family: family.split(',')[0].replace(/'/g, ''),
      weights
    };
  });
  const search = fonts.map(font => `family=${googleFontParam(font)}`);
  search.push('display=swap');
  url.search = search.join('&');
  return url.toString();
};

exports.googleFontUrl = googleFontUrl;
//# sourceMappingURL=googleFontUrl.js.map